use mixed 8bit quant
WARNING 11-01 18:45:12 config.py:1718] The model's config.json does not contain any of the following keys to determine the original maximum length of the model: ['max_position_embeddings', 'n_positions', 'max_seq_len', 'seq_length', 'model_max_length', 'max_sequence_length', 'max_seq_length', 'seq_len']. Assuming the model's maximum length is 2048.
WARNING 11-01 18:45:12 config.py:322] mixq8bit quantization is not fully optimized yet. The speed can be slower than non-quantized models.
INFO 11-01 18:45:12 llm_engine.py:226] Initializing an LLM engine (v0.6.1.dev238+ge2c6e0a82) with config: model='/home/chenyidong/data/mixqdata/quant8/falcon-7b', speculative_config=None, tokenizer='/home/chenyidong/data/mixqdata/quant8/falcon-7b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=True, dtype=torch.float16, max_seq_len=2048, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=mixq8bit, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=/home/chenyidong/data/mixqdata/quant8/falcon-7b, use_v2_block_manager=False, num_scheduler_steps=1, multi_step_stream_outputs=False, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, mm_processor_kwargs=None)
INFO 11-01 18:45:12 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 11-01 18:45:12 selector.py:116] Using XFormers backend.
INFO 11-01 18:45:13 model_runner.py:1014] Starting to load model /home/chenyidong/data/mixqdata/quant8/falcon-7b...
--get_quant_method---

--get_quant_method---

INFO 11-01 18:45:13 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 11-01 18:45:13 selector.py:116] Using XFormers backend.
--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
--get_quant_method---

--get_quant_method---

--get_quant_method---

--get_quant_method---
down
INFO 11-01 18:45:21 model_runner.py:1025] Loading model weights took 13.1738 GB
INFO 11-01 18:45:21 gpu_executor.py:122] # GPU blocks: 60303, # CPU blocks: 32768
INFO 11-01 18:45:23 model_runner.py:1329] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-01 18:45:23 model_runner.py:1333] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-01 18:45:29 model_runner.py:1456] Graph capturing finished in 5 secs.
Prompt: 'Hello, my name is', Generated text: ''
Prompt: 'The president of the United States is', Generated text: ''
Prompt: 'The capital of France is', Generated text: ''
Prompt: 'The future of AI is', Generated text: ''
WARNING 12-27 00:20:14 config.py:322] mixq4bit quantization is not fully optimized yet. The speed can be slower than non-quantized models.
WARNING 12-27 00:20:14 config.py:392] To see benefits of async output processing, enable CUDA graph. Since, enforce-eager is enabled, async output processor cannot be used
INFO 12-27 00:20:14 llm_engine.py:226] Initializing an LLM engine (v0.6.1.dev238+ge2c6e0a82) with config: model='/home/dataset/mixqdata/quant4/Llama-2-7b', speculative_config=None, tokenizer='/home/dataset/mixqdata/quant4/Llama-2-7b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=True, dtype=torch.float16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=mixq4bit, enforce_eager=True, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=/home/dataset/mixqdata/quant4/Llama-2-7b, use_v2_block_manager=False, num_scheduler_steps=1, multi_step_stream_outputs=False, enable_prefix_caching=False, use_async_output_proc=False, use_cached_outputs=False, mm_processor_kwargs=None)
INFO 12-27 00:20:15 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 12-27 00:20:15 selector.py:116] Using XFormers backend.
INFO 12-27 00:20:16 model_runner.py:1014] Starting to load model /home/dataset/mixqdata/quant4/Llama-2-7b...
mix------weight
4
128
INFO 12-27 00:20:16 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 12-27 00:20:16 selector.py:116] Using XFormers backend.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:20 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:20:21 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
INFO 12-27 00:20:21 model_runner.py:1025] Loading model weights took 8.3436 GB
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        ...,
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        ...,
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        ...,
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-1.7071e-03, -8.9836e-04,  1.8477e-05,  ..., -7.9775e-04,
          1.5726e-03,  1.6327e-03],
        [-1.7071e-03, -8.9836e-04,  1.8477e-05,  ..., -7.9775e-04,
          1.5726e-03,  1.6327e-03],
        [-1.7071e-03, -8.9836e-04,  1.8477e-05,  ..., -7.9775e-04,
          1.5726e-03,  1.6327e-03],
        ...,
        [-1.7071e-03, -8.9836e-04,  1.8477e-05,  ..., -7.9775e-04,
          1.5726e-03,  1.6327e-03],
        [-1.7071e-03, -8.9836e-04,  1.8477e-05,  ..., -7.9775e-04,
          1.5726e-03,  1.6327e-03],
        [-1.7071e-03, -8.9836e-04,  1.8477e-05,  ..., -7.9775e-04,
          1.5726e-03,  1.6327e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        ...,
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        ...,
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        ...,
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[  91.4375, -137.3750,   23.2188,  ...,   -5.0352,   -0.6475,
            0.3865],
        [  91.4375, -137.3750,   23.2188,  ...,   -5.0352,   -0.6475,
            0.3865],
        [  91.4375, -137.3750,   23.2188,  ...,   -5.0352,   -0.6475,
            0.3865],
        ...,
        [  91.4375, -137.3750,   23.2188,  ...,   -5.0352,   -0.6475,
            0.3865],
        [  91.4375, -137.3750,   23.2188,  ...,   -5.0352,   -0.6475,
            0.3865],
        [  91.4375, -137.3750,   23.2188,  ...,   -5.0352,   -0.6475,
            0.3865]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        ...,
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        ...,
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        ...,
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ 151.0000, -192.1250,  228.6250,  ..., -160.7500,   51.9375,
          101.9375],
        [ 151.0000, -192.1250,  228.6250,  ..., -160.7500,   51.9375,
          101.9375],
        [ 151.0000, -192.1250,  228.6250,  ..., -160.7500,   51.9375,
          101.9375],
        ...,
        [ 151.0000, -192.1250,  228.6250,  ..., -160.7500,   51.9375,
          101.9375],
        [ 151.0000, -192.1250,  228.6250,  ..., -160.7500,   51.9375,
          101.9375],
        [ 151.0000, -192.1250,  228.6250,  ..., -160.7500,   51.9375,
          101.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        ...,
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        ...,
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        ...,
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-16.4688,  68.5625, -49.3750,  ...,  33.9375, -21.2656,  66.2500],
        [-16.4688,  68.5625, -49.3750,  ...,  33.9375, -21.2656,  66.2500],
        [-16.4688,  68.5625, -49.3750,  ...,  33.9375, -21.2656,  66.2500],
        ...,
        [-16.4688,  68.5625, -49.3750,  ...,  33.9375, -21.2656,  66.2500],
        [-16.4688,  68.5625, -49.3750,  ...,  33.9375, -21.2656,  66.2500],
        [-16.4688,  68.5625, -49.3750,  ...,  33.9375, -21.2656,  66.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        ...,
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        ...,
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        ...,
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-47.7812,  19.8125,  79.2500,  ..., -97.5000,   9.3438,  49.2812],
        [-47.7812,  19.8125,  79.2500,  ..., -97.5000,   9.3438,  49.2812],
        [-47.7812,  19.8125,  79.2500,  ..., -97.5000,   9.3438,  49.2812],
        ...,
        [-47.7812,  19.8125,  79.2500,  ..., -97.5000,   9.3438,  49.2812],
        [-47.7812,  19.8125,  79.2500,  ..., -97.5000,   9.3438,  49.2812],
        [-47.7812,  19.8125,  79.2500,  ..., -97.5000,   9.3438,  49.2812]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        ...,
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        ...,
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        ...,
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-82.7500, 127.4375,  65.0625,  ..., -59.0000,  93.1250,  -3.7734],
        [-82.7500, 127.4375,  65.0625,  ..., -59.0000,  93.1250,  -3.7734],
        [-82.7500, 127.4375,  65.0625,  ..., -59.0000,  93.1250,  -3.7734],
        ...,
        [-82.7500, 127.4375,  65.0625,  ..., -59.0000,  93.1250,  -3.7734],
        [-82.7500, 127.4375,  65.0625,  ..., -59.0000,  93.1250,  -3.7734],
        [-82.7500, 127.4375,  65.0625,  ..., -59.0000,  93.1250,  -3.7734]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        ...,
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        ...,
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        ...,
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[144.5000,  50.4688, -36.0938,  ..., -66.1875, -92.6875,  64.5000],
        [144.5000,  50.4688, -36.0938,  ..., -66.1875, -92.6875,  64.5000],
        [144.5000,  50.4688, -36.0938,  ..., -66.1875, -92.6875,  64.5000],
        ...,
        [144.5000,  50.4688, -36.0938,  ..., -66.1875, -92.6875,  64.5000],
        [144.5000,  50.4688, -36.0938,  ..., -66.1875, -92.6875,  64.5000],
        [144.5000,  50.4688, -36.0938,  ..., -66.1875, -92.6875,  64.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        ...,
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        ...,
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        ...,
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ 69.7500,   5.8242, 100.4375,  ..., 144.1250, -88.3750, -71.6250],
        [ 69.7500,   5.8242, 100.4375,  ..., 144.1250, -88.3750, -71.6250],
        [ 69.7500,   5.8242, 100.4375,  ..., 144.1250, -88.3750, -71.6250],
        ...,
        [ 69.7500,   5.8242, 100.4375,  ..., 144.1250, -88.3750, -71.6250],
        [ 69.7500,   5.8242, 100.4375,  ..., 144.1250, -88.3750, -71.6250],
        [ 69.7500,   5.8242, 100.4375,  ..., 144.1250, -88.3750, -71.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        ...,
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        ...,
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        ...,
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-10.1250,  67.8125,  69.6250,  ..., -54.7188,  27.4844, -53.1250],
        [-10.1250,  67.8125,  69.6250,  ..., -54.7188,  27.4844, -53.1250],
        [-10.1250,  67.8125,  69.6250,  ..., -54.7188,  27.4844, -53.1250],
        ...,
        [-10.1250,  67.8125,  69.6250,  ..., -54.7188,  27.4844, -53.1250],
        [-10.1250,  67.8125,  69.6250,  ..., -54.7188,  27.4844, -53.1250],
        [-10.1250,  67.8125,  69.6250,  ..., -54.7188,  27.4844, -53.1250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        ...,
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        ...,
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        ...,
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-19.7656,  46.7500,  69.6875,  ..., 107.5625,  -7.5586,  76.0000],
        [-19.7656,  46.7500,  69.6875,  ..., 107.5625,  -7.5586,  76.0000],
        [-19.7656,  46.7500,  69.6875,  ..., 107.5625,  -7.5586,  76.0000],
        ...,
        [-19.7656,  46.7500,  69.6875,  ..., 107.5625,  -7.5586,  76.0000],
        [-19.7656,  46.7500,  69.6875,  ..., 107.5625,  -7.5586,  76.0000],
        [-19.7656,  46.7500,  69.6875,  ..., 107.5625,  -7.5586,  76.0000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        ...,
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        ...,
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        ...,
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-141.6250,   44.0312,  253.7500,  ...,  -44.9375,  -24.2656,
           58.1875],
        [-141.6250,   44.0312,  253.7500,  ...,  -44.9375,  -24.2656,
           58.1875],
        [-141.6250,   44.0312,  253.7500,  ...,  -44.9375,  -24.2656,
           58.1875],
        ...,
        [-141.6250,   44.0312,  253.7500,  ...,  -44.9375,  -24.2656,
           58.1875],
        [-141.6250,   44.0312,  253.7500,  ...,  -44.9375,  -24.2656,
           58.1875],
        [-141.6250,   44.0312,  253.7500,  ...,  -44.9375,  -24.2656,
           58.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        ...,
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        ...,
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        ...,
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ -28.7656,   46.6562,  269.7500,  ...,  -69.0625,    6.1797,
         -107.6875],
        [ -28.7656,   46.6562,  269.7500,  ...,  -69.0625,    6.1797,
         -107.6875],
        [ -28.7656,   46.6562,  269.7500,  ...,  -69.0625,    6.1797,
         -107.6875],
        ...,
        [ -28.7656,   46.6562,  269.7500,  ...,  -69.0625,    6.1797,
         -107.6875],
        [ -28.7656,   46.6562,  269.7500,  ...,  -69.0625,    6.1797,
         -107.6875],
        [ -28.7656,   46.6562,  269.7500,  ...,  -69.0625,    6.1797,
         -107.6875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        ...,
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        ...,
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        ...,
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-35.5312,  19.0938, -30.5312,  ..., -87.8750, -71.3750, -22.8125],
        [-35.5312,  19.0938, -30.5312,  ..., -87.8750, -71.3750, -22.8125],
        [-35.5312,  19.0938, -30.5312,  ..., -87.8750, -71.3750, -22.8125],
        ...,
        [-35.5312,  19.0938, -30.5312,  ..., -87.8750, -71.3750, -22.8125],
        [-35.5312,  19.0938, -30.5312,  ..., -87.8750, -71.3750, -22.8125],
        [-35.5312,  19.0938, -30.5312,  ..., -87.8750, -71.3750, -22.8125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        ...,
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        ...,
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        ...,
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[  70.3750,  -58.2812,   92.9375,  ..., -190.1250,  157.2500,
           -9.3906],
        [  70.3750,  -58.2812,   92.9375,  ..., -190.1250,  157.2500,
           -9.3906],
        [  70.3750,  -58.2812,   92.9375,  ..., -190.1250,  157.2500,
           -9.3906],
        ...,
        [  70.3750,  -58.2812,   92.9375,  ..., -190.1250,  157.2500,
           -9.3906],
        [  70.3750,  -58.2812,   92.9375,  ..., -190.1250,  157.2500,
           -9.3906],
        [  70.3750,  -58.2812,   92.9375,  ..., -190.1250,  157.2500,
           -9.3906]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        ...,
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        ...,
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        ...,
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[54.0938, 55.2500, 37.0625,  ..., 72.6250, 17.6250, 77.8125],
        [54.0938, 55.2500, 37.0625,  ..., 72.6250, 17.6250, 77.8125],
        [54.0938, 55.2500, 37.0625,  ..., 72.6250, 17.6250, 77.8125],
        ...,
        [54.0938, 55.2500, 37.0625,  ..., 72.6250, 17.6250, 77.8125],
        [54.0938, 55.2500, 37.0625,  ..., 72.6250, 17.6250, 77.8125],
        [54.0938, 55.2500, 37.0625,  ..., 72.6250, 17.6250, 77.8125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        ...,
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        ...,
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        ...,
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[  83.0000,  -49.7188, -105.6875,  ...,  312.2500,   52.8438,
           31.9844],
        [  83.0000,  -49.7188, -105.6875,  ...,  312.2500,   52.8438,
           31.9844],
        [  83.0000,  -49.7188, -105.6875,  ...,  312.2500,   52.8438,
           31.9844],
        ...,
        [  83.0000,  -49.7188, -105.6875,  ...,  312.2500,   52.8438,
           31.9844],
        [  83.0000,  -49.7188, -105.6875,  ...,  312.2500,   52.8438,
           31.9844],
        [  83.0000,  -49.7188, -105.6875,  ...,  312.2500,   52.8438,
           31.9844]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        ...,
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        ...,
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        ...,
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-147.2500,  285.5000,   98.8125,  ...,  112.3750,   39.0938,
           12.6719],
        [-147.2500,  285.5000,   98.8125,  ...,  112.3750,   39.0938,
           12.6719],
        [-147.2500,  285.5000,   98.8125,  ...,  112.3750,   39.0938,
           12.6719],
        ...,
        [-147.2500,  285.5000,   98.8125,  ...,  112.3750,   39.0938,
           12.6719],
        [-147.2500,  285.5000,   98.8125,  ...,  112.3750,   39.0938,
           12.6719],
        [-147.2500,  285.5000,   98.8125,  ...,  112.3750,   39.0938,
           12.6719]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        ...,
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        ...,
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        ...,
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-232.0000,  161.6250, -190.8750,  ...,   20.4688, -148.8750,
           57.5312],
        [-232.0000,  161.6250, -190.8750,  ...,   20.4688, -148.8750,
           57.5312],
        [-232.0000,  161.6250, -190.8750,  ...,   20.4688, -148.8750,
           57.5312],
        ...,
        [-232.0000,  161.6250, -190.8750,  ...,   20.4688, -148.8750,
           57.5312],
        [-232.0000,  161.6250, -190.8750,  ...,   20.4688, -148.8750,
           57.5312],
        [-232.0000,  161.6250, -190.8750,  ...,   20.4688, -148.8750,
           57.5312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        ...,
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        ...,
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        ...,
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-231.1250,   23.2969,  361.2500,  ...,   63.5000, -115.3750,
         -320.0000],
        [-231.1250,   23.2969,  361.2500,  ...,   63.5000, -115.3750,
         -320.0000],
        [-231.1250,   23.2969,  361.2500,  ...,   63.5000, -115.3750,
         -320.0000],
        ...,
        [-231.1250,   23.2969,  361.2500,  ...,   63.5000, -115.3750,
         -320.0000],
        [-231.1250,   23.2969,  361.2500,  ...,   63.5000, -115.3750,
         -320.0000],
        [-231.1250,   23.2969,  361.2500,  ...,   63.5000, -115.3750,
         -320.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        ...,
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        ...,
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        ...,
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ 103.1250,  369.2500,  249.0000,  ...,  102.6250, -168.5000,
          141.1250],
        [ 103.1250,  369.2500,  249.0000,  ...,  102.6250, -168.5000,
          141.1250],
        [ 103.1250,  369.2500,  249.0000,  ...,  102.6250, -168.5000,
          141.1250],
        ...,
        [ 103.1250,  369.2500,  249.0000,  ...,  102.6250, -168.5000,
          141.1250],
        [ 103.1250,  369.2500,  249.0000,  ...,  102.6250, -168.5000,
          141.1250],
        [ 103.1250,  369.2500,  249.0000,  ...,  102.6250, -168.5000,
          141.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        ...,
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        ...,
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        ...,
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ 371.5000, -137.5000,  -88.6875,  ..., -167.6250,  -10.1641,
          136.6250],
        [ 371.5000, -137.5000,  -88.6875,  ..., -167.6250,  -10.1641,
          136.6250],
        [ 371.5000, -137.5000,  -88.6875,  ..., -167.6250,  -10.1641,
          136.6250],
        ...,
        [ 371.5000, -137.5000,  -88.6875,  ..., -167.6250,  -10.1641,
          136.6250],
        [ 371.5000, -137.5000,  -88.6875,  ..., -167.6250,  -10.1641,
          136.6250],
        [ 371.5000, -137.5000,  -88.6875,  ..., -167.6250,  -10.1641,
          136.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        ...,
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        ...,
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        ...,
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ -34.3125, -113.6875,  129.2500,  ..., -271.7500,  440.2500,
         -310.5000],
        [ -34.3125, -113.6875,  129.2500,  ..., -271.7500,  440.2500,
         -310.5000],
        [ -34.3125, -113.6875,  129.2500,  ..., -271.7500,  440.2500,
         -310.5000],
        ...,
        [ -34.3125, -113.6875,  129.2500,  ..., -271.7500,  440.2500,
         -310.5000],
        [ -34.3125, -113.6875,  129.2500,  ..., -271.7500,  440.2500,
         -310.5000],
        [ -34.3125, -113.6875,  129.2500,  ..., -271.7500,  440.2500,
         -310.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        ...,
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        ...,
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        ...,
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-273.5000, -122.3750,   52.2812,  ...,  -87.7500, -197.6250,
          488.5000],
        [-273.5000, -122.3750,   52.2812,  ...,  -87.7500, -197.6250,
          488.5000],
        [-273.5000, -122.3750,   52.2812,  ...,  -87.7500, -197.6250,
          488.5000],
        ...,
        [-273.5000, -122.3750,   52.2812,  ...,  -87.7500, -197.6250,
          488.5000],
        [-273.5000, -122.3750,   52.2812,  ...,  -87.7500, -197.6250,
          488.5000],
        [-273.5000, -122.3750,   52.2812,  ...,  -87.7500, -197.6250,
          488.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        ...,
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        ...,
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        ...,
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ 12.9297,  21.6250, 180.5000,  ..., 371.5000, 131.0000, 248.2500],
        [ 12.9297,  21.6250, 180.5000,  ..., 371.5000, 131.0000, 248.2500],
        [ 12.9297,  21.6250, 180.5000,  ..., 371.5000, 131.0000, 248.2500],
        ...,
        [ 12.9297,  21.6250, 180.5000,  ..., 371.5000, 131.0000, 248.2500],
        [ 12.9297,  21.6250, 180.5000,  ..., 371.5000, 131.0000, 248.2500],
        [ 12.9297,  21.6250, 180.5000,  ..., 371.5000, 131.0000, 248.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        ...,
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        ...,
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        ...,
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-182.5000,  257.0000, -208.7500,  ...,   72.0625,  -90.3125,
          123.0000],
        [-182.5000,  257.0000, -208.7500,  ...,   72.0625,  -90.3125,
          123.0000],
        [-182.5000,  257.0000, -208.7500,  ...,   72.0625,  -90.3125,
          123.0000],
        ...,
        [-182.5000,  257.0000, -208.7500,  ...,   72.0625,  -90.3125,
          123.0000],
        [-182.5000,  257.0000, -208.7500,  ...,   72.0625,  -90.3125,
          123.0000],
        [-182.5000,  257.0000, -208.7500,  ...,   72.0625,  -90.3125,
          123.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        ...,
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        ...,
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        ...,
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ 211.3750,  308.7500,  189.8750,  ...,  -98.9375,  270.0000,
         -163.6250],
        [ 211.3750,  308.7500,  189.8750,  ...,  -98.9375,  270.0000,
         -163.6250],
        [ 211.3750,  308.7500,  189.8750,  ...,  -98.9375,  270.0000,
         -163.6250],
        ...,
        [ 211.3750,  308.7500,  189.8750,  ...,  -98.9375,  270.0000,
         -163.6250],
        [ 211.3750,  308.7500,  189.8750,  ...,  -98.9375,  270.0000,
         -163.6250],
        [ 211.3750,  308.7500,  189.8750,  ...,  -98.9375,  270.0000,
         -163.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        ...,
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        ...,
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        ...,
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ 295.2500, -739.0000,  345.0000,  ..., -189.5000,  139.2500,
          450.5000],
        [ 295.2500, -739.0000,  345.0000,  ..., -189.5000,  139.2500,
          450.5000],
        [ 295.2500, -739.0000,  345.0000,  ..., -189.5000,  139.2500,
          450.5000],
        ...,
        [ 295.2500, -739.0000,  345.0000,  ..., -189.5000,  139.2500,
          450.5000],
        [ 295.2500, -739.0000,  345.0000,  ..., -189.5000,  139.2500,
          450.5000],
        [ 295.2500, -739.0000,  345.0000,  ..., -189.5000,  139.2500,
          450.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        ...,
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        ...,
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        ...,
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[-472.2500, -419.2500, -520.5000,  ...,  523.5000,   -1.0010,
         -217.3750],
        [-472.2500, -419.2500, -520.5000,  ...,  523.5000,   -1.0010,
         -217.3750],
        [-472.2500, -419.2500, -520.5000,  ...,  523.5000,   -1.0010,
         -217.3750],
        ...,
        [-472.2500, -419.2500, -520.5000,  ...,  523.5000,   -1.0010,
         -217.3750],
        [-472.2500, -419.2500, -520.5000,  ...,  523.5000,   -1.0010,
         -217.3750],
        [-472.2500, -419.2500, -520.5000,  ...,  523.5000,   -1.0010,
         -217.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        ...,
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        ...,
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        ...,
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ -272.7500,   389.5000, -1269.0000,  ...,    37.4688,   597.5000,
           199.8750],
        [ -272.7500,   389.5000, -1269.0000,  ...,    37.4688,   597.5000,
           199.8750],
        [ -272.7500,   389.5000, -1269.0000,  ...,    37.4688,   597.5000,
           199.8750],
        ...,
        [ -272.7500,   389.5000, -1269.0000,  ...,    37.4688,   597.5000,
           199.8750],
        [ -272.7500,   389.5000, -1269.0000,  ...,    37.4688,   597.5000,
           199.8750],
        [ -272.7500,   389.5000, -1269.0000,  ...,    37.4688,   597.5000,
           199.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        ...,
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        ...,
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        ...,
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[294.7500, 498.7500, -56.8750,  ...,  18.3750, 507.2500, -70.5625],
        [294.7500, 498.7500, -56.8750,  ...,  18.3750, 507.2500, -70.5625],
        [294.7500, 498.7500, -56.8750,  ...,  18.3750, 507.2500, -70.5625],
        ...,
        [294.7500, 498.7500, -56.8750,  ...,  18.3750, 507.2500, -70.5625],
        [294.7500, 498.7500, -56.8750,  ...,  18.3750, 507.2500, -70.5625],
        [294.7500, 498.7500, -56.8750,  ...,  18.3750, 507.2500, -70.5625]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        ...,
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        ...,
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        ...,
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[1232.0000, -576.0000, -918.0000,  ...,  356.7500, -140.5000,
         -388.5000],
        [1232.0000, -576.0000, -918.0000,  ...,  356.7500, -140.5000,
         -388.5000],
        [1232.0000, -576.0000, -918.0000,  ...,  356.7500, -140.5000,
         -388.5000],
        ...,
        [1232.0000, -576.0000, -918.0000,  ...,  356.7500, -140.5000,
         -388.5000],
        [1232.0000, -576.0000, -918.0000,  ...,  356.7500, -140.5000,
         -388.5000],
        [1232.0000, -576.0000, -918.0000,  ...,  356.7500, -140.5000,
         -388.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        ...,
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        ...,
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        ...,
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
tensor([[ -804.5000,  1885.0000, -1669.0000,  ...,    10.2344,  2452.0000,
         -1028.0000],
        [ -804.5000,  1885.0000, -1669.0000,  ...,    10.2344,  2452.0000,
         -1028.0000],
        [ -804.5000,  1885.0000, -1669.0000,  ...,    10.2344,  2452.0000,
         -1028.0000],
        ...,
        [ -804.5000,  1885.0000, -1669.0000,  ...,    10.2344,  2452.0000,
         -1028.0000],
        [ -804.5000,  1885.0000, -1669.0000,  ...,    10.2344,  2452.0000,
         -1028.0000],
        [ -804.5000,  1885.0000, -1669.0000,  ...,    10.2344,  2452.0000,
         -1028.0000]], device='cuda:0', dtype=torch.float16)
INFO 12-27 00:20:22 gpu_executor.py:122] # GPU blocks: 1514, # CPU blocks: 512
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.1951e-01, -4.0503e-01,  7.5781e-01,  ...,  2.1439e-03,
         -4.0674e-04, -1.9293e-03],
        [ 5.1666e-02, -1.4941e+00,  2.0488e+00,  ..., -2.4357e-03,
          1.2245e-03,  3.5057e-03],
        [ 3.2178e-01, -1.0527e+00,  2.0195e+00,  ...,  1.6525e-02,
          4.2229e-03,  5.9662e-03],
        ...,
        [ 2.3206e-01,  3.7500e-01,  3.7817e-01,  ...,  3.9887e-04,
         -5.8746e-03,  3.6073e-04],
        [ 2.8412e-02, -1.0469e+00,  1.6025e+00,  ...,  8.5526e-03,
          4.5586e-03,  4.0092e-03],
        [-3.0014e-02, -3.5962e-01,  1.0000e+00,  ...,  4.8828e-03,
         -1.0996e-03, -2.5177e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0284, -0.0320, -0.0141,  ...,  0.0173, -0.0050,  0.0165],
        [-0.0256, -0.0105, -0.0182,  ...,  0.0077, -0.0032,  0.0037],
        [-0.0214, -0.0024, -0.0021,  ...,  0.0124,  0.0047,  0.0092],
        ...,
        [-0.0006,  0.0061,  0.0067,  ..., -0.0003, -0.0088, -0.0027],
        [-0.0031,  0.0067,  0.0039,  ...,  0.0034, -0.0103, -0.0027],
        [-0.0007,  0.0074,  0.0069,  ...,  0.0059, -0.0036, -0.0002]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0145,  0.0560, -0.1092,  ...,  0.1914,  0.1015,  0.1075],
        [-0.0226,  0.0784, -0.0087,  ...,  0.2316,  0.2432,  0.1664],
        [-0.0851, -0.0636, -0.0917,  ...,  0.1350,  0.1632,  0.0279],
        ...,
        [-0.1562,  0.0676, -0.0693,  ...,  0.0732,  0.0191,  0.0828],
        [-0.1858, -0.0165, -0.0272,  ...,  0.1053,  0.0457,  0.1203],
        [-0.0927, -0.0140, -0.0891,  ...,  0.0233,  0.0310,  0.0359]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ -2.4902, 185.1250, -14.3828,  ..., -49.3750, -61.2812,  90.3125],
        [ 21.1875,  24.5312,  -1.9160,  ...,   0.5645,  -3.4102,  38.0000],
        [ 13.4375,  19.6875, -15.2344,  ...,  -2.5879,  13.2188,  -0.9043],
        ...,
        [ -2.1211,  -8.3281,  10.4922,  ...,   5.7070,  18.1875,  14.4688],
        [ 22.2656, -25.8750,   1.0693,  ..., -13.1719,  19.5938,   8.5000],
        [  8.4375, -14.6953,  -9.3828,  ...,  16.0625,   3.0215, -15.5625]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.2939e+00,  1.4648e-01,  7.1350e-02,  ..., -5.2681e-03,
          7.5722e-03, -8.2855e-03],
        [ 1.3643e+00,  1.7637e+00,  1.5459e+00,  ..., -4.6783e-02,
         -1.0017e-02, -8.6517e-03],
        [ 2.4258e+00,  7.7881e-02, -1.2781e-01,  ...,  3.7354e-02,
         -1.4977e-02,  1.6235e-02],
        ...,
        [-5.0977e-01, -4.0186e-01,  8.5059e-01,  ...,  2.8564e-02,
          1.0292e-02, -3.5915e-03],
        [-4.8096e-01,  6.0791e-01, -1.4656e-02,  ...,  1.4519e-02,
         -1.6678e-02, -3.7861e-03],
        [-6.5234e-01,  2.7939e-02,  8.0615e-01,  ...,  1.7223e-03,
          2.5578e-03, -1.7899e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0166,  0.0368,  0.0230,  ...,  0.0329,  0.0311, -0.0517],
        [-0.0132,  0.0291,  0.0303,  ...,  0.0134,  0.0171, -0.0330],
        [-0.0016, -0.0193,  0.0056,  ...,  0.0710, -0.0077, -0.0029],
        ...,
        [ 0.0170, -0.0236, -0.0247,  ..., -0.0013, -0.0158, -0.0039],
        [ 0.0225, -0.0049, -0.0469,  ...,  0.0206, -0.0144,  0.0350],
        [ 0.0211,  0.0024, -0.0195,  ...,  0.0140,  0.0003, -0.0018]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0966,  0.3008, -0.0351,  ..., -0.0699,  0.0653,  0.1385],
        [ 0.1669,  0.0302,  0.0153,  ...,  0.2413, -0.0843,  0.0166],
        [ 0.1194, -0.0004, -0.1865,  ..., -0.0698, -0.1765,  0.2688],
        ...,
        [-0.0577, -0.1326, -0.0608,  ...,  0.0442,  0.0318,  0.0540],
        [ 0.1592, -0.1055,  0.0561,  ...,  0.0279, -0.0004,  0.1226],
        [ 0.0919,  0.0093,  0.0450,  ...,  0.1299,  0.1898,  0.1001]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 3.2500e+02, -1.0600e+03, -5.4844e+00,  ...,  1.0981e+02,
         -2.4062e+02,  1.1069e+02],
        [-8.4717e-01,  4.6344e+01,  4.8469e+01,  ..., -8.4453e+00,
         -2.0734e+01,  1.3578e+01],
        [-1.3570e+01,  1.1362e+02,  5.2031e+01,  ...,  4.5812e+01,
         -1.8164e+00,  7.2750e+01],
        ...,
        [ 2.7875e+01,  6.1125e+01,  5.5781e+01,  ...,  1.9719e+01,
         -9.5000e+01, -7.7688e+01],
        [-4.3812e+01,  5.8438e+01, -1.0375e+01,  ...,  5.4844e+01,
         -6.8438e+01, -5.9750e+01],
        [-4.9781e+01,  4.3219e+01,  2.2984e+01,  ...,  2.1812e+01,
         -3.8562e+01,  6.4938e+01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
mixq 4 torch.isnan(torch.abs(torch.sum(inputs[0:1024])))
tensor(nan, device='cuda:0', dtype=torch.float16)
WARNING 12-27 00:28:45 config.py:322] mixq4bit quantization is not fully optimized yet. The speed can be slower than non-quantized models.
WARNING 12-27 00:28:45 config.py:392] To see benefits of async output processing, enable CUDA graph. Since, enforce-eager is enabled, async output processor cannot be used
INFO 12-27 00:28:45 llm_engine.py:226] Initializing an LLM engine (v0.6.1.dev238+ge2c6e0a82) with config: model='/home/dataset/mixqdata/quant4/Llama-2-7b', speculative_config=None, tokenizer='/home/dataset/mixqdata/quant4/Llama-2-7b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=True, dtype=torch.float16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=mixq4bit, enforce_eager=True, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=/home/dataset/mixqdata/quant4/Llama-2-7b, use_v2_block_manager=False, num_scheduler_steps=1, multi_step_stream_outputs=False, enable_prefix_caching=False, use_async_output_proc=False, use_cached_outputs=False, mm_processor_kwargs=None)
INFO 12-27 00:28:46 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 12-27 00:28:46 selector.py:116] Using XFormers backend.
INFO 12-27 00:28:47 model_runner.py:1014] Starting to load model /home/dataset/mixqdata/quant4/Llama-2-7b...
mix------weight
4
128
INFO 12-27 00:28:48 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 12-27 00:28:48 selector.py:116] Using XFormers backend.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:51 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:28:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
INFO 12-27 00:28:52 model_runner.py:1025] Loading model weights took 8.3436 GB
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        ...,
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        ...,
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        ...,
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        ...,
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119],
        [ 0.2048,  0.0944,  0.0955,  ...,  0.0174, -0.0090, -0.0119]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        ...,
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163],
        [-0.0083,  0.0127, -0.0196,  ..., -0.0059,  0.0015,  0.0163]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        ...,
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581],
        [ 0.1359,  0.1711, -0.0694,  ...,  0.0085, -0.0134,  0.0581]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        ...,
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166],
        [-1.0889,  0.3608, -0.1225,  ...,  0.0672,  0.0103, -0.0166]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        ...,
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086],
        [-0.0784,  0.0988, -0.1265,  ...,  0.0377,  0.0182,  0.0086]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        ...,
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414],
        [-0.0730,  0.0120,  0.1229,  ..., -0.0564, -0.0246,  0.1414]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        ...,
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670],
        [-1.1680,  0.5112, -0.0822,  ..., -0.0191,  0.1453, -0.0670]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        ...,
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162],
        [ 0.0989, -0.0959,  0.1315,  ..., -0.0018,  0.0600,  0.1162]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        ...,
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439],
        [ 0.0195,  0.1624, -0.2944,  ..., -0.1849,  0.0806,  0.0439]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        ...,
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930],
        [-0.1737, -0.2169,  0.0726,  ..., -0.1571,  0.0257,  0.0930]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        ...,
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724],
        [ 0.1852, -0.0225,  0.0106,  ..., -0.2362, -0.1566,  0.0724]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        ...,
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250],
        [-0.2135, -0.1873, -0.3018,  ..., -0.0435,  0.0301,  0.1250]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        ...,
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737],
        [ 0.0618,  1.0293, -0.3914,  ...,  0.1665,  0.1560,  0.0737]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        ...,
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207],
        [-0.1558, -0.1444, -0.3237,  ...,  0.2551,  0.2629,  0.0207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        ...,
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068],
        [-0.2542, -0.0660,  0.2047,  ...,  0.3718, -0.1215, -0.2068]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        ...,
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481],
        [-0.1838, -0.3904,  0.1284,  ...,  0.1117,  0.1249,  0.0481]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        ...,
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738],
        [-0.0466,  0.0354, -0.1737,  ...,  0.1562, -0.0341,  0.0738]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        ...,
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962],
        [-0.1091, -0.2216, -0.0229,  ...,  0.1791, -0.1211,  0.0962]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        ...,
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307],
        [ 0.4231,  0.1400, -0.3516,  ..., -0.0022, -0.0655, -0.1307]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        ...,
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873],
        [-0.3501, -0.4497,  0.0739,  ...,  0.7808,  0.0768, -0.1873]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        ...,
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567],
        [-0.0882, -0.3987, -0.2910,  ...,  0.1710, -0.1135,  0.1567]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        ...,
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333],
        [-0.2047, -0.0921,  0.2194,  ..., -0.0807, -0.2008,  0.0333]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        ...,
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679],
        [ 0.1733,  0.4856,  0.1026,  ...,  0.1532, -0.0237,  0.0679]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        ...,
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096],
        [-0.1471, -0.3325, -0.1107,  ...,  0.2366,  0.1937,  0.3096]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        ...,
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040],
        [-0.2886,  0.3091,  0.2135,  ...,  0.1538, -0.2140, -0.3040]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        ...,
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150],
        [-0.0939,  0.1174, -0.0094,  ...,  0.3213,  0.1780, -0.4150]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        ...,
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908],
        [-0.3491, -0.1157,  0.0520,  ..., -0.5801, -0.0719, -0.0908]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        ...,
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224],
        [-0.5410, -0.3750, -0.0534,  ..., -0.2269,  0.1841,  0.0224]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        ...,
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216],
        [-0.0894,  0.1041,  0.1770,  ..., -0.2664,  0.1454, -0.2216]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        ...,
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687],
        [-0.5786, -0.4011,  0.1757,  ..., -0.0583,  0.3479,  0.1687]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        ...,
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760],
        [-0.0077,  0.1670, -0.4761,  ..., -0.0931,  0.1334, -0.3760]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        ...,
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014],
        [ 0.3848, -0.2512, -0.0920,  ...,  0.1962, -0.3018,  0.2014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        ...,
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722],
        [-0.1119, -0.2399, -0.4531,  ..., -0.0098, -0.0994,  0.2722]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        ...,
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270],
        [-0.4517, -0.2079,  0.1664,  ...,  0.2180, -0.0972,  0.1270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        ...,
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750],
        [-0.0999,  0.1309,  0.2205,  ..., -0.0049,  0.3274, -0.0750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        ...,
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423],
        [-0.2444, -0.0137, -0.1917,  ...,  0.5366, -0.1147, -0.0423]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        ...,
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158],
        [-1.2656,  0.7256, -0.6836,  ...,  0.0889,  0.1272,  0.4158]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        ...,
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794],
        [ 0.2710,  0.0861,  0.5020,  ...,  0.2242, -0.1162, -0.3794]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        ...,
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395],
        [ 0.2164,  0.0943,  0.1301,  ..., -0.0732, -0.2340, -0.1395]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        ...,
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02],
        [ 5.5566e-01,  1.6606e-04,  1.5820e-01,  ..., -3.8696e-01,
          6.6260e-01,  3.7903e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        ...,
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084],
        [ 0.1738,  0.1854,  0.2673,  ...,  0.0595,  0.2238, -0.1084]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        ...,
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976],
        [ 0.1410, -0.2086, -0.0538,  ...,  0.0184,  0.1874, -0.1976]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        ...,
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644],
        [-0.1259, -0.4465, -0.0298,  ..., -0.5967,  0.0625, -0.1644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        ...,
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951],
        [-0.0849,  0.6421,  0.1203,  ...,  0.0189, -0.1100, -0.1951]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        ...,
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983],
        [-0.1326, -0.2013, -0.3762,  ...,  0.4807, -0.2820,  0.0983]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        ...,
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649],
        [ 0.1815,  0.6753,  0.0439,  ...,  0.3667, -0.1865,  0.2649]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        ...,
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064],
        [-0.5942,  0.0866, -0.5767,  ..., -0.2260,  0.6328,  0.0064]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        ...,
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237],
        [ 0.3921,  0.1686, -0.0949,  ...,  0.4517, -0.2932,  0.0237]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        ...,
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177],
        [ 0.2629, -0.3938, -0.1331,  ..., -0.0554,  0.5156, -0.0177]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        ...,
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668],
        [-0.2883, -0.5464, -0.1775,  ...,  0.1653,  0.0983, -0.4668]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        ...,
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884],
        [ 0.1165, -0.2351, -0.1940,  ..., -0.5361, -0.3027,  0.1884]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        ...,
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112],
        [-0.2932,  0.7715,  0.6577,  ...,  0.3545, -0.5098, -0.5112]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        ...,
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972],
        [ 0.3674,  0.0243, -0.2566,  ..., -0.0074, -0.5308, -0.0972]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        ...,
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593],
        [-0.3542,  0.3738,  0.1661,  ...,  0.4460,  0.0131,  0.2593]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        ...,
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514],
        [ 0.9902, -0.1090,  0.8979,  ..., -0.0523, -0.5024,  1.1514]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        ...,
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187],
        [ 0.0247, -0.6377,  0.7949,  ...,  0.1207, -0.3223, -0.4187]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        ...,
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198],
        [ 3.4844, -0.2737,  0.0450,  ...,  0.9395,  0.5801,  0.8198]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        ...,
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642],
        [-0.2485, -0.0212,  0.6504,  ..., -0.3340,  0.4690, -0.2642]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        ...,
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240],
        [-0.3000, -0.2081, -0.7915,  ...,  0.2080,  1.3799,  0.2240]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        ...,
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610],
        [ 0.1973, -0.1443, -0.7046,  ..., -0.1783, -0.2162,  0.5610]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        ...,
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288],
        [-0.5986, -0.0015, -0.3303,  ..., -0.3037,  0.1854,  0.0288]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        ...,
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785],
        [ 0.1647, -0.7500, -0.5303,  ..., -0.8862, -0.3315,  0.1785]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        ...,
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537],
        [ 0.1681, -0.7837,  0.3896,  ...,  0.6465, -0.8242,  0.5537]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        ...,
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848],
        [ 0.1077, -0.2961,  1.3193,  ...,  0.0607, -1.3750, -0.0848]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        ...,
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056],
        [ 0.3140,  1.1436,  0.6626,  ...,  0.0147,  1.1377, -0.7056]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        ...,
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652],
        [-0.2410, -0.1609, -0.4873,  ...,  0.2231, -0.7700,  0.1652]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        ...,
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348],
        [ 0.1799,  0.4939,  0.8794,  ..., -0.2371, -0.3774,  0.6348]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        ...,
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704],
        [-0.7344,  0.1842,  0.2350,  ..., -0.1927,  0.1737, -0.1704]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        ...,
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926],
        [-0.5806,  0.7344, -0.4766,  ..., -0.0703,  0.1385, -0.3926]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        ...,
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571],
        [-0.1331, -0.3691,  0.2024,  ...,  0.3735,  0.0927, -0.1571]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        ...,
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438],
        [ 0.3213,  1.1748,  1.1104,  ...,  0.9385, -0.5820, -0.8438]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        ...,
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958],
        [ 0.2114, -0.2252,  0.0516,  ..., -0.1146,  0.3872, -0.1958]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        ...,
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688],
        [ 0.3411, -0.2717, -0.1171,  ..., -0.6284,  0.1362, -0.5688]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        ...,
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270],
        [-0.4399,  0.0141,  0.7158,  ...,  0.8286, -0.0630, -0.4270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        ...,
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040],
        [-0.9561, -0.6279, -0.3774,  ...,  0.7222,  0.4377,  0.2040]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        ...,
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299],
        [ 1.2324, -0.4021,  0.5996,  ...,  0.4189, -0.2922, -0.2299]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        ...,
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947],
        [ 0.0730, -1.8086, -0.6489,  ..., -1.2568,  1.2520,  1.5947]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        ...,
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377],
        [-0.3005, -0.1265,  0.1057,  ..., -0.4106,  0.2299, -0.6377]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        ...,
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402],
        [-0.3218,  0.4709, -0.1271,  ...,  0.4097, -0.3862, -0.7402]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        ...,
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751],
        [-0.3848,  0.9033, -1.1436,  ..., -0.3174,  0.3806,  0.9751]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        ...,
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660],
        [ 0.5376,  0.3772, -0.0574,  ...,  0.1842, -1.1465, -0.0660]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        ...,
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207],
        [-0.4233,  0.3193,  0.0141,  ..., -1.1533,  1.0684, -0.4207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        ...,
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747],
        [ 0.2250,  1.9268,  0.2593,  ..., -0.4834, -1.1211,  0.2747]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        ...,
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644],
        [-0.0286,  0.6719, -0.6646,  ...,  0.5586, -0.2432, -0.1644]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        ...,
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292],
        [ 0.2878, -0.4167, -0.5479,  ...,  0.3279, -0.0551, -0.0292]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        ...,
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332],
        [ 0.3022,  1.0010, -0.0123,  ..., -0.1260,  1.8633, -1.0332]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        ...,
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171],
        [-0.2181, -0.0498, -0.5962,  ..., -0.7622, -0.4788, -0.1171]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        ...,
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841],
        [-0.1774,  0.1868, -0.9263,  ..., -0.6304, -0.3672,  0.4841]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        ...,
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356],
        [-0.3215,  0.7056,  0.4849,  ...,  1.2061,  0.5425,  0.1356]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        ...,
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503],
        [-0.6963, -0.8364, -0.8716,  ...,  0.3000, -0.3142, -0.5503]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        ...,
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083],
        [-1.4971,  0.2695,  0.0933,  ...,  0.4451,  0.1220, -0.0083]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        ...,
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958],
        [ 0.3096, -0.2612,  0.4546,  ..., -1.2119,  0.3701,  0.6958]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        ...,
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835],
        [-0.2798, -0.9600,  0.0440,  ..., -0.4302, -2.7539, -0.0835]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
True
INFO 12-27 00:28:53 gpu_executor.py:122] # GPU blocks: 1514, # CPU blocks: 512
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.1951e-01, -4.0503e-01,  7.5781e-01,  ...,  2.1439e-03,
         -4.0674e-04, -1.9293e-03],
        [ 5.1666e-02, -1.4941e+00,  2.0488e+00,  ..., -2.4357e-03,
          1.2245e-03,  3.5057e-03],
        [ 3.2178e-01, -1.0527e+00,  2.0195e+00,  ...,  1.6525e-02,
          4.2229e-03,  5.9662e-03],
        ...,
        [ 2.3206e-01,  3.7500e-01,  3.7817e-01,  ...,  3.9887e-04,
         -5.8746e-03,  3.6073e-04],
        [ 2.8412e-02, -1.0469e+00,  1.6025e+00,  ...,  8.5526e-03,
          4.5586e-03,  4.0092e-03],
        [-3.0014e-02, -3.5962e-01,  1.0000e+00,  ...,  4.8828e-03,
         -1.0996e-03, -2.5177e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0284, -0.0320, -0.0141,  ...,  0.0173, -0.0050,  0.0165],
        [-0.0256, -0.0105, -0.0182,  ...,  0.0077, -0.0032,  0.0037],
        [-0.0214, -0.0024, -0.0021,  ...,  0.0124,  0.0047,  0.0092],
        ...,
        [-0.0006,  0.0061,  0.0067,  ..., -0.0003, -0.0088, -0.0027],
        [-0.0031,  0.0067,  0.0039,  ...,  0.0034, -0.0103, -0.0027],
        [-0.0007,  0.0074,  0.0069,  ...,  0.0059, -0.0036, -0.0002]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0145,  0.0560, -0.1092,  ...,  0.1914,  0.1015,  0.1075],
        [-0.0226,  0.0784, -0.0087,  ...,  0.2316,  0.2432,  0.1664],
        [-0.0851, -0.0636, -0.0917,  ...,  0.1350,  0.1632,  0.0279],
        ...,
        [-0.1562,  0.0676, -0.0693,  ...,  0.0732,  0.0191,  0.0828],
        [-0.1858, -0.0165, -0.0272,  ...,  0.1053,  0.0457,  0.1203],
        [-0.0927, -0.0140, -0.0891,  ...,  0.0233,  0.0310,  0.0359]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
True
tensor([[ -2.4902, 185.1250, -14.3828,  ..., -49.3750, -61.2812,  90.3125],
        [ 21.1875,  24.5312,  -1.9160,  ...,   0.5645,  -3.4102,  38.0000],
        [ 13.4375,  19.6875, -15.2344,  ...,  -2.5879,  13.2188,  -0.9043],
        ...,
        [ -2.1211,  -8.3281,  10.4922,  ...,   5.7070,  18.1875,  14.4688],
        [ 22.2656, -25.8750,   1.0693,  ..., -13.1719,  19.5938,   8.5000],
        [  8.4375, -14.6953,  -9.3828,  ...,  16.0625,   3.0215, -15.5625]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.2939e+00,  1.4648e-01,  7.1350e-02,  ..., -5.2681e-03,
          7.5722e-03, -8.2855e-03],
        [ 1.3643e+00,  1.7637e+00,  1.5459e+00,  ..., -4.6783e-02,
         -1.0017e-02, -8.6517e-03],
        [ 2.4258e+00,  7.7881e-02, -1.2781e-01,  ...,  3.7354e-02,
         -1.4977e-02,  1.6235e-02],
        ...,
        [-5.0977e-01, -4.0186e-01,  8.5059e-01,  ...,  2.8564e-02,
          1.0292e-02, -3.5915e-03],
        [-4.8096e-01,  6.0791e-01, -1.4656e-02,  ...,  1.4519e-02,
         -1.6678e-02, -3.7861e-03],
        [-6.5234e-01,  2.7939e-02,  8.0615e-01,  ...,  1.7223e-03,
          2.5578e-03, -1.7899e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0166,  0.0368,  0.0230,  ...,  0.0329,  0.0311, -0.0517],
        [-0.0132,  0.0291,  0.0303,  ...,  0.0134,  0.0171, -0.0330],
        [-0.0016, -0.0193,  0.0056,  ...,  0.0710, -0.0077, -0.0029],
        ...,
        [ 0.0170, -0.0236, -0.0247,  ..., -0.0013, -0.0158, -0.0039],
        [ 0.0225, -0.0049, -0.0469,  ...,  0.0206, -0.0144,  0.0350],
        [ 0.0211,  0.0024, -0.0195,  ...,  0.0140,  0.0003, -0.0018]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0966,  0.3008, -0.0351,  ..., -0.0699,  0.0653,  0.1385],
        [ 0.1669,  0.0302,  0.0153,  ...,  0.2413, -0.0843,  0.0166],
        [ 0.1194, -0.0004, -0.1865,  ..., -0.0698, -0.1765,  0.2688],
        ...,
        [-0.0577, -0.1326, -0.0608,  ...,  0.0442,  0.0318,  0.0540],
        [ 0.1592, -0.1055,  0.0561,  ...,  0.0279, -0.0004,  0.1226],
        [ 0.0919,  0.0093,  0.0450,  ...,  0.1299,  0.1898,  0.1001]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
True
tensor([[ 3.2500e+02, -1.0600e+03, -5.4844e+00,  ...,  1.0981e+02,
         -2.4062e+02,  1.1069e+02],
        [-8.4717e-01,  4.6344e+01,  4.8469e+01,  ..., -8.4453e+00,
         -2.0734e+01,  1.3578e+01],
        [-1.3570e+01,  1.1362e+02,  5.2031e+01,  ...,  4.5812e+01,
         -1.8164e+00,  7.2750e+01],
        ...,
        [ 2.7875e+01,  6.1125e+01,  5.5781e+01,  ...,  1.9719e+01,
         -9.5000e+01, -7.7688e+01],
        [-4.3812e+01,  5.8438e+01, -1.0375e+01,  ...,  5.4844e+01,
         -6.8438e+01, -5.9750e+01],
        [-4.9781e+01,  4.3219e+01,  2.2984e+01,  ...,  2.1812e+01,
         -3.8562e+01,  6.4938e+01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
mixq 4 torch.isnan(torch.abs(torch.sum(inputs[0:1024])))
tensor(nan, device='cuda:0', dtype=torch.float16)
WARNING 12-27 00:30:46 config.py:322] mixq4bit quantization is not fully optimized yet. The speed can be slower than non-quantized models.
WARNING 12-27 00:30:46 config.py:392] To see benefits of async output processing, enable CUDA graph. Since, enforce-eager is enabled, async output processor cannot be used
INFO 12-27 00:30:46 llm_engine.py:226] Initializing an LLM engine (v0.6.1.dev238+ge2c6e0a82) with config: model='/home/dataset/mixqdata/quant4/Llama-2-7b', speculative_config=None, tokenizer='/home/dataset/mixqdata/quant4/Llama-2-7b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=True, dtype=torch.float16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=mixq4bit, enforce_eager=True, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=/home/dataset/mixqdata/quant4/Llama-2-7b, use_v2_block_manager=False, num_scheduler_steps=1, multi_step_stream_outputs=False, enable_prefix_caching=False, use_async_output_proc=False, use_cached_outputs=False, mm_processor_kwargs=None)
INFO 12-27 00:30:47 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 12-27 00:30:47 selector.py:116] Using XFormers backend.
INFO 12-27 00:30:48 model_runner.py:1014] Starting to load model /home/dataset/mixqdata/quant4/Llama-2-7b...
mix------weight
4
128
INFO 12-27 00:30:48 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 12-27 00:30:48 selector.py:116] Using XFormers backend.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:52 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:30:53 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
INFO 12-27 00:30:53 model_runner.py:1025] Loading model weights took 8.3436 GB
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        ...,
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        ...,
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        ...,
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        ...,
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        ...,
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        ...,
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        ...,
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        ...,
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        ...,
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        ...,
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        ...,
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        ...,
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        ...,
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        ...,
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        ...,
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        ...,
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        ...,
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        ...,
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        ...,
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        ...,
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        ...,
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        ...,
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        ...,
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        ...,
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        ...,
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        ...,
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        ...,
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        ...,
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        ...,
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        ...,
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        ...,
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        ...,
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        ...,
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        ...,
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        ...,
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        ...,
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        ...,
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        ...,
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        ...,
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        ...,
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        ...,
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        ...,
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        ...,
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        ...,
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        ...,
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        ...,
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        ...,
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        ...,
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        ...,
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        ...,
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        ...,
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        ...,
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        ...,
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        ...,
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        ...,
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        ...,
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        ...,
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        ...,
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        ...,
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        ...,
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        ...,
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        ...,
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        ...,
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        ...,
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        ...,
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        ...,
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        ...,
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        ...,
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        ...,
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        ...,
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        ...,
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        ...,
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        ...,
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        ...,
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        ...,
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        ...,
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        ...,
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        ...,
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        ...,
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        ...,
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        ...,
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        ...,
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        ...,
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        ...,
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        ...,
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        ...,
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        ...,
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        ...,
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        ...,
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        ...,
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        ...,
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        ...,
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        ...,
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        ...,
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        ...,
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        ...,
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
self.weight_only
INFO 12-27 00:30:54 gpu_executor.py:122] # GPU blocks: 1514, # CPU blocks: 512
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.1951e-01, -4.0503e-01,  7.5781e-01,  ...,  2.1439e-03,
         -4.0674e-04, -1.9293e-03],
        [ 5.1666e-02, -1.4941e+00,  2.0488e+00,  ..., -2.4357e-03,
          1.2245e-03,  3.5057e-03],
        [ 3.2178e-01, -1.0527e+00,  2.0195e+00,  ...,  1.6525e-02,
          4.2229e-03,  5.9662e-03],
        ...,
        [ 2.3206e-01,  3.7500e-01,  3.7817e-01,  ...,  3.9887e-04,
         -5.8746e-03,  3.6073e-04],
        [ 2.8412e-02, -1.0469e+00,  1.6025e+00,  ...,  8.5526e-03,
          4.5586e-03,  4.0092e-03],
        [-3.0014e-02, -3.5962e-01,  1.0000e+00,  ...,  4.8828e-03,
         -1.0996e-03, -2.5177e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0284, -0.0320, -0.0141,  ...,  0.0173, -0.0050,  0.0165],
        [-0.0256, -0.0105, -0.0182,  ...,  0.0077, -0.0032,  0.0037],
        [-0.0214, -0.0024, -0.0021,  ...,  0.0124,  0.0047,  0.0092],
        ...,
        [-0.0006,  0.0061,  0.0067,  ..., -0.0003, -0.0088, -0.0027],
        [-0.0031,  0.0067,  0.0039,  ...,  0.0034, -0.0103, -0.0027],
        [-0.0007,  0.0074,  0.0069,  ...,  0.0059, -0.0036, -0.0002]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0145,  0.0560, -0.1092,  ...,  0.1914,  0.1015,  0.1075],
        [-0.0226,  0.0784, -0.0087,  ...,  0.2316,  0.2432,  0.1664],
        [-0.0851, -0.0636, -0.0917,  ...,  0.1350,  0.1632,  0.0279],
        ...,
        [-0.1562,  0.0676, -0.0693,  ...,  0.0732,  0.0191,  0.0828],
        [-0.1858, -0.0165, -0.0272,  ...,  0.1053,  0.0457,  0.1203],
        [-0.0927, -0.0140, -0.0891,  ...,  0.0233,  0.0310,  0.0359]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 2.4624e-03,  9.1003e-02, -1.5266e-02,  ..., -2.8046e-02,
         -2.5543e-02,  4.5319e-02],
        [ 1.6785e-02,  1.0498e-02,  4.0030e-04,  ...,  4.3755e-03,
         -6.1264e-03,  1.7273e-02],
        [ 7.2136e-03,  7.5417e-03, -3.2387e-03,  ..., -2.6817e-03,
          7.1259e-03,  9.2387e-06],
        ...,
        [-1.9569e-03, -3.9444e-03,  5.5695e-03,  ...,  2.2583e-03,
          8.6899e-03,  7.2136e-03],
        [ 1.3649e-02, -1.4229e-02,  1.4210e-03,  ..., -5.7487e-03,
          1.0544e-02,  2.8934e-03],
        [ 4.7951e-03, -7.1030e-03, -4.7646e-03,  ...,  7.9727e-03,
          4.2939e-04, -8.5068e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.3359e+00,  1.0176e+00,  7.1973e-01,  ..., -1.4442e-02,
          1.3733e-02, -2.1470e-04],
        [ 3.0591e-01,  2.2871e+00,  1.4824e+00,  ..., -2.8702e-02,
         -1.4748e-02,  3.4027e-02],
        [ 2.6025e-01,  1.0000e+00,  7.6807e-01,  ...,  2.1606e-02,
         -5.1498e-03, -1.3641e-02],
        ...,
        [-2.3889e-01,  1.7929e-02,  6.6650e-01,  ...,  9.3889e-04,
         -7.1526e-04, -8.3389e-03],
        [-2.1582e-01,  8.1006e-01,  1.1511e-01,  ..., -2.2507e-03,
         -7.9117e-03, -4.6515e-04],
        [-9.6512e-03,  4.9561e-01,  3.1274e-01,  ..., -6.4163e-03,
          9.5224e-04, -5.0812e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 1.4008e-02, -9.4299e-03,  1.0490e-03,  ...,  1.1398e-02,
          1.0185e-02,  2.0599e-02],
        [ 2.3102e-02, -2.2373e-03,  6.4125e-03,  ...,  1.3916e-02,
          1.2512e-02,  2.7084e-02],
        [ 1.7807e-02, -1.6052e-02,  3.1891e-02,  ...,  8.7357e-03,
         -6.5279e-04,  3.5156e-02],
        ...,
        [-6.0806e-03,  5.9509e-03,  2.7585e-04,  ..., -2.7122e-03,
         -3.6850e-03, -8.3008e-03],
        [ 4.6234e-03,  1.8539e-02, -1.3260e-02,  ...,  3.4428e-03,
          9.9869e-03,  7.7095e-03],
        [-1.7414e-03,  1.2505e-02, -4.9973e-03,  ...,  9.9480e-05,
          1.2169e-02, -3.4046e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.1820,  0.3257, -0.1897,  ..., -0.0670,  0.0219,  0.2330],
        [ 0.0851,  0.1873, -0.1888,  ...,  0.0919, -0.0379,  0.1693],
        [ 0.0853, -0.1433, -0.1521,  ..., -0.0150,  0.0587,  0.2114],
        ...,
        [-0.1230, -0.1566,  0.0282,  ..., -0.1220,  0.1039,  0.1084],
        [-0.0553, -0.0436, -0.0157,  ..., -0.0064,  0.0663,  0.0525],
        [-0.1032, -0.1134, -0.0592,  ...,  0.0571,  0.1025,  0.0978]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 1.8042e-01, -5.7031e-01,  1.1511e-01,  ...,  3.3417e-02,
         -3.0609e-02,  1.5144e-02],
        [-4.0054e-05,  2.9602e-02,  1.7334e-02,  ..., -9.9945e-04,
         -6.7711e-03, -1.0010e-02],
        [-2.9316e-03, -9.5062e-03, -2.8870e-02,  ..., -6.5956e-03,
         -1.1627e-02, -2.2675e-02],
        ...,
        [ 1.5327e-02,  1.7481e-03,  2.0370e-02,  ..., -1.6663e-02,
          2.5513e-02, -1.4114e-03],
        [ 3.0499e-03, -8.9645e-03, -8.3542e-03,  ...,  1.6489e-03,
          3.1281e-03,  7.7934e-03],
        [ 2.6505e-02,  1.4420e-02,  1.3180e-03,  ..., -7.2441e-03,
         -1.0963e-02, -5.1613e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-2.0386e-01,  7.3425e-02,  6.2347e-02,  ...,  1.7258e-02,
         -3.4084e-03, -8.4877e-04],
        [ 9.0430e-01, -6.8994e-01,  1.3477e+00,  ..., -2.5977e-01,
         -8.5083e-02, -5.5450e-02],
        [ 2.4158e-01, -1.0864e-01,  3.9111e-01,  ...,  8.8074e-02,
          3.1982e-02,  1.1273e-01],
        ...,
        [ 1.3447e+00, -9.3079e-02,  7.2441e-03,  ...,  1.6345e-01,
         -2.4841e-01,  1.0901e-01],
        [ 1.2695e+00, -7.3584e-01,  2.8564e-01,  ..., -1.6602e-01,
          4.4739e-02,  6.9641e-02],
        [ 1.5957e+00, -1.7595e-03, -1.0272e-01,  ..., -4.1943e-01,
         -2.3523e-01, -2.9663e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 2.0962e-03,  5.2223e-03, -2.1133e-03,  ...,  3.3092e-03,
         -6.7592e-05,  1.0986e-02],
        [ 1.3084e-02,  1.1726e-02,  6.4545e-03,  ...,  1.7071e-03,
         -3.9520e-03, -3.9101e-03],
        [-2.4738e-03,  2.6321e-02,  1.9951e-03,  ...,  2.4948e-03,
         -1.2100e-02, -1.6144e-02],
        ...,
        [-2.9510e-02, -2.8336e-02, -2.5818e-02,  ..., -5.0476e-02,
         -9.6130e-03, -7.3662e-03],
        [-1.5488e-02,  1.5114e-02, -6.5088e-05,  ...,  2.2842e-02,
          1.9550e-03,  7.5493e-03],
        [ 3.1261e-03,  4.5052e-03,  1.7700e-02,  ..., -1.2383e-02,
          2.1820e-03,  1.5869e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0338, -0.0333, -0.0222,  ...,  0.0128, -0.0073, -0.0022],
        [ 0.1249, -0.0087,  0.0320,  ...,  0.0128,  0.0928,  0.1100],
        [-0.0049,  0.4146, -0.1455,  ..., -0.1056, -0.1395, -0.2040],
        ...,
        [ 0.1814,  0.3003, -0.2382,  ...,  0.1729, -0.0589, -0.0056],
        [-0.0614, -0.0291, -0.0236,  ...,  0.0994,  0.0707,  0.1932],
        [ 0.2620, -0.2460, -0.1456,  ...,  0.1033, -0.0194, -0.0625]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0328, -0.0394,  0.0388,  ..., -0.0291,  0.0150,  0.0311],
        [ 0.0123,  0.0247,  0.0223,  ..., -0.0078,  0.0051, -0.0170],
        [-0.0165,  0.0102, -0.0417,  ..., -0.0227,  0.0009, -0.0035],
        ...,
        [-0.0153, -0.0290, -0.0125,  ...,  0.0005,  0.0364, -0.0061],
        [-0.0174, -0.0003, -0.0056,  ..., -0.0217, -0.0108,  0.0006],
        [-0.0083,  0.0252,  0.0340,  ..., -0.0559, -0.0407, -0.0802]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0768, -0.0188,  0.0173,  ..., -0.0049,  0.0022,  0.0052],
        [ 0.2197,  0.2786,  0.1158,  ...,  0.1091, -0.2238, -0.0519],
        [ 0.2979,  0.7573,  0.5757,  ...,  0.2561, -0.0241,  0.0338],
        ...,
        [ 0.4258,  0.3657,  0.4648,  ...,  0.0797,  0.0873, -0.0378],
        [ 0.4165,  0.5615, -0.5830,  ...,  0.1243, -0.0356, -0.0920],
        [-0.3879,  0.5010, -0.5298,  ...,  0.0187, -0.0201,  0.0172]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0176, -0.0135, -0.0017,  ..., -0.0107,  0.0089,  0.0057],
        [-0.0266, -0.0061, -0.0029,  ..., -0.0262,  0.0255, -0.0022],
        [ 0.0156, -0.0028, -0.0175,  ...,  0.0179,  0.0144,  0.0043],
        ...,
        [-0.0049, -0.0070, -0.0184,  ...,  0.0146, -0.0017,  0.0065],
        [ 0.0063,  0.0049, -0.0683,  ...,  0.0450,  0.0283,  0.0242],
        [-0.0067,  0.0177, -0.0194,  ...,  0.0276,  0.0190,  0.0051]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0300,  0.0183, -0.1058,  ..., -0.0597,  0.2930,  0.0452],
        [-0.0044, -0.0560, -0.0667,  ..., -0.1115,  0.4475,  0.0279],
        [-0.1450,  0.1544, -0.3411,  ...,  0.0405,  0.3914, -0.0152],
        ...,
        [-0.2229, -0.1760,  0.0298,  ..., -0.1455,  0.2659, -0.0725],
        [-0.3596, -0.1608,  0.1333,  ..., -0.2419, -0.1797,  0.0086],
        [-0.1952,  0.0084, -0.2006,  ..., -0.1626,  0.0139,  0.0926]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.0068, -0.0240,  0.0025,  ...,  0.0038,  0.0094,  0.0162],
        [ 0.0184,  0.0788,  0.0066,  ...,  0.0171,  0.0297,  0.0620],
        [-0.0375,  0.0033,  0.0235,  ...,  0.0002, -0.0403,  0.0411],
        ...,
        [ 0.0291, -0.0111, -0.0311,  ..., -0.0025, -0.0253,  0.0040],
        [ 0.0412, -0.0041, -0.0141,  ...,  0.0162,  0.0190,  0.0197],
        [ 0.0799, -0.0369, -0.0671,  ..., -0.0374,  0.0384,  0.0275]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.2080,  0.1624, -0.0223,  ...,  0.0076, -0.0040, -0.0095],
        [ 0.3069, -1.6826, -0.6572,  ..., -0.5664, -0.2917, -0.2212],
        [-0.4675, -0.9604,  0.0592,  ..., -0.0163, -0.5713,  0.0256],
        ...,
        [ 0.3074, -0.6753,  0.4487,  ...,  0.2737, -0.0599, -0.0734],
        [ 0.3728,  0.1973, -1.2354,  ...,  0.2325, -0.0833,  0.1589],
        [ 0.4143,  0.5449,  0.1179,  ...,  0.1090,  0.2610, -0.0986]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0016, -0.0056,  0.0221,  ...,  0.0108,  0.0036, -0.0110],
        [-0.0128, -0.0102,  0.0093,  ...,  0.0013,  0.0075, -0.0139],
        [ 0.0106, -0.0289, -0.0167,  ..., -0.0112,  0.0278, -0.0195],
        ...,
        [-0.0328,  0.0383, -0.0574,  ..., -0.0059, -0.0412, -0.0798],
        [-0.0002,  0.0106, -0.0407,  ...,  0.0035, -0.0114, -0.0645],
        [ 0.0002,  0.0007, -0.0098,  ..., -0.0096,  0.0006, -0.0146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0820, -0.0894, -0.0104,  ..., -0.1830,  0.1893, -0.0624],
        [ 0.1508,  0.1434, -0.0383,  ...,  0.0495,  0.0579, -0.3867],
        [ 0.1321, -0.2986,  0.0045,  ...,  0.1134,  0.0626, -0.3296],
        ...,
        [ 0.0475,  0.0246, -0.3015,  ...,  0.0238,  0.1290, -0.2739],
        [-0.2174, -0.4397, -0.4404,  ..., -0.2222,  0.3435, -0.2744],
        [-0.1527, -0.1727, -0.2111,  ...,  0.0189,  0.2788, -0.3674]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.1400, -0.1406, -0.1149,  ..., -0.0709,  0.0778, -0.2372],
        [-0.0218,  0.1122, -0.0232,  ..., -0.0117,  0.0625, -0.0584],
        [-0.0339,  0.0154, -0.0287,  ..., -0.0182, -0.0125,  0.0604],
        ...,
        [ 0.0192,  0.0067,  0.0551,  ..., -0.0214,  0.0402, -0.0229],
        [-0.0158,  0.0065, -0.0352,  ...,  0.0113,  0.0075, -0.0122],
        [-0.0240,  0.0031,  0.0152,  ...,  0.1107, -0.0463, -0.0240]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 5.6458e-02, -1.3293e-01,  1.4001e-01,  ...,  1.2188e-03,
         -4.1771e-03,  2.9278e-04],
        [ 2.7563e-01,  1.1055e+00, -4.6582e-01,  ...,  1.1108e-01,
          2.8662e-01, -2.4316e-01],
        [ 4.4067e-02,  8.2471e-01, -3.1982e-01,  ..., -1.1426e-01,
         -6.2622e-02,  7.6256e-03],
        ...,
        [ 8.9172e-02,  8.5107e-01, -4.0601e-01,  ..., -1.4978e-01,
         -1.8848e-01,  2.4707e-01],
        [ 5.7812e-01, -3.1836e-01, -2.1204e-01,  ...,  9.1248e-02,
         -2.7344e-02,  5.2277e-02],
        [ 5.0439e-01,  5.9619e-01, -2.9370e-01,  ...,  6.4941e-02,
          1.8225e-01,  1.5881e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0007,  0.0114,  0.0526,  ...,  0.0181, -0.0123, -0.0158],
        [-0.0242,  0.0505, -0.0352,  ..., -0.0161, -0.0433, -0.0837],
        [-0.0161,  0.0453,  0.0521,  ...,  0.0242, -0.0028, -0.1100],
        ...,
        [ 0.0895, -0.0840,  0.0076,  ..., -0.0619, -0.0494, -0.0055],
        [ 0.0030, -0.0844,  0.0159,  ..., -0.0358,  0.0398, -0.0292],
        [ 0.0367, -0.0926,  0.0094,  ...,  0.0495,  0.0274,  0.0051]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0543, -0.1142, -0.0817,  ...,  0.0432, -0.0547, -0.1293],
        [ 0.1995,  0.1591, -0.4097,  ...,  0.3245, -0.0294,  0.0897],
        [ 0.1425,  0.2247, -0.1732,  ..., -0.0325, -0.1130,  0.1477],
        ...,
        [-0.4033, -0.0853, -0.2263,  ..., -0.1177, -0.0314, -0.1991],
        [-0.0576,  0.1798, -0.1476,  ..., -0.0872, -0.4788,  0.0807],
        [-0.2988, -0.1304, -0.2576,  ...,  0.1340, -0.1572,  0.2419]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.0128, -0.0106, -0.0137,  ..., -0.0223,  0.0172, -0.0039],
        [ 0.0133,  0.1547, -0.0446,  ...,  0.0799, -0.1298,  0.0500],
        [-0.0244,  0.0052, -0.0914,  ..., -0.0344,  0.0191, -0.0193],
        ...,
        [-0.0683,  0.0493,  0.0129,  ..., -0.1147, -0.0633,  0.0135],
        [ 0.0307,  0.0029, -0.0250,  ...,  0.0089, -0.0206, -0.1127],
        [ 0.0024,  0.0493, -0.0584,  ..., -0.0594,  0.0049,  0.0459]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0903, -0.1174,  0.0690,  ...,  0.0089, -0.0026, -0.0094],
        [-0.2179,  1.1357, -0.7671,  ...,  0.9155, -0.4658, -0.0622],
        [-0.2386,  0.3284, -1.0674,  ...,  0.7729,  0.3767, -0.0566],
        ...,
        [ 0.8784, -0.4453,  0.2200,  ...,  0.1104,  0.1234,  0.5464],
        [ 0.5684, -0.1959, -0.0058,  ..., -0.0040,  0.5024,  0.0134],
        [ 0.0103, -0.4194,  0.6460,  ...,  0.2052, -0.3926,  0.0270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0109,  0.0131,  0.0270,  ..., -0.0370, -0.0109, -0.0026],
        [-0.1713,  0.0212, -0.0997,  ..., -0.0334,  0.1619,  0.0006],
        [-0.0340,  0.0008,  0.0049,  ..., -0.0348,  0.0041,  0.0051],
        ...,
        [ 0.1222, -0.0693, -0.0547,  ...,  0.0039, -0.0088,  0.0889],
        [ 0.0536,  0.0881,  0.0286,  ...,  0.0240, -0.0113,  0.0430],
        [ 0.1061, -0.0085, -0.2025,  ..., -0.1041, -0.0279, -0.0264]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0284,  0.0375,  0.0362,  ...,  0.1283, -0.1316, -0.1168],
        [-0.1193,  0.1740, -0.1381,  ...,  0.2137,  0.1708, -0.3560],
        [-0.0240,  0.2256, -0.1074,  ..., -0.6909, -0.3154, -0.5825],
        ...,
        [-0.4868,  0.3181, -0.0801,  ...,  0.1230,  0.0795, -0.1099],
        [-0.1381,  0.2607,  0.1566,  ..., -0.0452,  0.0338,  0.3044],
        [-0.0473,  0.3479,  0.0456,  ...,  0.2313,  0.0793, -0.4861]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0089,  0.0043, -0.0113,  ..., -0.0181,  0.0005,  0.0024],
        [ 0.1282,  0.0493,  0.0452,  ..., -0.0178, -0.0153,  0.0213],
        [ 0.0834, -0.0182, -0.0036,  ...,  0.0018, -0.0428, -0.1064],
        ...,
        [ 0.1350,  0.0476,  0.0351,  ...,  0.0364, -0.0617,  0.0400],
        [-0.1351,  0.0093, -0.0469,  ..., -0.0251,  0.0605, -0.0153],
        [-0.0516,  0.0961, -0.0247,  ..., -0.0159,  0.0618, -0.0268]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0403, -0.0154, -0.0115,  ..., -0.0071,  0.0028,  0.0103],
        [-0.1187,  0.2656, -0.8325,  ..., -0.1713, -0.2534,  0.1281],
        [-0.1863,  0.7847, -0.7856,  ...,  0.2018, -0.3921,  0.6016],
        ...,
        [ 0.1247,  0.2571, -0.1167,  ...,  0.0953,  0.1582, -0.6792],
        [-0.0023, -0.0407,  0.7446,  ...,  0.4016, -0.3005,  0.1648],
        [-0.0381,  0.3350, -0.0825,  ...,  0.5234,  0.1812, -0.0426]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0047,  0.0259,  0.0037,  ...,  0.0092, -0.0160,  0.0088],
        [-0.0201, -0.0057, -0.0005,  ...,  0.0410, -0.0229, -0.0042],
        [-0.0384, -0.0500,  0.0126,  ...,  0.0353,  0.0261,  0.0060],
        ...,
        [ 0.0800,  0.0048, -0.0572,  ...,  0.0390,  0.0926, -0.0008],
        [ 0.1210,  0.1168,  0.1702,  ..., -0.1193,  0.0437,  0.1138],
        [-0.1022, -0.0358, -0.0430,  ..., -0.0986,  0.0563, -0.0228]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0723, -0.0899, -0.3174,  ...,  0.0633, -0.1979,  0.2529],
        [-0.0409,  0.0728,  0.4758,  ...,  0.1116, -0.0049, -0.4192],
        [-0.0856,  0.4148, -0.1838,  ..., -0.1553,  0.1511, -0.2212],
        ...,
        [-0.1443, -0.6084, -0.6768,  ..., -0.0220, -0.4790,  0.1760],
        [ 0.6597, -0.6230,  0.0124,  ..., -0.0201, -0.7446,  0.2959],
        [ 0.1278, -0.6108, -0.1552,  ...,  0.0073, -0.3096,  0.2251]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.0042, -0.0091, -0.0084,  ..., -0.0254,  0.0036, -0.0028],
        [-0.0247, -0.0403, -0.0129,  ..., -0.1238,  0.0787,  0.0200],
        [ 0.1562,  0.1315,  0.0058,  ...,  0.0901, -0.0165, -0.1127],
        ...,
        [-0.0748,  0.0161,  0.0756,  ..., -0.0723, -0.1587,  0.0076],
        [ 0.0998, -0.0466, -0.1082,  ...,  0.1247, -0.1328,  0.0057],
        [ 0.0124, -0.0859,  0.0997,  ..., -0.0528,  0.0243, -0.1532]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0450,  0.0461, -0.0175,  ...,  0.0037, -0.0153,  0.0072],
        [-0.0248,  0.2318,  0.2495,  ...,  0.0219,  0.0222, -0.0875],
        [-0.0376,  0.0200, -0.7671,  ..., -0.3518, -0.5186, -0.4968],
        ...,
        [-0.0302, -0.6777,  0.0750,  ..., -0.0556,  0.2334,  0.1758],
        [ 0.2922, -0.4805, -0.4133,  ...,  0.1262, -0.4204, -0.0338],
        [-0.2876, -0.3589, -0.1606,  ..., -0.7495, -0.0897, -0.2900]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0113,  0.0394,  0.0316,  ..., -0.0376, -0.0127, -0.0314],
        [ 0.0096, -0.0297,  0.0123,  ...,  0.0094, -0.0027,  0.0156],
        [-0.0186, -0.0332,  0.0362,  ..., -0.0047,  0.0109,  0.0453],
        ...,
        [ 0.0983,  0.0994,  0.0472,  ...,  0.0870, -0.0293,  0.0009],
        [-0.0085,  0.0418,  0.0707,  ..., -0.0762,  0.0831,  0.0232],
        [ 0.1008, -0.0169,  0.0084,  ..., -0.0439, -0.0058,  0.1353]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0524, -0.2239, -0.0060,  ...,  0.2495,  0.0778,  0.1578],
        [-0.5288,  0.2089,  0.0118,  ...,  0.0350, -0.0338,  0.6230],
        [-0.4844, -0.0040,  0.1395,  ...,  0.0266,  0.1853,  0.0814],
        ...,
        [-1.2119, -0.2277,  0.2313,  ..., -0.4160, -0.3276, -0.0541],
        [-0.4954, -0.0726,  0.1223,  ..., -0.1927, -0.3062, -0.1368],
        [-1.3574, -0.2651, -0.1830,  ..., -0.2227, -0.3035, -0.2585]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0177, -0.0209, -0.0072,  ..., -0.0037, -0.0094, -0.0132],
        [ 0.0169, -0.0300,  0.1321,  ...,  0.1069,  0.0683,  0.0727],
        [-0.0859, -0.1261, -0.0873,  ...,  0.1501,  0.0296,  0.0120],
        ...,
        [-0.2472, -0.0658, -0.0218,  ...,  0.0006, -0.0395,  0.1158],
        [-0.1014, -0.0621,  0.1141,  ..., -0.0535, -0.0061,  0.0687],
        [ 0.1137,  0.1204, -0.0083,  ...,  0.2034, -0.1385, -0.1567]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.1112,  0.0218, -0.0129,  ..., -0.0048, -0.0059,  0.0083],
        [ 0.2986,  0.2417, -0.0834,  ..., -0.0816,  0.0650,  0.0548],
        [ 0.0445, -0.6519,  0.0132,  ...,  0.3091,  0.4248, -0.3647],
        ...,
        [ 0.1953,  0.5078,  0.7124,  ...,  0.1255,  0.0449, -0.2637],
        [-0.1461, -0.1604,  0.1606,  ...,  0.3284,  0.2058,  0.2323],
        [ 0.0892,  0.2915,  0.5835,  ...,  0.0149, -0.0297,  0.0772]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0162,  0.0426,  0.0072,  ..., -0.0101, -0.0018, -0.0426],
        [ 0.0284,  0.0549, -0.0081,  ...,  0.0131,  0.0139, -0.0414],
        [ 0.0422,  0.0308, -0.0103,  ...,  0.0436,  0.0029, -0.0221],
        ...,
        [ 0.2059,  0.0997, -0.0077,  ..., -0.0726,  0.0332, -0.1532],
        [ 0.1021,  0.0469, -0.0254,  ..., -0.1152,  0.2218,  0.0734],
        [ 0.1383,  0.0655,  0.1166,  ...,  0.0230,  0.1030, -0.0311]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.2195, -0.0548, -0.1335,  ..., -0.1395,  0.0974, -0.1815],
        [-0.9507,  0.1248,  0.3064,  ...,  0.0867,  0.1545, -0.3364],
        [-0.6050, -0.0021, -0.0249,  ...,  0.0173,  0.2299, -0.3103],
        ...,
        [-0.5576, -0.0271,  0.0027,  ..., -0.0439,  0.2314, -0.1490],
        [-0.4189, -0.1459, -0.5527,  ..., -0.3481,  0.2974, -0.2491],
        [-0.2086, -0.0529,  0.2324,  ..., -0.3196,  0.0677,  0.2362]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0060, -0.0134, -0.0184,  ...,  0.0119, -0.0069, -0.0136],
        [ 0.0374, -0.0423,  0.0671,  ..., -0.0519, -0.0440, -0.0456],
        [-0.0041,  0.0559, -0.1085,  ...,  0.0625, -0.0714, -0.0638],
        ...,
        [-0.2251,  0.1031,  0.1617,  ...,  0.2261, -0.1181,  0.0169],
        [-0.1287, -0.0869,  0.0443,  ...,  0.1104, -0.1968,  0.0454],
        [-0.0932, -0.0406, -0.0164,  ..., -0.0551, -0.0500, -0.0796]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0575, -0.1893, -0.0219,  ...,  0.0201, -0.0099,  0.0057],
        [ 0.4612,  0.5132,  0.1505,  ...,  0.3484,  0.1407, -0.0378],
        [ 0.5547,  0.0687,  0.2465,  ...,  0.2510,  0.0485,  0.4609],
        ...,
        [-0.4958, -0.6260, -0.3152,  ..., -0.4956, -0.4285, -0.1113],
        [ 0.2539,  0.2216, -0.6899,  ..., -0.6499, -0.2329,  0.3345],
        [ 0.1633,  0.5317,  0.1407,  ..., -0.0901,  0.2988,  0.4153]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0264,  0.0298,  0.0284,  ..., -0.0297,  0.0062,  0.0469],
        [ 0.0241, -0.0097,  0.0039,  ...,  0.0046, -0.0165,  0.0217],
        [-0.0246, -0.0092,  0.0286,  ...,  0.0598, -0.0094,  0.0505],
        ...,
        [-0.0253, -0.2214,  0.0037,  ..., -0.0565, -0.1399, -0.0681],
        [ 0.2617, -0.0985,  0.0945,  ..., -0.0739, -0.0979, -0.1000],
        [ 0.0847,  0.0232, -0.0176,  ...,  0.0524, -0.1761,  0.0140]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-1.0925e-01, -4.5929e-02, -1.1780e-01,  ..., -6.8970e-02,
         -2.0523e-02,  1.0364e-01],
        [-1.9507e-01, -1.1774e-01, -2.5732e-01,  ..., -1.0950e-01,
          3.1421e-01,  4.1237e-03],
        [-3.9331e-01,  1.6113e-01,  1.1615e-01,  ...,  1.1273e-01,
          2.1423e-01, -3.1261e-03],
        ...,
        [-4.5044e-02, -1.4026e-01, -1.1993e-01,  ...,  1.1986e-04,
          5.7373e-01, -5.9326e-01],
        [-3.2910e-01, -2.6807e-01, -2.7808e-01,  ...,  1.4294e-01,
          1.7798e-01, -4.6826e-01],
        [-1.6907e-01, -2.4634e-01, -2.9663e-01,  ...,  1.7444e-01,
          1.5479e-01,  1.1383e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0012,  0.0096, -0.0069,  ...,  0.0269,  0.0083, -0.0114],
        [-0.0270,  0.0126, -0.1060,  ..., -0.2203,  0.0361, -0.0138],
        [ 0.0593, -0.1447, -0.2050,  ..., -0.1163,  0.1969,  0.1393],
        ...,
        [ 0.0260, -0.0586,  0.0212,  ..., -0.0695,  0.1804,  0.0398],
        [-0.1331,  0.0421,  0.1161,  ..., -0.0093,  0.0070,  0.0217],
        [-0.0529, -0.0715,  0.0467,  ..., -0.1891,  0.0107,  0.0211]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0131, -0.1102,  0.1304,  ...,  0.0133,  0.0024, -0.0023],
        [-0.6680,  0.0867, -0.4761,  ...,  0.1746, -0.1512,  0.1321],
        [ 0.2302,  0.1730, -0.2157,  ..., -0.2013, -0.7046, -1.0908],
        ...,
        [ 0.0062,  0.2341, -0.1884,  ...,  0.5273,  0.2203, -0.1534],
        [ 0.3809, -0.4722, -0.6665,  ...,  0.1350, -0.4563, -1.0117],
        [-0.6089,  0.4087,  0.1927,  ...,  0.1584, -0.0259, -0.0778]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0045,  0.0483,  0.0322,  ..., -0.0528, -0.0542,  0.0181],
        [-0.0266,  0.0461,  0.0594,  ..., -0.0106, -0.0272,  0.0240],
        [-0.0003,  0.0188,  0.0290,  ...,  0.0148, -0.0208,  0.0395],
        ...,
        [-0.0900, -0.0997,  0.0297,  ..., -0.0562,  0.0329,  0.1486],
        [ 0.0201, -0.1635,  0.0931,  ..., -0.0758,  0.1852, -0.0280],
        [-0.0306,  0.0418,  0.1542,  ..., -0.0464,  0.0583,  0.0535]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0980, -0.3345, -0.1488,  ..., -0.0410, -0.1014,  0.0385],
        [ 0.1203, -0.6289,  0.0030,  ..., -0.3372, -0.5566,  0.1032],
        [ 0.4731, -0.3298, -0.4512,  ..., -0.1136, -0.5386,  0.3635],
        ...,
        [ 0.5884, -0.5117, -0.4163,  ..., -0.2123, -0.0972,  0.1094],
        [ 0.0349, -0.3357, -0.6504,  ..., -0.3103, -0.0260, -0.1024],
        [ 0.9736,  0.4370, -0.5654,  ..., -0.3184, -0.1709, -0.0963]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0017, -0.0397, -0.0124,  ...,  0.0145, -0.0032, -0.0103],
        [-0.0019, -0.0876,  0.0859,  ...,  0.0680,  0.0381,  0.1209],
        [ 0.0169, -0.1243,  0.1345,  ...,  0.1425, -0.0383,  0.0338],
        ...,
        [ 0.0168,  0.1464,  0.0674,  ...,  0.1936,  0.0145,  0.1061],
        [ 0.0051,  0.0281, -0.0700,  ...,  0.2629, -0.1089, -0.0733],
        [-0.0789, -0.2119,  0.1306,  ...,  0.0223, -0.1091, -0.2240]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.0726, -0.0099, -0.0952,  ..., -0.0424, -0.0235,  0.0198],
        [-0.4380, -0.5669,  0.0911,  ...,  0.1472,  0.2639,  0.0105],
        [-0.9932, -0.1082,  0.5312,  ..., -0.2727, -0.2424,  0.0763],
        ...,
        [ 0.1509,  0.1202,  0.0820,  ..., -0.7202, -0.0250, -0.0270],
        [-1.0234, -0.5317,  0.5459,  ...,  0.1224,  0.1764, -0.1533],
        [-0.3411, -0.1804, -0.4863,  ...,  0.7100, -0.1864,  0.0645]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0205, -0.0079,  0.0067,  ..., -0.0029, -0.0008,  0.0273],
        [-0.0184, -0.0305,  0.0033,  ...,  0.0420, -0.0164,  0.0228],
        [-0.0308, -0.0674, -0.0009,  ...,  0.0383, -0.0186,  0.0123],
        ...,
        [ 0.0853,  0.1127,  0.1630,  ...,  0.0413, -0.0243,  0.0299],
        [-0.0965,  0.1281,  0.1449,  ...,  0.1823,  0.0853,  0.0316],
        [-0.0933, -0.0036, -0.1267,  ...,  0.1512,  0.0905,  0.1205]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1965, -0.0297, -0.0163,  ...,  0.0862,  0.0109, -0.1135],
        [-0.2825, -0.6123, -0.2881,  ..., -0.0022, -0.0781, -0.3110],
        [ 0.0581, -0.1797, -0.2625,  ...,  0.0935,  0.2971,  0.0609],
        ...,
        [-1.6230, -0.4412, -0.3125,  ...,  0.2764, -0.0147,  0.2004],
        [-0.5527, -0.3999, -0.6807,  ...,  0.0264,  0.3904, -0.1050],
        [-0.4792,  0.0811, -0.5435,  ...,  0.3015, -0.6006, -0.1549]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0171, -0.0222, -0.0176,  ...,  0.0112,  0.0009, -0.0046],
        [ 0.0670, -0.0288, -0.0150,  ..., -0.0936,  0.0608, -0.0197],
        [ 0.0094,  0.2335,  0.0048,  ...,  0.1153,  0.0377, -0.0484],
        ...,
        [ 0.1010, -0.1876,  0.1851,  ..., -0.0400,  0.0797, -0.1031],
        [-0.0562,  0.0647, -0.0438,  ..., -0.2264, -0.0494,  0.0378],
        [ 0.1848, -0.0704,  0.0680,  ..., -0.0531,  0.0207,  0.0015]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.0571, -0.0219,  0.0133,  ..., -0.0149,  0.0123,  0.0089],
        [ 0.0250,  0.2876,  0.2878,  ..., -0.3601, -0.4438, -0.2966],
        [-0.7456, -0.3179,  0.7539,  ...,  0.6885,  0.2133,  0.1177],
        ...,
        [ 0.3301,  0.1209, -0.6982,  ...,  0.0308,  0.4575, -0.1968],
        [-0.1805,  0.0544, -0.0935,  ...,  0.5986, -0.1320,  0.3442],
        [-0.2185,  0.6128, -0.0090,  ..., -0.5073,  0.4329,  0.2362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0009, -0.0109, -0.0062,  ...,  0.0029, -0.0250, -0.0474],
        [-0.1161, -0.0388,  0.0818,  ..., -0.0217,  0.0255, -0.0450],
        [-0.0866,  0.0423,  0.0142,  ...,  0.0558, -0.0451, -0.0285],
        ...,
        [ 0.2620,  0.1005,  0.0081,  ...,  0.0648,  0.0766,  0.1438],
        [ 0.1567,  0.1010, -0.0364,  ..., -0.0455,  0.0252,  0.2164],
        [ 0.2051,  0.0321,  0.0019,  ..., -0.0592,  0.0195,  0.1353]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1719,  0.0698, -0.1020,  ..., -0.0279,  0.0639, -0.0524],
        [-0.2593, -0.3862,  0.1536,  ..., -0.1791, -0.2566,  0.4614],
        [ 0.4263,  0.0646,  0.3313,  ..., -0.5918, -0.2820, -0.2344],
        ...,
        [ 0.2578, -0.6401, -0.0154,  ..., -0.2499, -0.0016,  0.2561],
        [ 0.4883, -0.8110, -0.5161,  ..., -0.3464, -0.3650, -0.3789],
        [ 0.5430, -0.6821, -0.2686,  ..., -0.4365, -0.1119, -0.0333]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.0029, -0.0147,  0.0058,  ...,  0.0024,  0.0191,  0.0072],
        [-0.0224, -0.1252, -0.0287,  ..., -0.1582, -0.1740,  0.0479],
        [-0.0443, -0.0575, -0.0389,  ..., -0.2646,  0.0869, -0.0261],
        ...,
        [-0.5479,  0.1255, -0.1102,  ...,  0.1238,  0.0020,  0.1407],
        [ 0.0169,  0.2002, -0.1824,  ...,  0.2642, -0.1381, -0.0826],
        [-0.1713, -0.0461, -0.2058,  ..., -0.2317, -0.0154, -0.0343]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.1057, -0.1631,  0.0392,  ...,  0.0146, -0.0037,  0.0130],
        [ 1.4180,  0.1042, -0.2578,  ..., -0.5015, -0.2764, -0.4121],
        [ 2.2812, -0.2539,  0.6611,  ...,  0.0607,  0.3513, -0.5415],
        ...,
        [ 2.1582,  0.0058,  0.2703,  ...,  0.0197, -0.8286,  0.4329],
        [ 2.6270, -0.0369, -0.6870,  ...,  0.8574,  0.2810, -0.0803],
        [ 1.6621, -0.8462,  0.1517,  ...,  0.6650, -0.6616, -0.1449]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0005, -0.0323,  0.0443,  ...,  0.0012, -0.0048, -0.0182],
        [ 0.0369, -0.0311, -0.0399,  ...,  0.0706,  0.0190,  0.0254],
        [-0.0525, -0.1621,  0.0197,  ...,  0.0098, -0.0263, -0.0647],
        ...,
        [-0.0243, -0.1442,  0.1259,  ..., -0.1993,  0.2244,  0.0612],
        [ 0.0258, -0.0954, -0.2212,  ..., -0.0324,  0.2673,  0.1093],
        [ 0.0117, -0.0619,  0.0853,  ...,  0.0328,  0.0953,  0.0448]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0311, -0.0283, -0.1158,  ...,  0.0070, -0.0012, -0.0883],
        [ 0.4250,  0.5317, -0.7290,  ...,  0.7598,  0.1620, -0.1120],
        [ 0.3804,  0.5098, -0.6157,  ...,  0.2742,  0.3169, -0.0522],
        ...,
        [ 0.0280,  0.5200, -0.4663,  ...,  0.5166, -0.1411,  0.3223],
        [-0.6416,  0.5298, -0.1036,  ...,  0.5620,  0.1086, -0.0748],
        [-0.3931, -0.2747, -0.3127,  ...,  0.2203,  0.4839, -0.1802]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.0264,  0.0103,  0.0099,  ...,  0.0134,  0.0151, -0.0214],
        [ 0.1345,  0.0228, -0.1152,  ...,  0.0431,  0.1165,  0.0283],
        [-0.0180,  0.0658, -0.0828,  ...,  0.0745,  0.0686,  0.1592],
        ...,
        [ 0.2196,  0.1346, -0.0667,  ...,  0.2483, -0.2605, -0.1587],
        [-0.0739,  0.1321, -0.0927,  ...,  0.1250, -0.0238, -0.2279],
        [-0.1360,  0.0005, -0.1300,  ...,  0.2683,  0.3503, -0.1896]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0116,  0.0048, -0.0029,  ...,  0.0095,  0.0236,  0.0061],
        [-0.0071,  0.3271, -0.7690,  ..., -0.2445,  0.0821, -0.1610],
        [ 0.2815, -0.0835, -0.3938,  ...,  0.5869, -0.2615, -0.2820],
        ...,
        [-0.1694,  0.3521,  0.0574,  ..., -0.5249,  0.4285,  0.4099],
        [ 0.4202,  0.5010,  0.3020,  ..., -0.1417,  0.1982,  0.0463],
        [ 0.1508, -0.2041,  0.0075,  ...,  0.0022,  0.1560,  0.5474]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0698,  0.0369,  0.0016,  ..., -0.0204,  0.0005,  0.0129],
        [-0.0711, -0.0155,  0.0080,  ...,  0.0519,  0.0493,  0.0244],
        [-0.0271, -0.0216, -0.0822,  ...,  0.0757,  0.0990, -0.0887],
        ...,
        [-0.0307,  0.1367,  0.0312,  ...,  0.2849,  0.0092,  0.1007],
        [-0.1237, -0.0352,  0.0235,  ...,  0.1692,  0.1600,  0.0587],
        [ 0.1054,  0.0998,  0.0690,  ...,  0.0815,  0.1416,  0.1030]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0477,  0.0854,  0.0069,  ...,  0.0908, -0.1003, -0.1255],
        [-0.1842, -0.0847, -0.6294,  ..., -0.1265, -0.5156,  0.2115],
        [-0.4731, -0.4751, -0.2913,  ...,  0.4709, -0.7803,  0.5591],
        ...,
        [-0.0910, -0.6797, -0.4717,  ...,  0.9243,  0.0737,  0.7446],
        [ 0.2086, -0.2319,  0.0612,  ...,  0.1206,  0.1726,  0.3589],
        [-0.0536,  0.2106, -0.1663,  ...,  0.6709,  0.4419,  0.3638]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.0131, -0.0079,  0.0231,  ...,  0.0123, -0.0038, -0.0448],
        [ 0.2350, -0.1975, -0.1226,  ...,  0.1818,  0.1549,  0.2396],
        [-0.1113,  0.2000, -0.0131,  ..., -0.1227,  0.0318,  0.0437],
        ...,
        [ 0.0942,  0.0632,  0.0530,  ..., -0.0609, -0.1981, -0.3088],
        [ 0.2158, -0.0194, -0.3044,  ...,  0.0107,  0.0675, -0.2040],
        [-0.1241, -0.2147, -0.3340,  ...,  0.0128, -0.0431,  0.1407]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0313, -0.0403,  0.2258,  ..., -0.0074, -0.0215, -0.0194],
        [-0.1586, -0.1707, -0.4180,  ...,  0.0693,  0.4893, -0.1259],
        [-0.6460, -0.2632, -0.4028,  ...,  0.5820,  0.7744, -0.2333],
        ...,
        [-0.2446, -0.7847,  0.5840,  ..., -0.9194, -0.2607,  0.0420],
        [ 0.1584, -0.5630, -0.0910,  ..., -0.9878, -0.0152, -0.1023],
        [ 0.8711, -0.1899,  0.3816,  ..., -0.6348, -0.4487, -0.3965]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0107, -0.0052,  0.0258,  ..., -0.0355, -0.0961, -0.0358],
        [-0.0244, -0.0236,  0.0480,  ..., -0.0288, -0.0193, -0.0488],
        [ 0.0250, -0.0396, -0.0396,  ..., -0.0778,  0.0022, -0.0461],
        ...,
        [-0.0518, -0.1924,  0.0696,  ...,  0.1201,  0.0829, -0.1393],
        [-0.1655, -0.3718,  0.2070,  ..., -0.3186,  0.0428, -0.1465],
        [-0.0191,  0.0024,  0.1748,  ..., -0.0554,  0.0310,  0.2087]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0399,  0.0801, -0.1229,  ...,  0.0293, -0.0623,  0.2502],
        [ 0.3054, -0.1948,  0.0923,  ..., -0.2576,  0.1062, -0.3250],
        [ 0.6909, -0.0439, -0.3643,  ..., -0.1360,  0.0862, -0.0167],
        ...,
        [-0.5620,  0.2168, -0.6494,  ...,  0.1338,  0.0359, -0.1619],
        [-0.5430,  0.2145, -0.2808,  ...,  0.5332,  0.3115, -0.0796],
        [-0.4126,  0.0867, -0.1608,  ...,  0.3833,  0.5532, -0.3628]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.3135,  0.1421,  0.0203,  ...,  0.2761,  0.1931,  0.2800],
        [ 0.2340,  0.0980, -0.2874,  ..., -0.0904,  0.3728, -0.5947],
        [ 0.1428,  0.2480, -0.1436,  ...,  0.1278,  0.2668,  0.1132],
        ...,
        [ 0.1526,  0.0447, -0.0166,  ...,  0.1129,  0.0489, -0.0272],
        [-0.0655, -0.3418,  0.0859,  ..., -0.0029, -0.2361, -0.0259],
        [ 0.2568, -0.1682, -0.0922,  ...,  0.2747, -0.3308, -0.0142]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0531, -0.0352, -0.0451,  ..., -0.0139, -0.0016,  0.0108],
        [ 0.0599,  0.0469, -0.2693,  ..., -0.4270, -0.3237, -0.1934],
        [-0.0223,  0.0300,  0.0035,  ..., -0.2852,  0.0346,  0.4429],
        ...,
        [-0.0397,  0.2319, -0.0547,  ...,  0.3386,  0.0990, -0.6543],
        [ 0.3838, -1.0303,  0.0416,  ..., -0.3528, -0.2510, -0.2783],
        [ 0.1378, -0.1581,  0.0558,  ...,  0.1711, -0.1503,  0.5156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0150,  0.0583, -0.0021,  ..., -0.0047, -0.0970, -0.0959],
        [ 0.0589,  0.0044, -0.0128,  ..., -0.0157,  0.0407,  0.0671],
        [ 0.0493,  0.0272,  0.0209,  ..., -0.0714,  0.0842,  0.0895],
        ...,
        [ 0.0523, -0.0732,  0.0784,  ...,  0.0840,  0.0737, -0.0968],
        [ 0.0172, -0.0583,  0.0740,  ..., -0.0365,  0.1050,  0.0865],
        [ 0.0488, -0.0323, -0.0163,  ...,  0.0146,  0.0878, -0.0707]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0549,  0.0769,  0.0174,  ...,  0.0294, -0.0132, -0.1533],
        [-0.9048, -0.4407,  0.0773,  ..., -0.4304, -0.3806,  0.3279],
        [-0.0521,  0.1120,  0.1521,  ..., -0.4661, -0.2869, -0.2629],
        ...,
        [ 0.4790, -0.0856,  0.3235,  ..., -0.0448,  0.2410, -0.3870],
        [-0.0104,  0.2377, -0.4587,  ..., -0.3157,  0.1471, -0.2290],
        [-0.2319, -0.3110, -0.1869,  ...,  0.4526, -0.2729, -0.2705]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0226,  0.0023, -0.0088,  ..., -0.0283, -0.0125,  0.0043],
        [-0.0490,  0.2070,  0.1539,  ..., -0.5303,  0.3406,  0.1306],
        [-0.0574,  0.1517,  0.0897,  ...,  0.1996,  0.0226, -0.0166],
        ...,
        [-0.3293,  0.0235,  0.1984,  ...,  0.1768, -0.1122,  0.0028],
        [-0.3347, -0.0590,  0.0077,  ..., -0.2737,  0.3069,  0.0701],
        [-0.3821,  0.0132, -0.0436,  ..., -0.0597,  0.4934, -0.0078]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0141, -0.0143,  0.0026,  ..., -0.0122,  0.0169,  0.0141],
        [ 0.2817,  0.2057, -0.0648,  ...,  0.5103, -0.2449,  0.3936],
        [-0.0693,  0.1648,  0.8223,  ...,  0.2172, -0.3054,  0.1595],
        ...,
        [ 0.7266,  0.9976, -0.6484,  ..., -0.1927, -0.1838, -0.5293],
        [ 1.0537,  0.9951, -0.0549,  ...,  0.8188, -0.9961,  0.3174],
        [ 0.8037,  0.1282, -0.5820,  ...,  0.6255, -0.4011,  0.3992]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0383,  0.0150,  0.0025,  ..., -0.0194, -0.0532, -0.0382],
        [-0.0701, -0.0051, -0.0077,  ..., -0.0308, -0.0432, -0.0355],
        [-0.0679, -0.1605, -0.0613,  ..., -0.0955,  0.0438,  0.0191],
        ...,
        [ 0.0895, -0.0677, -0.0595,  ...,  0.0161,  0.0374, -0.1467],
        [ 0.1075, -0.0355,  0.0265,  ..., -0.0971, -0.0644,  0.0684],
        [-0.1033,  0.0956, -0.0775,  ..., -0.0798,  0.1093,  0.0558]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1084,  0.0146,  0.0256,  ..., -0.0443,  0.0310, -0.0734],
        [-0.2639,  0.2219, -0.8735,  ...,  0.3530,  0.2754,  0.6104],
        [-0.4333, -0.0472, -0.0167,  ...,  0.4626,  0.4868,  0.4553],
        ...,
        [-0.6533, -0.7080, -0.4492,  ...,  0.3330, -0.0156, -0.6953],
        [-0.1065, -0.2896, -0.3103,  ..., -0.1471,  0.0186,  0.3547],
        [ 0.1204, -0.1442, -0.0417,  ...,  0.2898,  0.0085, -0.0732]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.0075,  0.0096,  0.0173,  ...,  0.0029,  0.0107, -0.0197],
        [ 0.1181,  0.0779,  0.0724,  ...,  0.0287, -0.2266,  0.4229],
        [ 0.0939, -0.4827, -0.2177,  ...,  0.0357, -0.0659,  0.4353],
        ...,
        [ 0.0991,  0.1187,  0.3235,  ..., -0.0499, -0.3091, -0.1737],
        [-0.1142,  0.2505,  0.1626,  ..., -0.0059,  0.0397,  0.0697],
        [ 0.0260, -0.1626, -0.4561,  ..., -0.1089, -0.2468,  0.2642]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0547, -0.0326,  0.0108,  ..., -0.0030,  0.0168, -0.0017],
        [-0.4875, -0.3889,  1.0186,  ..., -0.0087, -0.0218, -0.3333],
        [ 0.0502,  0.1235,  0.4072,  ...,  1.1260, -0.1348,  0.3474],
        ...,
        [-1.5898, -0.3945, -0.5146,  ..., -0.1896,  0.6982,  0.1887],
        [-1.3291,  0.7334,  0.4019,  ..., -0.6187,  0.4937,  0.3745],
        [-1.0391, -0.4407,  0.1619,  ..., -0.5493, -0.3950,  0.0616]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0154,  0.0060, -0.0637,  ..., -0.0354, -0.0551,  0.0234],
        [-0.0002, -0.0149, -0.1082,  ..., -0.0605, -0.0504,  0.0420],
        [-0.0495,  0.0405, -0.0533,  ..., -0.0667, -0.0726,  0.0280],
        ...,
        [ 0.0077, -0.0173, -0.0274,  ...,  0.0332, -0.0294, -0.0187],
        [ 0.0192,  0.0412, -0.1628,  ..., -0.1184, -0.1572,  0.0954],
        [ 0.1184, -0.0551, -0.0283,  ..., -0.0279, -0.0403, -0.0098]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.4983,  0.0504,  0.0526,  ..., -0.1052, -0.0490, -0.0889],
        [ 0.9790, -0.0640, -0.0177,  ..., -0.1470, -0.1696,  0.1080],
        [ 1.2090,  0.0124,  0.3340,  ...,  0.0500,  0.3389, -0.5244],
        ...,
        [ 1.0684,  0.0646,  1.0029,  ..., -0.3086, -0.1703,  0.1228],
        [ 1.3564, -0.5508,  0.4424,  ..., -0.4968,  0.7017,  0.6504],
        [ 1.6074, -0.0817,  1.1543,  ...,  0.4736,  0.1516,  0.5063]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.0521,  0.0531,  0.0824,  ...,  0.2212,  0.2747,  0.1766],
        [ 0.7681,  0.3894,  0.1137,  ...,  0.0014, -0.7954, -0.2097],
        [-0.3130, -0.5039, -0.0546,  ..., -0.2849, -0.0874, -0.1055],
        ...,
        [ 0.1720,  0.0146,  0.2798,  ..., -0.1735,  0.5522,  0.2561],
        [-0.0865,  0.0388, -0.1483,  ..., -0.1904, -0.2155,  0.1570],
        [ 0.0971,  0.0375,  0.0435,  ..., -0.1835, -0.0939,  0.3711]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.0047, -0.0210, -0.0676,  ..., -0.0145, -0.0067, -0.0071],
        [-0.4663, -0.3030,  0.1016,  ...,  0.0782,  0.0238, -0.1111],
        [-0.2678, -0.6626,  0.0645,  ..., -0.6611, -0.4521, -0.3142],
        ...,
        [-0.3181, -0.5366, -0.3601,  ...,  0.0535,  0.6060,  0.3982],
        [-0.4407, -0.0340,  0.1143,  ...,  0.0615,  0.8823, -0.3567],
        [ 0.0286, -0.0840,  0.2028,  ...,  0.0113,  0.2306, -0.0564]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0290, -0.0081, -0.0269,  ..., -0.0528, -0.0189, -0.0188],
        [ 0.0079, -0.0372, -0.0727,  ..., -0.0009, -0.0288,  0.0034],
        [-0.0836, -0.0993, -0.0490,  ...,  0.0501,  0.0712,  0.0587],
        ...,
        [ 0.0057, -0.0465,  0.0638,  ...,  0.0886,  0.0656,  0.0282],
        [ 0.2705, -0.0660,  0.1317,  ...,  0.1418,  0.0954,  0.0920],
        [-0.0140, -0.0616,  0.1357,  ...,  0.1853,  0.0381,  0.0837]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1018, -0.0518,  0.1110,  ...,  0.0127, -0.1177, -0.0458],
        [-0.2043,  0.4006, -0.1425,  ..., -0.2583,  0.3040,  0.0242],
        [-0.4753,  0.2339,  0.2725,  ..., -0.2771, -0.2122, -0.3296],
        ...,
        [-0.5820, -0.5381, -0.2717,  ..., -0.2432,  0.1804,  0.0600],
        [-1.2949,  0.0266, -0.2452,  ..., -0.2180,  0.5190, -0.0208],
        [-0.8726, -0.3706, -0.1361,  ..., -0.2260,  0.7080, -0.4746]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 3.6831e-03,  3.7018e-02,  5.4893e-03,  ...,  1.1147e-02,
          1.1909e-02, -1.7853e-02],
        [ 4.8071e-01, -1.6162e-01, -7.2693e-02,  ...,  1.3086e-01,
          2.6172e-01, -1.0553e-01],
        [ 1.4771e-01, -2.7588e-01,  2.8931e-01,  ...,  2.5903e-01,
          1.8787e-01,  9.1431e-02],
        ...,
        [ 1.3382e-02, -1.5991e-01,  3.4637e-02,  ..., -1.2445e-01,
          1.5320e-01,  2.1423e-01],
        [-1.0559e-02,  1.0132e-01,  1.1642e-02,  ...,  7.6904e-02,
         -1.6882e-01,  3.5498e-01],
        [ 1.0521e-02, -5.8055e-05, -7.8552e-02,  ...,  1.6260e-01,
          3.2135e-02,  9.8328e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.5479e-01,  5.2795e-02,  1.5381e-01,  ..., -4.6120e-03,
         -1.7774e-04,  8.6689e-04],
        [ 2.1027e-02, -2.8369e-01, -2.0752e-01,  ...,  4.1943e-01,
          3.0518e-01,  8.3008e-02],
        [-9.8242e-01, -1.1597e-01, -4.1333e-01,  ...,  4.2578e-01,
          4.6533e-01,  1.0312e+00],
        ...,
        [ 1.0352e-01,  6.4844e-01, -3.7866e-01,  ..., -1.8896e-01,
          6.3037e-01,  4.4824e-01],
        [-1.6565e-01,  4.2041e-01, -2.2534e-01,  ..., -5.0873e-02,
          7.9224e-02, -5.9033e-01],
        [ 9.6436e-02,  2.6831e-01, -3.9246e-02,  ..., -2.6929e-01,
         -1.2744e-01, -7.0117e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0177, -0.0290, -0.0293,  ..., -0.0439, -0.0230, -0.0655],
        [-0.0039, -0.0460, -0.0364,  ..., -0.0319, -0.0137, -0.0815],
        [ 0.0208, -0.0244, -0.1213,  ..., -0.0092, -0.0526, -0.0886],
        ...,
        [ 0.0768,  0.0190, -0.0618,  ...,  0.0270,  0.0624, -0.0984],
        [-0.2291,  0.1460, -0.4507,  ...,  0.2783, -0.0876,  0.0044],
        [-0.2101, -0.0137, -0.2842,  ...,  0.1792, -0.0598,  0.0486]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1814, -0.1941,  0.1924,  ..., -0.0396, -0.1003, -0.0082],
        [ 0.1471,  0.7227, -0.3425,  ..., -0.6196,  0.1790, -0.9800],
        [ 0.5225, -0.4404, -1.1133,  ...,  0.2179,  0.0847, -0.6216],
        ...,
        [ 0.6631,  0.1877, -1.2598,  ..., -0.3320,  0.4946, -0.2732],
        [ 0.6572, -0.2211, -1.8457,  ...,  0.4324, -0.1963,  0.2930],
        [ 0.5288, -0.8281, -1.2227,  ...,  0.6743,  0.3567,  0.2800]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0439,  0.0142,  0.0139,  ..., -0.0072, -0.0147,  0.0121],
        [ 0.0868,  0.0569,  0.1135,  ...,  0.0198,  0.6367, -0.0392],
        [-0.1458, -0.1207,  0.4419,  ..., -0.2314,  0.1338,  0.0014],
        ...,
        [-0.0737, -0.2852, -0.2976,  ..., -0.1164,  0.4631,  0.1160],
        [-0.0170, -0.0641, -0.1622,  ..., -0.0064, -0.0968, -0.0309],
        [-0.0401, -0.1322, -0.2068,  ..., -0.1284, -0.2642,  0.5254]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0527,  0.0212,  0.0773,  ...,  0.0079,  0.0040, -0.0141],
        [-0.7227, -1.5684,  1.3477,  ...,  0.8096, -1.2588,  0.1467],
        [-1.4697, -1.1494, -0.0433,  ...,  0.5249,  0.1492,  0.6787],
        ...,
        [ 0.5552,  0.8574,  0.3140,  ..., -0.5698, -0.0862,  0.7856],
        [-1.2061, -0.7700, -0.0645,  ..., -0.0255,  0.3691, -0.4673],
        [-0.0506, -0.6206,  0.0386,  ...,  0.2595, -0.5601, -0.1306]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0013,  0.0426,  0.0022,  ...,  0.0597, -0.0145, -0.0406],
        [ 0.0493,  0.0328,  0.0588,  ...,  0.0216, -0.1019, -0.0260],
        [-0.0862, -0.0947, -0.0365,  ...,  0.0267, -0.0074,  0.1327],
        ...,
        [-0.1133,  0.0212,  0.1620,  ...,  0.1035,  0.1516,  0.0800],
        [ 0.2274, -0.0107,  0.2095,  ..., -0.1511,  0.0850,  0.0911],
        [ 0.2593,  0.0345,  0.2201,  ..., -0.1871,  0.1842,  0.0189]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0919,  0.0318,  0.1077,  ...,  0.0386,  0.0204, -0.0593],
        [ 0.2250,  0.8428, -0.1886,  ..., -0.4717,  0.2612, -0.6694],
        [-0.1151, -0.1321,  0.1309,  ..., -0.4404,  0.9609,  0.4604],
        ...,
        [-1.3301,  0.2566,  0.2988,  ...,  0.7705, -0.0925,  0.6685],
        [-0.5010, -0.1605,  0.0624,  ..., -0.1186, -0.3657,  0.0458],
        [-0.7642, -0.3066, -0.1406,  ..., -0.2708, -0.2756,  0.8618]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0312,  0.0210,  0.0273,  ...,  0.0017,  0.0343,  0.0224],
        [-0.1620, -0.0870, -0.2491,  ...,  0.0093, -0.2637, -0.3171],
        [-0.0890, -0.1453, -0.1456,  ...,  0.3303, -0.3633, -0.0812],
        ...,
        [ 0.2688, -0.0344,  0.4004,  ...,  0.1076,  0.1447, -0.3411],
        [-0.4705,  0.2593, -0.1388,  ..., -0.1824, -0.0078, -0.1664],
        [-0.3425,  0.3521,  0.3059,  ..., -0.3066,  0.2432, -0.0419]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0090, -0.0545, -0.0031,  ...,  0.0052, -0.0282, -0.0130],
        [ 0.0519,  0.8647,  0.1011,  ...,  0.2036,  0.5728, -0.3752],
        [ 0.3376,  0.3989,  0.6011,  ...,  0.5249, -0.0286, -0.5444],
        ...,
        [-0.1760,  0.3716, -0.3135,  ...,  0.1755,  0.3220,  0.0995],
        [ 0.1993,  0.5015, -0.3479,  ..., -0.4568, -0.3035,  0.7012],
        [-0.0876, -0.2266,  0.1054,  ...,  0.0560, -0.1475, -0.2827]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0152,  0.0170, -0.0175,  ...,  0.0329,  0.0258, -0.0470],
        [ 0.0286,  0.0266,  0.0380,  ...,  0.0442,  0.0138, -0.0023],
        [ 0.0812, -0.1349,  0.1100,  ..., -0.0912, -0.0658,  0.0143],
        ...,
        [-0.0247,  0.0195, -0.0552,  ..., -0.0320,  0.0043, -0.0826],
        [-0.1119,  0.1307, -0.0651,  ..., -0.0021,  0.1106,  0.1339],
        [-0.0323, -0.0302,  0.0551,  ..., -0.2213,  0.0142,  0.0640]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0555, -0.0491, -0.1494,  ...,  0.0458, -0.0645,  0.0310],
        [ 0.3774, -0.6914,  0.0503,  ...,  0.1971,  0.3364,  0.2622],
        [ 0.3181,  0.0505,  1.0137,  ...,  0.7578,  0.1945,  0.1149],
        ...,
        [-0.7832, -0.1995,  0.1726,  ...,  0.0149,  0.3367, -0.0837],
        [-0.6943, -0.9312,  0.0749,  ...,  1.0879,  0.0789,  0.2230],
        [-0.3003, -0.5186, -0.6221,  ...,  0.8413, -0.0550, -0.1455]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 1.0895e-02,  2.9922e-02, -8.2779e-03,  ..., -3.0117e-03,
          4.8256e-03, -2.4772e-04],
        [-8.2458e-02,  3.8354e-01, -3.3765e-01,  ...,  9.8755e-02,
          1.2805e-01,  2.3474e-01],
        [-2.8345e-01,  3.1226e-01, -4.7876e-01,  ...,  9.8877e-02,
          1.7395e-01, -3.0396e-01],
        ...,
        [ 3.6548e-01,  8.4106e-02, -2.5903e-01,  ...,  4.0039e-02,
         -1.0638e-01, -4.3042e-01],
        [ 2.7298e-02, -9.3750e-02, -3.6450e-01,  ..., -1.8872e-01,
          1.0712e-01, -5.8807e-02],
        [-3.6041e-02,  8.1177e-02,  1.0547e-01,  ..., -5.5267e-02,
          2.7612e-01, -7.0477e-04]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.2229, -0.0225, -0.0264,  ...,  0.0164, -0.0159, -0.0029],
        [-0.6943, -0.2981,  0.1002,  ..., -0.2010, -0.3574, -0.3567],
        [ 0.3513,  0.8950, -0.3552,  ...,  0.1161,  0.0346, -0.0831],
        ...,
        [ 0.2544,  1.8262,  0.3479,  ...,  0.7759, -0.2466,  0.0518],
        [ 0.0954,  0.8613, -0.3237,  ..., -0.1398, -0.0504,  0.0232],
        [-0.3723,  0.8721, -1.1211,  ...,  0.2369, -0.1287,  0.4670]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0101, -0.0428, -0.0026,  ...,  0.0335,  0.0173, -0.0022],
        [ 0.1085,  0.1744,  0.0014,  ..., -0.0270, -0.0667, -0.0461],
        [ 0.0091,  0.0651, -0.0904,  ..., -0.0178, -0.1138, -0.0804],
        ...,
        [-0.0170,  0.0823,  0.0572,  ...,  0.0382,  0.0806,  0.0479],
        [-0.5249,  0.5513,  0.0395,  ...,  0.0336,  0.0815,  0.2125],
        [-0.2610,  0.1813,  0.0665,  ...,  0.1008,  0.0529, -0.3113]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0186,  0.1421, -0.0163,  ...,  0.3291,  0.0475, -0.1107],
        [-0.9604, -0.4417, -0.7251,  ...,  0.9746, -0.3916, -0.4636],
        [-0.0291, -0.8013, -0.9146,  ..., -0.6025, -0.0165,  0.4395],
        ...,
        [ 0.0514,  0.0639, -0.4272,  ..., -0.4607,  0.1170, -0.5063],
        [ 0.1324,  0.7295,  0.0622,  ..., -0.8740,  0.1530,  0.0880],
        [-0.2053,  1.3574, -0.5195,  ..., -0.5210, -0.0148, -0.3235]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0646,  0.0158, -0.0323,  ..., -0.0153,  0.0061,  0.0131],
        [ 0.2634,  0.1584, -0.1991,  ...,  0.0366,  0.3325, -0.4272],
        [ 0.1802,  0.1140, -0.3293,  ...,  0.2571,  0.0194,  0.0759],
        ...,
        [ 0.1769,  0.1281,  0.1119,  ..., -0.1511,  0.2087,  0.0427],
        [-0.1056, -0.4688, -0.0763,  ..., -0.0197,  0.0296,  0.1001],
        [ 0.0889, -0.2759, -0.1117,  ...,  0.2349,  0.1226, -0.3369]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.3657, -0.3374,  0.2446,  ..., -0.0061, -0.0071, -0.0034],
        [-0.1226, -0.2286, -0.0850,  ..., -0.5625,  1.5371,  0.9990],
        [ 0.4968, -0.2124, -0.2542,  ..., -0.1348, -0.6562, -1.0283],
        ...,
        [ 0.0094,  0.1580, -0.0618,  ...,  0.9722,  0.0775, -0.1632],
        [-0.1836, -0.1220,  0.4529,  ...,  0.0446, -0.4841,  0.3809],
        [ 0.1327, -0.2820,  0.4026,  ..., -0.5015, -1.0547,  0.6743]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0109,  0.0147, -0.0062,  ...,  0.0251,  0.0705, -0.0016],
        [-0.0454,  0.0262, -0.0567,  ...,  0.0379,  0.0410, -0.0300],
        [-0.0994, -0.1304,  0.0804,  ..., -0.0167, -0.0020, -0.0978],
        ...,
        [-0.0714, -0.1053, -0.0620,  ..., -0.0221, -0.0287, -0.0899],
        [-0.1251, -0.4175, -0.1168,  ..., -0.2394, -0.3965, -0.2830],
        [ 0.0159, -0.3813, -0.1554,  ..., -0.2379, -0.1361, -0.2117]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0115, -0.0347, -0.0626,  ...,  0.0995, -0.0989, -0.0822],
        [-0.4580, -0.2356,  0.1573,  ..., -0.3850, -0.2343, -0.5215],
        [-0.0351, -0.5171,  0.0807,  ..., -0.8711,  0.0311,  0.4429],
        ...,
        [ 0.1438,  0.0523,  0.6919,  ..., -0.4961,  0.0876, -0.5298],
        [ 0.5229, -0.5337, -0.1246,  ..., -0.1373,  0.9541,  0.1154],
        [ 0.3259, -1.0742, -0.1627,  ..., -1.0479, -0.1327,  0.0682]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 1.1269e-02,  2.6774e-04,  1.3397e-02,  ...,  9.5520e-03,
          5.4749e-02, -1.0933e-02],
        [-1.3757e-01, -1.9617e-01, -1.5344e-01,  ...,  1.2866e-01,
         -4.5581e-01,  2.0886e-01],
        [ 6.7334e-01, -2.0984e-01, -1.4673e-01,  ...,  5.7678e-02,
         -5.1361e-02,  2.3816e-01],
        ...,
        [-4.3457e-01, -6.8164e-01, -1.9373e-01,  ..., -2.9126e-01,
         -2.7002e-01, -1.0474e-01],
        [ 1.9189e-01, -1.2732e-01,  2.0798e-02,  ..., -8.4595e-02,
         -4.4702e-01, -2.2461e-02],
        [ 8.6609e-02, -4.8413e-01, -1.6846e-01,  ..., -1.1591e-01,
         -7.7686e-01, -3.0469e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-1.0132e-01,  1.6235e-01, -2.8183e-02,  ..., -2.2087e-03,
          1.0651e-02, -7.3318e-03],
        [-1.3098e-01, -8.3301e-01, -5.9375e-01,  ...,  1.5979e-01,
          3.2861e-01, -3.2959e-01],
        [ 1.8176e-01, -4.7925e-01, -4.3011e-04,  ..., -3.1006e-01,
         -2.0142e-02,  9.5154e-02],
        ...,
        [-5.5206e-02, -3.1128e-01, -7.7246e-01,  ...,  5.6396e-02,
         -6.6113e-01,  1.1279e+00],
        [-6.8457e-01,  7.7686e-01, -8.3008e-01,  ...,  6.3867e-01,
         -7.2852e-01, -8.5938e-02],
        [-5.3955e-01,  4.8535e-01, -3.6133e-01,  ...,  6.9580e-01,
         -5.4199e-01, -8.4473e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0126,  0.0376, -0.0041,  ..., -0.0165,  0.0579, -0.0172],
        [-0.1024,  0.0257,  0.0595,  ...,  0.0118,  0.0251, -0.0496],
        [-0.1108, -0.0100,  0.0059,  ...,  0.0316,  0.0408, -0.0166],
        ...,
        [-0.0248,  0.1588,  0.0220,  ..., -0.2747,  0.1952,  0.3274],
        [-0.2434, -0.0565, -0.2722,  ..., -0.3506,  0.0191,  0.2202],
        [-0.2554,  0.2379, -0.2581,  ..., -0.2598,  0.2644,  0.2037]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1375, -0.1154, -0.0079,  ...,  0.0717, -0.0056,  0.0898],
        [-0.0026, -0.4817,  0.6055,  ...,  0.0244, -0.3811, -0.4004],
        [-0.0740,  0.0845,  1.2168,  ...,  0.5430, -0.5034, -0.8853],
        ...,
        [-0.2040, -0.2688,  0.0428,  ...,  0.2942, -0.0410, -0.2485],
        [-0.5361, -0.1958,  0.9556,  ..., -0.1129,  0.7124,  0.2522],
        [ 0.0050,  0.4553,  0.8877,  ..., -0.0726,  0.2705,  0.2184]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0145, -0.0051, -0.0032,  ...,  0.0630,  0.0298,  0.0175],
        [ 0.2651, -0.0931, -0.1656,  ...,  0.3320, -0.3789, -0.2991],
        [-0.4131, -0.2400,  0.0130,  ..., -0.6973, -0.4961,  0.3450],
        ...,
        [ 0.1342, -0.1694,  0.0065,  ..., -0.2224, -0.3367, -0.2983],
        [-0.2400, -0.0648,  0.3875,  ..., -0.0274,  0.0191,  0.1605],
        [-0.0480,  0.3032,  0.2893,  ..., -0.1321, -0.2229,  0.5107]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0950,  0.0403,  0.0022,  ..., -0.0038, -0.0350,  0.0300],
        [ 0.1094,  0.7803, -0.6201,  ...,  0.1440, -0.4570,  0.3000],
        [ 0.2174,  0.4250, -1.5273,  ...,  0.5039,  0.7139,  0.3237],
        ...,
        [-0.5449, -0.6255,  0.2410,  ...,  0.4797, -0.0744,  0.5156],
        [ 0.6909,  0.1715,  1.1855,  ..., -0.1914, -0.4441, -0.7290],
        [-0.2612,  0.5186,  0.7354,  ..., -0.1013, -0.0643, -0.1140]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0237, -0.0465,  0.0245,  ...,  0.0385,  0.0486,  0.0065],
        [ 0.0239, -0.0094,  0.0343,  ...,  0.0359,  0.0151,  0.0621],
        [-0.0430, -0.0779, -0.0919,  ...,  0.0773, -0.1008, -0.0465],
        ...,
        [ 0.0721, -0.0524,  0.0261,  ..., -0.0301,  0.1404, -0.2307],
        [-0.0296, -0.0640,  0.0534,  ...,  0.0308, -0.0408, -0.3674],
        [ 0.0295, -0.0199,  0.1254,  ..., -0.1963,  0.1360, -0.2391]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0091, -0.2394,  0.0226,  ...,  0.1112,  0.1162, -0.0238],
        [-0.4492, -0.9253, -0.3521,  ..., -0.0110, -0.5039,  0.1394],
        [-0.0848, -0.1964, -0.4402,  ..., -0.3362, -0.0022, -0.0184],
        ...,
        [ 0.5820, -0.4998, -0.4084,  ...,  0.6694,  0.4810, -0.1437],
        [-0.1388, -0.6919, -0.1663,  ..., -0.1852, -0.5459, -0.1760],
        [-0.2583, -0.6851,  0.1206,  ...,  0.1032, -0.3726,  0.0283]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0863, -0.0250,  0.0561,  ...,  0.0252, -0.0304,  0.0481],
        [ 0.4519, -0.0403,  0.1472,  ...,  0.1432,  0.3987,  0.2139],
        [ 0.6089, -0.0044, -0.6875,  ..., -0.2546,  0.1768,  0.3557],
        ...,
        [ 0.0837, -0.1609,  0.1436,  ..., -0.0614,  0.3169,  0.0103],
        [-0.5327, -0.3149,  0.1207,  ...,  0.1285, -0.1622,  0.0953],
        [-0.4258, -0.1290,  0.0913,  ..., -0.2437,  0.1344,  0.0415]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-5.8398e-01,  1.7500e+00,  2.0020e+00,  ..., -1.5383e-03,
         -1.6174e-02, -2.8019e-03],
        [ 4.4287e-01,  1.4111e-01, -6.0944e-02,  ...,  5.0586e-01,
         -1.6052e-01, -6.2939e-01],
        [ 6.3867e-01, -5.6201e-01, -6.5771e-01,  ...,  7.7393e-01,
         -3.7549e-01,  6.0638e-02],
        ...,
        [ 3.9648e-01,  3.7793e-01,  9.3750e-02,  ..., -2.0935e-01,
         -1.3879e-01,  1.0234e+00],
        [ 7.6416e-02,  4.2505e-01,  8.7402e-01,  ...,  3.1714e-01,
          1.7881e+00,  5.8545e-01],
        [ 3.3252e-01,  4.1333e-01,  7.5391e-01,  ...,  6.3818e-01,
          8.8135e-01,  7.7881e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0334, -0.0771, -0.0376,  ...,  0.0297,  0.0732,  0.0197],
        [ 0.0103,  0.1082, -0.2424,  ..., -0.1317,  0.1475, -0.0329],
        [ 0.0322, -0.0749, -0.0095,  ..., -0.0374, -0.0160,  0.1085],
        ...,
        [ 0.1411,  0.1749, -0.1901,  ..., -0.1689,  0.2059,  0.0276],
        [-0.5342,  0.4143, -0.1350,  ..., -0.1759, -0.2010, -0.3687],
        [-0.5063,  0.1746, -0.2452,  ..., -0.0171, -0.1398, -0.1748]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0023, -0.2749,  0.0017,  ..., -0.0301, -0.0592, -0.0472],
        [-0.0574, -0.6709, -0.8491,  ...,  0.7681,  0.0253,  0.1906],
        [-0.2983, -0.3928, -0.0948,  ...,  0.3306, -0.5518,  0.7651],
        ...,
        [ 0.7109, -0.8462, -0.1181,  ..., -0.0710, -0.4932, -0.3062],
        [ 0.3123, -0.9761, -0.9438,  ...,  0.6328, -0.2169,  0.5654],
        [ 0.2966, -0.4851, -1.4893,  ...,  0.8179, -0.7437,  0.4998]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.0365, -0.0435,  0.0443,  ...,  0.0677, -0.0064, -0.0235],
        [ 0.6611,  0.0793, -0.0325,  ..., -0.3484,  0.1273,  0.0723],
        [-0.5654,  0.1506, -0.3933,  ...,  0.1072,  0.1782,  0.3086],
        ...,
        [ 0.0334, -0.5840, -0.4036,  ..., -0.3018,  0.0989,  0.0872],
        [ 0.1346,  0.0984,  0.0217,  ..., -0.1284,  0.1660,  0.1836],
        [ 0.5732,  0.5767, -0.3425,  ...,  0.1713,  0.0803,  0.1337]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0163,  0.1180,  0.0623,  ...,  0.0345, -0.0048, -0.0110],
        [ 0.7393, -0.6753,  0.4214,  ...,  1.0967, -0.4312,  0.0634],
        [ 1.1289, -0.8047, -0.4448,  ..., -0.4658,  0.2322, -0.3220],
        ...,
        [ 0.0894, -0.2324, -0.0509,  ...,  0.8179, -0.5117, -0.1342],
        [-0.3577, -0.2155, -0.5625,  ...,  0.3406, -0.1296,  0.3545],
        [-0.8262, -0.9331, -0.1962,  ..., -0.2695, -0.4941, -0.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0265, -0.0294,  0.1379,  ...,  0.0301,  0.0549,  0.0194],
        [ 0.0712,  0.0149,  0.1564,  ..., -0.0056,  0.1271,  0.0634],
        [-0.0011, -0.0172,  0.1749,  ...,  0.0257,  0.1072,  0.0586],
        ...,
        [-0.1708, -0.2695, -0.3479,  ...,  0.1511,  0.0447,  0.1871],
        [-0.1899,  0.1019, -0.3572,  ...,  0.0585, -0.0077,  0.1873],
        [-0.1676,  0.0113, -0.0782,  ...,  0.2793, -0.2076,  0.1830]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.1792, -0.0021,  0.1025,  ..., -0.1283,  0.0077,  0.0429],
        [-1.0156,  0.1350, -0.8833,  ...,  0.1118,  0.8813,  0.3953],
        [ 0.0856, -1.0107, -0.9136,  ..., -0.1874, -0.5464, -0.1080],
        ...,
        [-0.4263, -1.1523, -0.3779,  ...,  0.0479, -0.6074,  0.1429],
        [-0.0585, -0.7866,  0.8174,  ...,  0.2642, -0.7383,  0.1829],
        [-0.3677, -0.7192,  0.9448,  ..., -0.0672, -0.7471, -0.1432]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.3127,  0.0210,  0.2181,  ...,  0.2915, -0.1556,  0.1627],
        [-0.0565,  0.1608, -0.1929,  ..., -0.6201,  0.5342, -0.3096],
        [ 0.0615,  0.6704, -0.7383,  ..., -0.1128,  0.6523,  0.1714],
        ...,
        [-0.2905, -0.2700, -0.3259,  ..., -0.8706,  0.3225, -0.0439],
        [ 0.4089,  0.5312,  0.3374,  ..., -0.0799,  0.5669,  0.3716],
        [ 0.2192,  0.0834,  0.0849,  ..., -0.0098,  0.4846,  0.1519]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.5410,  1.3223, -1.5459,  ...,  0.0042, -0.0367, -0.0166],
        [ 0.0070, -0.1379, -0.6333,  ...,  0.6763,  1.8242,  0.2607],
        [-0.0532,  0.4536, -0.8315,  ...,  0.2345,  0.4912, -0.4436],
        ...,
        [-0.1235,  0.4116,  0.7720,  ..., -0.4419, -0.2949,  0.2900],
        [-0.0523,  0.4944,  0.4062,  ...,  0.2012, -0.8130, -2.1816],
        [-0.8911,  0.4524,  0.2435,  ...,  0.5684, -1.7871, -0.7373]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0162, -0.2173, -0.0847,  ...,  0.0545,  0.1487, -0.0334],
        [-0.0724,  0.0222,  0.0380,  ..., -0.1267,  0.1627,  0.0633],
        [-0.0745,  0.0354,  0.0566,  ..., -0.1003,  0.2576,  0.1349],
        ...,
        [ 0.1617, -0.3157, -0.0266,  ..., -0.3000,  0.0192, -0.1528],
        [-0.3235, -0.4458, -0.0368,  ..., -0.1841, -0.2134, -0.2761],
        [-0.5132, -0.5405, -0.1045,  ..., -0.2036, -0.0502, -0.2920]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.1064, -0.0446, -0.1103,  ..., -0.0325,  0.2423, -0.0567],
        [ 0.1108, -0.0851, -0.6143,  ..., -1.0391, -1.0449,  0.5059],
        [-0.2478,  0.5327,  0.4031,  ...,  0.0616, -0.8711,  0.5303],
        ...,
        [-0.6860,  0.6377, -0.3301,  ...,  0.3823, -2.4277,  0.1924],
        [-0.1932, -0.1137, -0.1620,  ..., -0.1813, -1.2900, -0.0348],
        [-0.4368, -0.1665, -1.2539,  ...,  0.1096, -1.4189, -0.3889]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-0.0461,  0.8584, -0.6260,  ..., -0.5771, -0.2605,  0.0753],
        [ 0.4014,  0.5815, -0.3586,  ...,  0.0705, -0.1687,  0.3635],
        [ 0.0282, -0.2754,  0.2140,  ..., -0.8486,  0.8662,  0.4663],
        ...,
        [-0.1868, -0.1257,  0.2644,  ...,  0.3511, -0.2791, -0.1383],
        [ 0.0834, -0.4397,  0.2351,  ..., -0.4255, -1.0127, -0.9893],
        [-0.1685, -0.1016,  0.2708,  ..., -0.9204, -0.5693,  0.0079]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.3667, -0.5225,  0.3511,  ..., -0.0527, -0.0326, -0.0083],
        [-0.3413, -0.1077, -0.3542,  ...,  0.4607, -0.0723,  0.2145],
        [-0.4561,  0.3582,  0.3508,  ..., -0.2898,  0.6406,  2.0508],
        ...,
        [ 1.2822,  0.3074, -0.5361,  ...,  0.6196,  0.7969,  0.4185],
        [ 0.1395,  0.6646, -0.3171,  ...,  0.1484,  0.1605,  0.3733],
        [ 0.4124, -0.2422,  0.4395,  ...,  0.5425, -0.1505,  0.3523]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0683,  0.0973, -0.0627,  ..., -0.1399,  0.1611,  0.2830],
        [-0.2524, -0.1160,  0.0382,  ...,  0.1593, -0.1815,  0.1112],
        [-0.4675, -0.0583, -0.4619,  ...,  0.0017, -0.3591,  0.1426],
        ...,
        [-0.2595,  0.0113, -0.0440,  ..., -0.4194,  0.2827,  0.0815],
        [-0.8467,  0.3020, -0.0684,  ...,  0.0240,  0.0424,  0.5923],
        [-0.7812,  0.4001, -0.0277,  ..., -0.2406, -0.1931,  0.6709]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.3040, -1.0762, -0.1211,  ...,  0.1333,  0.0786, -0.2517],
        [ 1.1504, -0.9800,  0.1418,  ...,  0.2217, -2.4648, -0.1429],
        [ 0.8999,  0.5088, -0.4229,  ..., -0.5708, -1.8174,  0.1266],
        ...,
        [-0.4753, -0.4678, -0.8027,  ..., -0.2935, -3.7949,  0.2617],
        [-0.4248, -0.3926, -1.5283,  ...,  0.0185, -1.9463,  0.2947],
        [-0.8159, -0.6787,  0.0259,  ..., -0.5864, -2.3223, -0.0588]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 0.4109, -0.1304, -0.1823,  ..., -0.1219,  0.3105, -0.0172],
        [-0.8750,  0.9927, -0.4385,  ...,  2.3711,  0.3154,  0.7622],
        [ 0.8423, -0.2576, -0.3018,  ...,  0.3413,  0.0837, -0.4177],
        ...,
        [ 0.9321, -0.1917,  1.1787,  ...,  0.3574,  0.4790,  0.8716],
        [-1.4316,  1.2725, -0.0110,  ...,  1.4062,  0.6201,  1.3213],
        [-3.3340,  1.4941,  2.0605,  ...,  1.7920, -0.3215,  1.6152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 5.1666e-02, -1.4941e+00,  2.0488e+00,  ..., -2.4357e-03,
          1.2245e-03,  3.5057e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0004,  0.0074,  0.0033,  ...,  0.0003, -0.0120, -0.0035]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2666,  0.0644, -0.0764,  ...,  0.0981,  0.0407,  0.2023]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  3.9727,  -0.3271, -14.5078,  ..., -19.7188, -15.2188,  31.2656]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4434,  0.8198, -0.2922,  ..., -0.0625, -0.0117, -0.0324]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0095,  0.0094, -0.0123,  ...,  0.0079,  0.0029,  0.0040]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1392, -0.0995,  0.0371,  ...,  0.2766, -0.1378, -0.0008]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 46.2188,  79.6875, 103.1250,  ..., -17.5156,  49.0938,  12.4609]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2028, -0.1813,  0.7227,  ...,  0.1116, -0.1326, -0.0547]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0107, -0.0332, -0.0336,  ..., -0.0648, -0.0018, -0.0629]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0158, -0.1088,  0.0141,  ...,  0.0661,  0.3154,  0.1437]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 15.5703,  45.9688,  19.9062,  ..., -20.7188,  76.3125,  11.5156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0218,  0.5645,  0.0516,  ..., -0.0416, -0.0364, -0.0742]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0594,  0.0853, -0.1020,  ...,  0.1124,  0.0499, -0.0587]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2737,  0.1104, -0.0705,  ...,  0.2451,  0.0586, -0.0793]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  53.2812,  -44.7500,   21.3594,  ...,   46.2188,  -75.2500,
         -100.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3064, -0.2527, -0.3975,  ..., -0.7925, -0.0490, -0.0538]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0023,  0.0868, -0.0161,  ..., -0.0538, -0.0481, -0.0583]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1246,  0.2629, -0.5117,  ..., -0.0978,  0.0435,  0.0714]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-128.1250,  -40.8125,  -17.3594,  ...,  -23.5781,  107.8750,
         -119.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1080,  0.2825, -0.4653,  ..., -0.0158, -0.0580,  0.0039]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0055, -0.1122, -0.0385,  ..., -0.0284, -0.0429,  0.0082]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1147,  0.1978, -0.0145,  ..., -0.1702,  0.0013,  0.0826]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[   8.1172,   -8.4141,    5.3828,  ...,  -47.1562, -201.0000,
          -74.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2668,  0.0294, -1.4639,  ..., -0.0999,  0.1335, -0.1637]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2585,  0.0110, -0.0100,  ..., -0.0800,  0.0486,  0.1178]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2455, -0.2717, -0.0444,  ..., -0.0728, -0.0038, -0.0399]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  87.3750,  209.0000,   36.2188,  ..., -119.3750,    5.2734,
          116.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1147, -0.1189, -0.0841,  ..., -0.0183,  0.1608, -0.4128]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0630,  0.0099,  0.0119,  ...,  0.0361,  0.0229,  0.3098]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0753,  0.4072, -0.5664,  ...,  0.3723, -0.0431,  0.3015]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -13.5078,  -28.1562,   75.0625,  ...,  176.2500, -131.7500,
          140.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4934, -0.1752,  0.4231,  ..., -0.0982,  0.2137, -0.3389]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0211, -0.0584,  0.0760,  ..., -0.1301,  0.1174,  0.2051]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0765, -0.0444, -0.3892,  ...,  0.1747, -0.1469,  0.4663]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-88.8125, -43.8438, -87.7500,  ..., 157.7500, -45.9375, 198.3750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0532, -0.3706, -0.1942,  ...,  0.3118,  0.2061,  0.1362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1201, -0.0823,  0.0449,  ...,  0.0905,  0.1119,  0.0246]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2500,  0.0100, -0.3540,  ..., -0.0785, -0.2498,  0.2583]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -37.3438, -318.7500,   51.5312,  ..., -141.6250, -290.7500,
         -456.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1515, -0.5513,  0.4324,  ..., -0.1453,  0.3428, -0.3083]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1316, -0.1208, -0.0099,  ...,  0.0844,  0.0862, -0.0730]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1677, -0.3696,  0.0511,  ...,  0.1163, -0.0911,  0.0475]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 200.1250,  -31.5156,  -36.6562,  ..., -321.2500,   44.1250,
           20.7812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2103,  0.4795, -0.9014,  ...,  0.5190,  0.7935, -0.8120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0630,  0.0157, -0.0013,  ..., -0.0559,  0.0154,  0.0406]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.1000, 0.5166, 0.1598,  ..., 0.1782, 0.1501, 0.0969]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[192.7500,  41.0000, 103.4375,  ..., -37.5938,  47.4688, 302.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4038, -0.1956,  0.4170,  ...,  0.1041, -0.3044,  0.1650]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0217, -0.0885, -0.0643,  ...,  0.1941,  0.1238,  0.0695]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5205,  0.1906, -0.4302,  ...,  0.3821, -0.5762,  0.4661]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -93.3750,   96.4375,  247.5000,  ...,   48.8125,  281.0000,
         -135.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0869, -0.2617, -0.4270,  ...,  0.4978, -0.0685,  0.2350]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2118, -0.0715, -0.0992,  ..., -0.0359,  0.0303,  0.1749]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2134, -0.1473, -0.0915,  ...,  0.0379, -0.3772,  0.7778]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  91.6250,   -1.4004,   77.4375,  ...,  -12.1094, -188.7500,
         -102.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4854, -1.1660, -1.7451,  ...,  0.5591,  0.8804, -0.1691]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0046, -0.1064, -0.1100,  ...,  0.0312,  0.1913,  0.0833]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2708, -0.0333,  0.0720,  ..., -0.1642,  0.1891,  0.0970]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  41.5625,  272.5000, -117.3750,  ...,   16.6562, -295.5000,
          -20.4219]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3752, -0.3318, -0.5923,  ..., -0.7134,  0.0139,  0.2810]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0441, -0.0532,  0.0557,  ...,  0.1392,  0.0295,  0.0007]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1632, -0.3342, -0.4246,  ...,  0.5972, -0.3574,  0.5659]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 187.6250,  129.5000,  -46.0625,  ...,  236.8750,   68.5625,
         -152.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0271,  0.3982,  0.2983,  ..., -0.6377,  0.4812,  0.5420]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0159, -0.0036, -0.0219,  ..., -0.0767, -0.0098, -0.0084]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1048,  0.2258,  0.3398,  ...,  0.1334, -0.4148,  0.0829]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-365.2500,   59.6875,   32.4375,  ..., -232.5000, -137.2500,
         -165.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2023, -0.1158, -0.0356,  ...,  0.4583,  0.0048,  0.2517]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1782, -0.1420, -0.0577,  ...,  0.1902,  0.3125,  0.0474]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4192,  0.0927, -0.3076,  ..., -0.3188, -0.1175,  0.7378]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-446.7500,  410.2500,  288.5000,  ..., -379.5000,  118.2500,
            2.1914]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7832,  0.6367,  0.7554,  ..., -0.0339, -0.1637,  0.0634]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0173, -0.1180,  0.2162,  ..., -0.1876,  0.0762,  0.0485]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5229,  0.2040, -0.1533,  ...,  0.4487, -0.0409,  0.3535]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-107.2500,  278.2500,  208.7500,  ...,  150.2500,  -35.0938,
         -610.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5864, -0.1306, -0.7866,  ...,  0.1748,  0.0388, -0.1241]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0954, -0.1459, -0.3660,  ..., -0.3052,  0.1732, -0.0813]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.5332,  0.1354, -0.1462,  ..., -0.2571, -0.0762,  0.6958]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-135.8750, -406.7500,  248.8750,  ..., -447.2500, -139.7500,
          119.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2551, -0.6621, -0.1759,  ..., -1.2070, -0.2058, -0.0335]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1445, -0.1222, -0.2026,  ...,  0.2485,  0.4470, -0.0969]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1738, -0.4832,  0.4873,  ..., -0.9146, -0.1819,  0.0342]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-563.0000,  120.6875,   39.1250,  ...,  182.1250,  -66.5625,
          110.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.4844,  0.3855,  0.3225,  ...,  0.6362, -0.1826,  0.2194]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1004, -0.0461, -0.0250,  ..., -0.0573,  0.0241, -0.1075]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2800, -0.2216, -0.6533,  ..., -0.5498,  0.2112, -0.7144]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 349.0000,   64.8750, -294.5000,  ..., -179.2500, -319.2500,
           49.6875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0463, -1.0400,  1.8857,  ..., -1.0488, -0.5229, -0.2290]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0215, -0.1355,  0.4524,  ..., -0.0868,  0.0345,  0.1152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7749, -0.4980, -0.4976,  ...,  0.5142, -0.7529,  0.2388]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-377.0000,  293.7500,   52.2500,  ..., -145.3750, -104.1875,
          761.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2273,  0.3975,  0.4104,  ..., -0.0586,  0.5703, -0.4473]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1581, -0.2322, -0.1892,  ..., -0.4368,  0.1086, -0.1174]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3149,  0.0451, -0.1219,  ...,  0.5107, -0.2343, -0.3389]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-310.0000, -115.3750,  169.7500,  ..., -135.1250, -517.5000,
          360.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0266,  0.2118, -0.2996,  ...,  0.2559, -0.3762, -0.0608]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2307,  0.3525,  0.2927,  ..., -0.1145,  0.0605, -0.0089]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4619,  0.5151, -0.2213,  ...,  0.5415, -0.2874,  0.6440]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-411.0000,  -15.7891, -516.0000,  ...,  173.5000,  -53.0625,
          472.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1259, -0.1429,  0.2124,  ..., -0.8936,  0.2654,  1.2412]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2205, -0.4397, -0.0727,  ..., -0.2106, -0.1876, -0.5078]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0178, -1.2676,  0.5708,  ...,  0.2389,  0.2444, -0.2285]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  41.4375, -194.6250, -482.0000,  ...,  -91.5625, -295.5000,
         -274.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.3799,  0.1777,  0.7832,  ...,  0.5269, -0.4021,  0.8726]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0540,  0.0068, -0.3291,  ..., -0.1034,  0.2074, -0.0167]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3784, -0.8447, -0.1620,  ..., -0.3835,  0.5254, -0.8857]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  77.1875,  250.0000,  689.0000,  ...,  420.7500, -533.0000,
         -279.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.1709, -0.0489, -1.0771,  ..., -0.1065,  0.0382,  1.1426]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0800, -0.2012, -0.0124,  ..., -0.5464,  0.1655, -0.2054]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1561, -0.4509, -0.4873,  ..., -0.7202, -0.6597, -0.1488]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 736.5000, -388.2500, -104.7500,  ..., -443.5000,  220.8750,
         -160.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0457, -0.5083, -0.4998,  ...,  1.2832, -0.1696,  0.4910]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.6216, -0.0272,  0.3376,  ..., -0.2449, -0.1082,  0.5054]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4412, -0.1204, -0.2205,  ..., -0.2482, -0.5479, -0.3430]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-407.7500,  303.0000, -816.0000,  ..., -295.5000,  666.0000,
           76.5625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.5342,  0.0217, -0.0125,  ..., -0.6348, -0.7178,  0.9326]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1473,  0.0835, -0.5283,  ...,  0.1680,  0.7856, -0.1565]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0025,  0.0998,  0.2122,  ..., -0.3293, -0.5171,  0.2915]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -695.0000,  -116.8750, -1473.0000,  ...,   317.5000,   430.7500,
           122.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0596, -0.0729, -1.1299,  ...,  0.3528,  1.9375,  0.8584]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3521, -0.3579,  0.5747,  ..., -0.3076, -0.4988,  0.5366]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2224, -0.1100,  0.3198,  ..., -0.8701, -0.2012,  0.1848]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  69.8125, 1452.0000, -758.0000,  ...,  348.0000, -492.5000,
         -829.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8813, -0.0115, -0.5781,  ...,  0.6938, -0.1478,  0.6021]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.8281, -0.2163,  0.2357,  ...,  0.0101,  0.1943,  0.2744]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.3623,  0.7993,  0.0316,  ..., -0.1348, -2.1367,  0.4402]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 1038., -2764.,   609.,  ...,  1229., -2282.,  -696.]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1206, -0.8335,  1.4023,  ..., -0.0016,  0.0022,  0.0026]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-2.9335e-03,  5.6000e-03,  5.7907e-03,  ...,  2.5845e-03,
         -7.5073e-03, -7.4446e-05]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1570,  0.0554, -0.0728,  ...,  0.0873,  0.0514,  0.0512]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-20.8125, -18.7656,  26.9531,  ...,  -3.8730,   3.7988,   7.9219]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3804,  0.1355,  0.0151,  ...,  0.0013, -0.0327, -0.0044]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0327,  0.0227, -0.0273,  ...,  0.0100, -0.0002,  0.0196]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0196, -0.2150,  0.0861,  ...,  0.0313, -0.0298, -0.1456]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -67.4375,  -56.5312,  136.2500,  ...,  144.6250,   71.8125,
         -158.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1799, -0.7134,  0.2467,  ..., -0.2129,  0.9136, -0.2710]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0303, -0.0229, -0.0820,  ..., -0.0579,  0.0664, -0.0259]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2007, -0.0360,  0.2371,  ...,  0.1750,  0.0615,  0.0724]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[114.6250, -13.5234,  57.3438,  ..., -88.8750, 112.5000, -11.0859]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0860,  0.3157, -0.3921,  ...,  0.0190,  0.0446, -0.0767]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1086,  0.0622, -0.1931,  ...,  0.1193,  0.1143,  0.0700]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1421, -0.3201, -0.1621,  ...,  0.2744,  0.0347,  0.4707]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 85.1250,  66.3750,  35.3438,  ..., -36.3438, -92.2500, -15.3125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6182,  0.2664, -0.0125,  ...,  0.4614, -0.0864, -0.1031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0204,  0.0660, -0.0353,  ..., -0.0066, -0.0921, -0.1027]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2485,  0.0864, -0.1611,  ...,  0.1356,  0.0359,  0.1044]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -90.9375, -189.3750,  -65.2500,  ...,  193.6250,   33.6562,
           -2.1367]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3406,  0.0235, -0.2458,  ...,  0.1119,  0.1493,  0.0052]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0624, -0.1074, -0.0634,  ..., -0.0013, -0.0339, -0.0490]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1329, -0.1865,  0.0778,  ..., -0.0444,  0.2490,  0.1381]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-24.6406, 110.5625, 148.7500,  ..., -68.3750,  33.6250, 121.3750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0234,  0.7490, -0.6123,  ...,  0.1765,  0.0498, -0.2043]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2434, -0.0520, -0.0711,  ..., -0.0360,  0.0402,  0.1364]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2402,  0.2358,  0.0044,  ..., -0.4907,  0.0895, -0.3101]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  -7.9141,  135.6250,   46.4688,  ...,  -77.4375,  186.3750,
         -191.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1033,  0.2988, -0.9790,  ..., -0.2061,  0.0432,  0.0793]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0109, -0.0747, -0.0719,  ...,  0.0551,  0.0790,  0.2333]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0462, -0.3499, -0.1913,  ...,  0.0762, -0.0273,  0.3779]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[   5.5234, -228.1250,   46.2812,  ...,  122.2500,  -40.8438,
          -14.0547]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4746, -0.9229,  1.0586,  ..., -0.1151, -0.3076,  0.1205]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0072, -0.0646, -0.0285,  ..., -0.0456,  0.0767,  0.2018]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2321, -0.4971, -0.1973,  ..., -0.1066,  0.0044, -0.0084]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  55.7188,    5.6133,  -19.0469,  ..., -304.2500, -145.8750,
          -74.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8296, -0.6318,  0.4885,  ...,  0.0714,  0.4790, -0.0291]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1635, -0.0612, -0.0297,  ...,  0.1632,  0.1022,  0.1285]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2316,  0.6997, -0.2979,  ..., -0.2195,  0.7998, -0.0405]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  -8.5938,  -34.9375,  114.5000,  ...,   26.0625, -202.8750,
         -274.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4670,  0.0601,  0.2834,  ..., -0.1782, -0.0977, -0.0487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1160, -0.0489,  0.0170,  ..., -0.0352,  0.0291, -0.0558]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0918, -0.5205, -0.2343,  ...,  0.4939, -0.1719,  0.1107]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -91.8750,  231.2500,  -26.5156,  ...,  -18.7656, -127.5625,
          -31.8438]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8115,  0.6025, -0.3416,  ...,  0.7163,  0.6006, -0.5840]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0256, -0.0164,  0.1356,  ..., -0.1226,  0.0002,  0.1111]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3174,  0.2927,  0.1035,  ...,  0.0252,  0.0531,  0.2004]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-41.6875,  12.0078,  -6.9180,  ..., 418.2500, -66.6250, 260.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5918, -0.0527,  0.0068,  ...,  0.6377, -0.0516,  0.0894]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0570, -0.0721, -0.0074,  ...,  0.1628,  0.1801,  0.1205]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4470,  0.2097, -0.3362,  ...,  0.5469,  0.0062,  0.1340]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -87.9375,  -75.1875,   38.4062,  ..., -219.0000, -185.1250,
         -280.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5752,  0.6982, -0.4443,  ...,  0.3850,  0.0652,  0.1785]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1744, -0.2869,  0.0331,  ..., -0.2944,  0.2407,  0.1599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1599,  0.1670,  0.3669,  ...,  0.1276, -0.8223, -0.1841]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-135.3750, -333.7500,  260.7500,  ...,  -38.8750,  -95.0000,
          175.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6577, -0.7759, -0.2097,  ..., -0.0275,  0.4099,  0.0273]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0162, -0.1526,  0.0428,  ...,  0.1547,  0.1541,  0.1876]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3159, -0.1141,  0.1377,  ..., -0.0102,  0.4878,  0.2025]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-482.5000,   35.1250,   33.3438,  ...,  -21.6875,    9.3125,
         -199.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2070,  0.4878, -0.4900,  ..., -0.3965, -0.3047,  0.4102]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0026,  0.0364, -0.0098,  ...,  0.0827,  0.1061,  0.0138]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1191, -0.2094, -0.2686,  ...,  0.2365, -0.1200,  0.1460]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 319.7500,  239.2500, -105.1875,  ...,  399.7500, -374.0000,
          288.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.8945, 0.2496, 0.3843,  ..., 0.1393, 0.1625, 0.2076]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0254, -0.1043,  0.0710,  ..., -0.1625, -0.0455,  0.1045]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3376, -0.1144, -0.1661,  ...,  0.2036,  0.2250, -0.0260]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 301.2500,  107.5625,   69.6875,  ..., -203.7500,   -9.9453,
          243.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3279, -0.1292,  0.0645,  ...,  0.4207, -0.7529, -0.0461]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1148, -0.3765, -0.0146,  ...,  0.0321,  0.2053, -0.0930]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0580, -0.3513,  0.0924,  ...,  0.1081,  0.5088,  0.3220]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-266.0000,  215.3750,  109.2500,  ...,    2.5762,  -21.8594,
         -268.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0082,  0.4487,  0.0060,  ...,  1.2852, -0.4116,  0.7588]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2323, -0.0989,  0.2727,  ..., -0.0436,  0.0056,  0.0180]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0198, -0.5200, -0.5259,  ..., -0.1749, -0.0620, -0.3254]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 222.7500,  582.5000, -104.2500,  ...,  138.1250, -150.3750,
          -47.4062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2283, -0.8857, -0.0540,  ..., -0.5732,  0.0062,  0.8438]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0251, -0.1118, -0.3467,  ..., -0.4187,  0.1885, -0.2468]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.5215,  0.3889, -0.4280,  ..., -0.0869,  0.0892,  0.9810]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[   4.1445, -318.7500, -120.1250,  ..., -627.5000, -197.6250,
          405.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1449,  0.1216,  0.8896,  ...,  0.1632,  0.2598, -0.6919]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3215, -0.1038, -0.2151,  ...,  0.1660,  0.2988, -0.2820]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1615, -0.7817,  0.4702,  ..., -0.1844, -0.8003, -0.7900]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-162.6250,  340.0000,  149.1250,  ..., -231.3750,  361.2500,
          387.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0670, -0.3064, -0.1113,  ...,  0.5444, -0.0875, -0.1660]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0254, -0.2101,  0.2125,  ...,  0.0516,  0.2307,  0.1456]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3628,  0.1360,  1.2129,  ..., -0.6128, -0.4490,  0.9302]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -70.8750, -655.0000,  409.5000,  ..., -825.0000, -318.5000,
           40.5312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4141, -0.6543,  0.2217,  ..., -0.7578, -0.4995, -0.2925]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0737, -0.2698,  0.2366,  ..., -0.2734,  0.2433, -0.3362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3914, -0.0771, -0.5322,  ..., -1.2959, -0.3350, -0.1667]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-323.0000,  211.8750, -286.5000,  ...,  354.2500, -304.7500,
          305.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6587,  0.1846,  0.2031,  ..., -0.3777, -0.2705, -0.2971]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3574, -0.2683, -0.0803,  ..., -0.4575,  0.0876, -0.6162]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0909, -1.3809, -0.3184,  ...,  0.0687,  0.0143, -0.5376]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-434.0000, -165.8750, -279.2500,  ...,  386.0000, -166.3750,
          417.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8491,  0.1647, -0.0220,  ...,  0.0051, -0.9722, -1.0254]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0148,  0.3862,  0.5322,  ...,  0.4282, -0.1136,  0.2761]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3611,  0.4016,  0.1088,  ..., -0.5093,  0.1345,  0.2264]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -95.1250,   -3.7344, -215.0000,  ...,  114.0000, -218.6250,
          156.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0701, -0.2115, -0.0956,  ...,  0.0202,  1.0420, -0.4365]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1957, -0.3977,  0.1702,  ..., -0.4966, -0.5063, -0.4504]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.6426, -0.1294, -0.0289,  ..., -0.7505,  0.6562, -0.3938]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-338.0000,  559.0000,   12.0703,  ...,  144.2500, -759.5000,
          424.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7163,  0.4700,  0.3647,  ..., -0.2477,  0.1124,  1.0166]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1481, -0.2456, -0.2415,  ..., -0.4722,  0.1948,  0.1499]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5239, -0.1879,  0.5786,  ..., -0.3694,  0.5903, -0.2737]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 520.0000,  413.0000, -153.6250,  ..., -930.0000, -561.0000,
         -123.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0870,  1.1484,  0.1687,  ..., -0.0489, -0.0425,  0.8271]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.5312, -0.1022,  0.3237,  ..., -0.1230, -0.0988, -0.1855]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1195, -0.5552,  0.1271,  ...,  1.1387, -0.0174,  0.4924]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  27.6875, -404.0000,  745.0000,  ..., -272.0000, -584.0000,
         -745.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1486, -0.3909,  0.1962,  ..., -0.0315,  0.8887,  1.5273]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1965,  0.1862, -0.0942,  ..., -0.5288, -0.6294,  0.9150]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1846, -0.8755, -0.6143,  ...,  0.1658, -0.4634, -0.7993]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 650.0000, -499.0000, -116.8750,  ...,  293.7500,  458.0000,
         1288.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2471, -0.3374, -0.8804,  ...,  1.0098, -0.8682, -0.9932]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1750, -0.2776, -0.7759,  ...,  0.0355,  0.6123, -0.1262]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4104,  0.0673, -0.7280,  ...,  0.2634, -0.5474, -0.1099]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-242.3750,  511.7500,   95.5625,  ..., -367.0000, -503.5000,
           68.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2600,  0.4062, -0.1360,  ..., -0.6777,  1.9443,  0.1387]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0114, -0.4541,  0.4333,  ...,  0.2524,  0.1825, -0.9131]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3857,  0.2542,  0.1559,  ..., -0.1465, -0.4167, -0.6377]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-415.2500, -170.8750,  664.0000,  ...,  136.0000,  921.0000,
          108.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6777, -0.2852,  0.0936,  ..., -0.3042,  0.2600,  0.6133]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.8760, -0.3308, -0.1404,  ...,  0.2467,  0.2104,  0.4741]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1888, -0.4456, -0.5801,  ..., -0.1571, -3.3027, -0.3513]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -761.,  -930., -1060.,  ...,  -221.,  -817., -1432.]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 2.7075e-01, -8.3203e-01,  1.8730e+00,  ..., -4.1313e-03,
          1.5526e-03,  6.8760e-04]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0019,  0.0060,  0.0043,  ...,  0.0029, -0.0065, -0.0004]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2073, -0.0323, -0.0895,  ...,  0.0470,  0.0153,  0.0447]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-31.8594, -11.3359,  16.9219,  ...,   9.3516,   5.4805,   1.1328]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3232,  0.1141, -0.4370,  ..., -0.0181, -0.0186,  0.0259]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0316,  0.0190, -0.0175,  ...,  0.0029, -0.0077,  0.0231]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0522, -0.3271,  0.0341,  ...,  0.0792,  0.0367,  0.0903]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-144.6250,   36.3125,  105.9375,  ...,  114.3125,   43.0312,
          -69.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1670, -0.7285,  0.7749,  ..., -0.3137,  0.7617, -0.3921]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0227, -0.0213, -0.0964,  ..., -0.0277,  0.0612, -0.0231]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2059, -0.0671,  0.0923,  ...,  0.0988,  0.2449, -0.0852]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 53.6562, -32.0938, -13.8828,  ..., -83.1875,  63.5000,  -9.8516]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2207,  0.2458, -0.2605,  ...,  0.0205,  0.0709, -0.1234]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0245,  0.0563, -0.1537,  ...,  0.0897,  0.1105,  0.0704]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1885, -0.2410,  0.0042,  ...,  0.1996, -0.0385,  0.3696]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -50.3750,  -33.1875,   32.5312,  ...,  -53.0312, -125.8750,
           35.9062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.5234, 0.0081, 0.4956,  ..., 0.4883, 0.0018, 0.0094]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0027,  0.0352, -0.0216,  ..., -0.0540, -0.1006, -0.0810]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4133, -0.0436, -0.2372,  ..., -0.0630, -0.0795, -0.0082]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  -2.7383,  -11.8984, -167.7500,  ...,  178.0000,   95.0000,
          -18.7344]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0739,  0.4338, -0.3660,  ..., -0.0068,  0.0606, -0.1530]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0800, -0.0811, -0.0237,  ...,  0.0150, -0.0097, -0.0709]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0933,  0.0341,  0.0500,  ...,  0.0865,  0.1031,  0.0831]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-21.3750, -46.6875, 150.8750,  ..., -25.8281, -50.1562,  91.8125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2915,  0.9785, -0.7881,  ..., -0.0720,  0.1124, -0.3887]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2378, -0.0932, -0.0703,  ...,  0.0050,  0.0080,  0.1196]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0492,  0.2825,  0.1605,  ..., -0.2484,  0.2563, -0.2021]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-100.6875,  249.1250,    8.8594,  ...,   23.1250,   65.9375,
          -96.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0276,  0.0885, -0.7915,  ..., -0.2864,  0.0839,  0.1138]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0203, -0.0187, -0.0726,  ...,  0.0986,  0.0556,  0.1411]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1697,  0.1906,  0.0615,  ...,  0.0919,  0.1345, -0.0491]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-189.1250,  -81.1250,  112.0000,  ...,  153.8750,   15.0469,
           -0.5503]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3193, -1.0332,  0.7925,  ..., -0.1917,  0.2341, -0.0171]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0293,  0.0087, -0.0417,  ...,  0.0600,  0.0750,  0.1896]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5137, -0.3667, -0.2200,  ..., -0.2450,  0.3228, -0.1813]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 225.6250,  162.1250,  168.1250,  ..., -138.7500,  -12.5234,
          -34.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7656, -0.3059,  0.5122,  ..., -0.5005,  0.1665, -0.3081]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1964, -0.0662, -0.0525,  ...,  0.0781,  0.0800,  0.0806]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0007,  0.5435, -0.2690,  ...,  0.0623,  0.5625,  0.3379]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 135.1250,   50.5312,   90.3125,  ..., -106.8125, -125.0000,
          -48.4062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1846, -0.1660,  0.1262,  ..., -0.1934,  0.0179, -0.0494]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0189, -0.0056,  0.0346,  ..., -0.0567,  0.0549, -0.0191]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0579, -0.4988, -0.3000,  ...,  0.5132,  0.0400,  0.0190]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-148.2500, -199.0000,  129.2500,  ...,   50.1875, -255.2500,
         -168.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9517,  0.9277, -0.2739,  ...,  0.2113,  0.7676, -0.6924]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0048, -0.1041,  0.0756,  ..., -0.0254,  0.0091,  0.1139]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0415, -0.0332,  0.2220,  ...,  0.4268, -0.1967,  0.2622]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 87.5625, 128.7500, 276.7500,  ...,  44.1250, -91.2500, 233.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3669, -0.1433, -0.1676,  ...,  0.6064,  0.1708,  0.0816]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0716, -0.0184, -0.0245,  ...,  0.1777,  0.1098,  0.1278]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3123,  0.4465, -0.0943,  ...,  0.1942,  0.0848,  0.0127]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -25.0156, -163.8750, -148.2500,  ...,  206.0000, -186.5000,
         -432.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6377,  0.4656, -0.1680,  ...,  0.3176, -0.2473,  0.3911]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1207, -0.2585, -0.1224,  ..., -0.1242,  0.2100,  0.1140]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.6431,  0.1285,  0.6406,  ...,  0.2039, -0.7520, -0.0962]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-524.0000, -122.8125,  203.6250,  ..., -156.8750, -109.4375,
         -113.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7598, -1.0127, -0.8086,  ...,  0.8418, -0.1317, -0.3831]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1176, -0.1238, -0.0138,  ...,  0.0565,  0.0206,  0.1061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3701, -0.1232, -0.1339,  ..., -0.3132,  0.4590,  0.0147]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-207.2500,   -3.1621, -100.1250,  ...,   68.9375,  105.5000,
         -302.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0430, -0.1263, -0.1459,  ..., -0.4988, -0.3208,  0.2520]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0395, -0.1167,  0.1248,  ...,  0.1761,  0.1476,  0.0163]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4070, -0.4082, -0.3140,  ...,  0.2812,  0.0972,  0.2732]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 153.1250,  160.0000, -408.5000,  ...,  551.5000, -211.3750,
          284.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0798,  0.6494, -0.2301,  ...,  0.2690, -0.0046,  0.6890]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0815, -0.0670, -0.0551,  ..., -0.2551, -0.0804,  0.0901]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3311,  0.1593,  0.2018,  ...,  0.1389, -0.1256, -0.3083]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-260.7500,  127.8125, -160.8750,  ..., -187.6250,  -79.2500,
          275.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1646, -0.2783,  0.3040,  ...,  0.6460, -0.8750,  1.3281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1343, -0.5342, -0.1753,  ..., -0.0413,  0.3301,  0.1671]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.1476, 0.0226, 0.0974,  ..., 0.5005, 0.4351, 0.2394]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -73.5000,  199.8750,  672.0000,  ..., -261.2500,  104.8750,
          132.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3936, -0.1587, -0.4624,  ...,  0.4551, -0.3699,  0.1650]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1824, -0.0723,  0.1886,  ...,  0.0038,  0.0490,  0.1495]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1267, -0.1305, -0.2341,  ...,  0.0879, -0.2812,  0.0242]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-142.6250,  284.0000, -233.6250,  ..., -245.1250, -132.1250,
          -79.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7568,  0.0797, -0.5083,  ...,  0.0964, -0.1138,  0.5889]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1626, -0.2859, -0.2620,  ..., -0.2253,  0.0077,  0.0284]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.1680,  1.0020,  0.0388,  ..., -0.1157,  0.0372,  0.2344]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 443.7500,  685.0000,  -75.4375,  ..., -106.5000, -325.5000,
          -51.7812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5713, -0.3271,  0.9199,  ...,  0.3660,  0.6440, -1.0088]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2291, -0.2340, -0.2351,  ...,  0.3613,  0.4766, -0.2260]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3958, -0.4280,  0.3118,  ..., -0.2150, -0.4934, -0.8096]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 338.5000, -162.0000,  -89.1250,  ..., -281.0000, -248.2500,
          594.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6187, -0.0040,  0.3352,  ..., -0.2362,  0.0441, -0.4158]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2932, -0.1124,  0.1663,  ...,  0.1565,  0.1774,  0.3909]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1908,  0.3633, -0.8745,  ...,  0.5786, -0.3777, -0.0623]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-294.5000, -719.5000,  166.5000,  ..., -228.2500, -259.2500,
         -438.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0400,  0.2025, -0.4780,  ...,  0.3948, -1.4512, -2.0156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2284,  0.1271,  0.0997,  ..., -0.4568, -0.0031, -0.0862]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7285, -0.0608, -0.6152,  ..., -0.8164,  0.1633, -0.2708]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-175.6250,  113.6875, -735.5000,  ...,  135.2500,  -47.7812,
          361.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3064,  0.0660,  0.3774,  ...,  0.3831, -0.3989,  0.2163]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0119, -0.3044, -0.0229,  ..., -0.6802,  0.0412,  0.0696]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0435, -0.5347, -0.1064,  ...,  0.3943, -0.3425, -0.3994]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-774.5000,  374.7500,   70.9375,  ...,  543.5000,  -84.0625,
          797.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4775, -0.0939,  0.1979,  ..., -0.4111,  0.3962, -0.9512]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0437, -0.1399,  0.1422,  ..., -0.0246,  0.0073, -0.1118]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2424,  0.0293,  0.1816,  ..., -0.0931, -0.1212, -0.5625]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-494.2500,  160.2500, -210.2500,  ...,  232.5000, -504.5000,
          421.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5581, -0.2986, -0.3027,  ...,  0.7539,  0.5552, -0.3459]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0789, -0.4382,  0.2571,  ..., -0.2432, -0.0676, -0.2913]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.5293, -0.1643, -0.2126,  ..., -0.4019,  1.0225, -0.7422]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -31.5469, -110.0000,  578.0000,  ...,  696.5000, -114.5625,
          530.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7104,  0.4109,  0.7939,  ...,  0.9141, -1.1992,  0.1338]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1448, -0.7998,  0.0175,  ..., -0.4214,  0.4478, -0.1724]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3728, -1.2217,  0.0376,  ...,  0.0587,  0.3486, -1.0029]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 222.2500,  672.5000, -672.0000,  ..., -256.7500,  480.0000,
          250.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5405,  0.2263, -0.2209,  ..., -0.4080,  0.0175, -0.5898]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.5562, -0.2932, -0.1656,  ..., -0.2954,  0.0121,  0.0952]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0421,  0.5215, -0.3545,  ...,  0.3296, -0.3525, -0.0490]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 134.2500, -602.0000,  -40.4375,  ...,   76.5000, -844.0000,
          302.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4854,  0.2286,  0.1195,  ..., -0.1196, -1.2012,  1.0771]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3940,  0.2793,  0.4941,  ..., -0.4287, -0.1145,  0.5479]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1942, -0.5410, -0.9634,  ...,  1.0137,  0.5542,  0.1521]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 308.7500,  853.0000,  191.7500,  ...,  189.8750,   51.8438,
         -362.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6221,  0.5786, -0.1270,  ...,  0.5952,  0.1495, -0.2556]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5303, -0.0169, -0.8066,  ...,  0.3171,  0.2070, -0.3406]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1555, -0.8521,  0.6382,  ..., -0.7104, -0.5952,  0.6963]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -710.5000,   292.0000, -2031.0000,  ...,   862.5000,  -130.7500,
           308.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1193, -0.4646, -0.5557,  ..., -0.8726, -1.4678,  0.1940]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4912, -0.1660,  0.6514,  ..., -0.3557,  0.1438, -0.4919]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0650, -0.3950, -1.0889,  ..., -0.8555, -0.8291, -0.8794]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  134.6250,   523.5000, -1087.0000,  ...,  -228.6250,  -381.0000,
            11.9922]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.2285,  0.5903, -0.2052,  ...,  0.4014, -0.1020, -0.1570]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3237, -0.1676, -0.0740,  ..., -0.6348,  0.8130,  0.1669]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2932, -1.0557, -0.5845,  ...,  0.1492, -2.2344,  0.5542]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  535.5000,    38.2812,  -238.3750,  ...,   299.5000, -1431.0000,
           357.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0099, -0.4563,  1.0723,  ...,  0.0028, -0.0024, -0.0019]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0025,  0.0058,  0.0041,  ..., -0.0006, -0.0056,  0.0001]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1395,  0.0173, -0.1061,  ...,  0.0967,  0.0349,  0.0162]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-14.8906, -19.7500,  35.7500,  ...,  28.2500,  38.0938,  -3.6895]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5532,  0.0958,  0.1246,  ...,  0.0516,  0.0225, -0.0056]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0164,  0.0144, -0.0079,  ..., -0.0126,  0.0199,  0.0109]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1385, -0.2676, -0.0879,  ...,  0.1825,  0.0191,  0.0865]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-16.4531, 111.4375, -13.1953,  ..., -34.6562, -13.5781, -21.4062]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.1236, 0.1190, 1.0127,  ..., 0.1183, 0.0051, 0.0689]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0224,  0.0801, -0.0570,  ..., -0.1025, -0.0620,  0.0761]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0823, -0.1697, -0.2032,  ..., -0.0197,  0.0146,  0.2289]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-108.6250,  -16.2188,  -85.5000,  ...,  -22.4844,  -77.7500,
           25.6094]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1859, -0.4421, -0.7656,  ...,  0.2205, -0.2874, -0.0132]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0536, -0.0188, -0.0838,  ...,  0.0331,  0.1301,  0.0039]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2966,  0.0586, -0.1147,  ...,  0.1317, -0.3870,  0.0352]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  49.3750,  319.5000, -153.0000,  ...,  -68.3125,  603.0000,
         -130.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5454, -0.2766, -1.7832,  ..., -0.2089, -0.3127,  0.3892]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0796,  0.0695,  0.0299,  ...,  0.0576, -0.0473, -0.0746]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2644, -0.0089, -0.0843,  ...,  0.0510, -0.0414,  0.0574]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -705.5000,  1968.0000,  -448.0000,  ...,  -175.6250, -2828.0000,
          1493.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4780, -0.3618,  0.3142,  ..., -0.1199,  0.0112, -0.2184]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2007, -0.2747, -0.2076,  ...,  0.1649, -0.0428,  0.1760]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0591, -0.0956, -0.2620,  ...,  0.1914,  0.2915, -0.3884]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[   86.8750,  2676.0000,  -925.0000,  ..., -2196.0000,  3212.0000,
          -724.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4766, -0.9517, -0.9404,  ..., -0.0163,  0.1936,  0.0020]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2046, -0.0873, -0.1318,  ...,  0.0126,  0.0168,  0.0898]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1118, -0.1873,  0.2969,  ...,  0.1155,  0.1715, -0.3511]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-155.7500,   30.8281,  297.0000,  ..., -406.0000,  347.7500,
         -143.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1814,  0.5078, -0.1899,  ...,  0.1215, -0.1494,  0.2444]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0249, -0.1110,  0.0696,  ...,  0.1288, -0.0414,  0.2472]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0926, -0.3186, -0.0754,  ..., -0.3660, -0.2971,  0.2345]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-692.0000, -443.0000, -252.5000,  ..., -206.0000,  474.5000,
         -275.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5820, -2.0215,  0.5034,  ..., -0.2925, -0.2030, -0.5024]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0401, 0.0614, 0.0312,  ..., 0.0681, 0.2411, 0.1078]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7632,  0.1864, -0.1333,  ...,  0.1653,  0.2786,  0.5464]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 171.2500, -101.3750,  473.5000,  ..., -429.0000,  579.5000,
         -141.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5664, -0.3367, -0.5767,  ...,  0.0828,  0.1213, -0.2443]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2496, -0.1636,  0.0170,  ...,  0.1738,  0.0781,  0.2358]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0692,  0.0856, -0.1674,  ..., -0.1365,  0.0827, -0.0108]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 128.6250, -140.2500,  329.2500,  ...,   64.1875,  258.2500,
          338.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4827, -0.0006, -0.0308,  ...,  0.1344,  0.2510, -0.1536]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0657, -0.1281, -0.0097,  ..., -0.0449,  0.0448, -0.1077]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0224, -0.3933, -0.0314,  ...,  0.2620,  0.3186, -0.0019]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-101.8750,  -58.0625,  438.7500,  ...,  164.6250, -308.0000,
          116.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0602, -0.2235, -0.4316,  ..., -0.2512,  0.0350,  0.0034]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1149, -0.0065, -0.2139,  ...,  0.0156, -0.3748,  0.1580]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4397, -0.1143, -0.0333,  ..., -0.0156,  0.0483, -0.1317]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -74.6875,   68.3125,  204.0000,  ...,  -15.2109, -258.5000,
          420.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2139, -0.1187,  0.3979,  ...,  0.0492,  0.0572,  0.2727]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0550, -0.0274,  0.0712,  ...,  0.1130,  0.1176, -0.0134]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0520, -0.0850,  0.0481,  ...,  0.5166, -0.4880,  0.0975]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  99.4375, -258.2500,  181.8750,  ...,  257.2500,  -59.4688,
          223.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3132, -0.5332, -1.1631,  ...,  0.2205,  0.0017, -0.0139]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2224,  0.3572, -0.1046,  ...,  0.1299,  0.1376, -0.0372]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2496,  0.1251, -0.1034,  ...,  0.3948,  0.1620,  0.8604]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-205.7500, -112.3125,   18.2031,  ...,   47.2188, -249.7500,
          106.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8428, -0.5249,  0.1160,  ..., -0.1857, -0.3181, -1.0781]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0446, -0.0349, -0.0406,  ...,  0.2382,  0.0641,  0.1207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0090, -0.5083, -0.5054,  ...,  0.0622, -0.1273,  0.4587]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 86.8750, 154.7500, 569.0000,  ..., 212.3750, 213.7500, 164.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0773, -0.1954, -0.0910,  ..., -0.6606, -0.2056,  0.1790]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0020,  0.1814,  0.1786,  ...,  0.2168,  0.1381,  0.0417]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3660, -0.6841, -0.1521,  ...,  0.3325,  0.1042,  0.5747]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-695.5000,  219.6250,  213.0000,  ..., -201.6250,  136.2500,
           86.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0880,  0.4045,  0.0803,  ..., -0.3799,  0.0320,  0.6660]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0031,  0.0108,  0.0377,  ..., -0.0024,  0.0213,  0.0595]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0101,  0.0407,  0.0043,  ..., -0.0190,  0.2490,  0.5562]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  84.2500, -210.0000, -120.6250,  ...,  390.2500,  569.0000,
         -456.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4053, -0.4978, -0.7041,  ...,  0.0070, -0.3135,  0.3845]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0384, -0.2688, -0.0102,  ...,  0.2076,  0.2925,  0.0670]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4011, -0.3000,  0.0775,  ...,  0.1941,  0.2238,  0.0266]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-177.8750,  368.2500,   -5.4883,  ...,  144.7500, -105.9375,
         -132.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.0886, 0.5420, 0.4941,  ..., 0.1855, 0.5439, 0.0675]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1111, -0.2571,  0.2231,  ...,  0.2319,  0.1604, -0.1133]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3552, -0.1987,  0.5493,  ...,  0.2202,  0.4058,  0.4172]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 277.0000, -289.5000,  233.1250,  ...,  -61.3438,  205.6250,
            8.5859]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6982,  0.8618, -0.4614,  ...,  0.1268, -0.4192,  0.6890]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0392, -0.0815, -0.2198,  ..., -0.0104, -0.0135, -0.1050]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.9434,  0.4336,  0.0501,  ..., -0.2507,  0.6343, -0.1382]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -43.8750, -146.2500, -282.0000,  ...,  236.1250,   22.2500,
         -284.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0529,  0.0903,  0.4709,  ..., -0.2820, -0.1250, -0.4517]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2140, -0.4348, -0.0493,  ...,  0.5508,  0.4788,  0.2372]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0719,  0.2595, -0.7129,  ...,  0.2896, -0.2036, -0.5337]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -52.8750,  166.3750, -282.2500,  ..., -181.7500, -350.5000,
         -217.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1005,  0.2598, -0.5107,  ..., -0.4517, -0.3630, -0.6665]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1005,  0.0258, -0.1109,  ...,  0.0578,  0.0295,  0.0644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3970, -0.5571, -0.7759,  ..., -0.0201, -0.5415,  0.0200]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -323.7500, -1134.0000,  -258.0000,  ..., -1883.0000,  -322.0000,
           530.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3840,  0.1606,  0.0646,  ..., -0.5649,  0.9048, -0.2455]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2991, -0.2637,  0.2598,  ..., -0.4204,  0.1149,  0.2404]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3213,  0.1493, -0.4539,  ...,  0.9351,  0.2322,  0.0586]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-356.2500, -298.0000,  -50.3438,  ..., -108.2500,  -85.6250,
          251.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2339, -0.0558,  0.4500,  ...,  0.4080, -0.6504,  0.6270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4053, -0.0798,  0.2046,  ..., -0.3164, -0.3357, -0.2571]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0008,  0.2949, -0.0883,  ...,  0.5103,  0.0921, -0.2191]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 371.5000,  309.2500,  632.0000,  ..., -192.8750, -272.0000,
          289.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.3496, -1.9268, -0.6055,  ..., -0.2820,  0.2837, -0.6270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1146,  0.1680,  0.4502,  ...,  0.2517,  0.0054,  0.3057]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.0830, -0.2100, -0.5542,  ...,  0.8594,  0.7324,  0.5928]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-121.7500,  107.4375,  -37.9062,  ...,  288.2500,  -46.9062,
          -12.8438]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1095, -0.0908, -0.0266,  ..., -0.2081,  0.9932,  0.8379]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2477, -0.4102,  0.1458,  ..., -0.7808, -0.4739, -0.6865]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1438, -0.6362,  0.2595,  ..., -0.5776,  0.0072,  0.5942]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 385.7500, -388.2500, -319.7500,  ...,  905.5000,  393.5000,
          705.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4729,  0.5352,  0.4504,  ...,  1.6943,  0.0959,  0.0550]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2466, -0.3301, -0.5854,  ..., -0.3787,  0.5195,  0.5498]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0414, -0.1010, -0.0638,  ..., -0.4863,  0.3491,  1.0781]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 275.7500,  352.0000, -785.0000,  ...,  426.5000, -254.0000,
         -235.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6816,  0.0487, -1.2539,  ..., -0.5962, -1.4297,  0.7324]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2446,  0.5781,  0.0160,  ..., -0.6841,  0.1664, -0.3635]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4475,  0.3071, -0.3096,  ...,  0.2228, -0.4187,  0.0533]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-572.5000,  607.5000,  -94.5000,  ...,  383.2500,  -82.1250,
          846.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7676, -0.4951, -0.1847,  ..., -0.0262,  0.4600,  0.6909]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0732,  0.0862,  0.0920,  ..., -0.4976, -0.1558,  0.7568]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5181, -0.6133, -0.6992,  ...,  0.2151, -0.5708, -0.1790]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-235.1250,  -47.0625, -501.7500,  ...,  397.2500,  696.5000,
         2052.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0687,  0.0224, -0.1315,  ...,  0.0945,  0.2812,  2.1777]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1744, -0.0507, -0.6353,  ..., -0.1495,  0.0839, -0.0071]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.6660,  0.6177, -0.7617,  ..., -0.2737,  0.1340,  0.1753]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -434.2500,  1080.0000,    54.4375,  ...,  -275.7500, -1194.0000,
           709.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1406,  0.6079, -0.6919,  ..., -1.2090,  0.2854, -0.2281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5996,  0.3000,  0.2766,  ..., -0.2659, -0.8853,  0.5342]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0841, -0.5718,  0.4863,  ..., -0.5635, -1.6338, -0.5811]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  828.0000, -1206.0000,  -797.0000,  ...,   498.2500,  -617.0000,
           667.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0342, -0.0608,  0.3054,  ..., -0.2935, -1.0176, -0.2111]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3662,  0.0223,  0.2484,  ...,  0.2632,  0.1713,  0.6055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4199, -0.2896, -0.0884,  ..., -0.0903, -1.2080,  0.1863]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -307.2500, -1373.0000,  1105.0000,  ..., -1193.0000,  1261.0000,
           252.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1755, -1.4336,  1.9658,  ...,  0.0048, -0.0033,  0.0025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0004,  0.0070,  0.0008,  ..., -0.0022, -0.0106, -0.0041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0824,  0.0691, -0.0769,  ..., -0.0055, -0.0019,  0.0799]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-37.6562,  41.8750, -84.3750,  ...,  37.7812, -45.2812,   4.0000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2150, -0.2045,  0.1747,  ..., -0.0034,  0.0251,  0.0405]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0055, -0.0017, -0.0100,  ..., -0.0007,  0.0115,  0.0075]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2404, -0.2720, -0.0830,  ...,  0.2236, -0.0397,  0.0318]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  4.0742,  45.9375,  -1.3916,  ..., 144.6250,  43.1562,   5.9609]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4690, -0.5552, -0.2126,  ..., -0.1833, -0.0038,  0.1343]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0232, -0.0450, -0.0637,  ..., -0.0391,  0.0054, -0.0007]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0746, -0.2178, -0.2598,  ...,  0.2903,  0.1840,  0.0699]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -5.0000,  12.0859,  88.5625,  ...,  18.9688, -29.8906, 101.8750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3962,  0.1921, -0.3257,  ...,  0.0051,  0.0521,  0.0120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0565,  0.0165, -0.0573,  ..., -0.0032,  0.1216,  0.0234]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2377,  0.0461, -0.0258,  ..., -0.3882,  0.2656, -0.2435]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-185.6250,   98.3750,  154.7500,  ..., -118.0000,   41.2500,
           49.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2798,  0.4507, -0.3296,  ..., -0.1733, -0.3267, -0.2844]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0261,  0.0371, -0.0068,  ...,  0.0660, -0.0911, -0.0766]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0216,  0.0767, -0.0454,  ..., -0.4536,  0.0660,  0.0864]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -24.5781,  130.5000, -170.6250,  ...,   41.9688,  -84.8125,
           77.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1100, -0.2539, -0.5088,  ...,  0.0402, -0.1142,  0.2084]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1219, -0.2001, -0.0983,  ..., -0.0182, -0.0511,  0.0073]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.5430e-01, -5.0928e-01, -1.4673e-01,  ...,  2.7156e-04,
          7.0740e-02,  3.4155e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -24.2031,  162.3750,   89.9375,  ...,   35.3750,  183.6250,
         -135.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5801,  0.7217,  0.7368,  ..., -0.0335, -0.0394,  0.3787]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1501, -0.0809,  0.0763,  ...,  0.0352,  0.0132,  0.0881]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2321, -0.3723,  0.1758,  ...,  0.5845, -0.2480,  0.1895]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -25.7031,  -28.1875, -115.0625,  ...,  137.1250,  -87.4375,
           16.7344]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0574, -0.2233,  0.3071,  ..., -0.0413,  0.0464,  0.0031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0757, -0.0195, -0.0568,  ...,  0.0479,  0.0141,  0.2418]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2267,  0.0270,  0.0040,  ...,  0.3198, -0.2620,  0.3108]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-76.8125,   1.3154, -21.7969,  ...,  18.4375, 135.8750, -61.1250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1259,  0.0962,  0.1113,  ..., -0.2986,  0.4043, -0.3899]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0274, -0.1942,  0.0740,  ...,  0.1276,  0.1348,  0.0893]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5283, -0.3882, -0.2385,  ...,  0.4026, -0.2832,  0.2700]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 127.8125, -130.5000,   -6.8164,  ...,   93.3125,   33.0000,
           34.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1451, -0.7393,  0.4431,  ...,  0.5386, -0.1082,  0.4443]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1476, -0.0555, -0.0126,  ...,  0.1030,  0.1815,  0.1622]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0264,  0.3137, -0.0341,  ..., -0.0443, -0.3455,  0.2028]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -15.0234,  114.1250,   21.4062,  ..., -190.6250,  -95.3750,
          143.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2341, -0.0276, -0.0558,  ..., -0.1599, -0.0321, -0.0678]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0318, -0.0988,  0.0919,  ..., -0.0491,  0.0189, -0.0429]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0272, -0.4487, -0.1613,  ...,  0.2805,  0.2864,  0.4888]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 294.0000,  163.8750,  116.5000,  ..., -168.8750,   19.5625,
         -204.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5903,  0.5996, -0.5190,  ..., -0.1078,  0.4011, -1.0000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0096, -0.0560,  0.0222,  ...,  0.0889,  0.1835,  0.0046]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1936,  0.1794, -0.1743,  ...,  0.3413,  0.4758,  0.3601]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-56.5000, -55.4062, 338.5000,  ...,  45.2188, -33.0312, -11.1562]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0453, -0.3687,  0.5186,  ...,  0.2437, -0.4795,  0.2432]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0764, 0.0860, 0.0077,  ..., 0.1059, 0.0355, 0.0152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5229,  0.2773, -0.1570,  ...,  0.1152, -0.1306, -0.0155]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 33.5938,  47.9688, 123.9375,  ...,  36.0312,  73.6250, -23.2812]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4478, -0.1776, -0.4358,  ...,  0.3552,  0.0664,  0.7363]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1249,  0.1066, -0.2224,  ...,  0.3076,  0.1786, -0.1217]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3323, -0.2800,  0.2327,  ..., -0.0210, -0.3577, -0.1394]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 126.7500,  136.2500,  191.3750,  ...,  187.6250, -166.2500,
           88.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0469, -1.0039,  0.1089,  ...,  0.5864,  0.0285, -0.1318]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1020, -0.0365, -0.0419,  ...,  0.1072,  0.0621,  0.1072]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0172, -0.3594,  0.5605,  ..., -0.2625, -0.1150, -0.2979]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  77.6875, -128.2500,  -77.9375,  ..., -216.2500, -147.2500,
          144.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4526, -0.0805,  0.5146,  ..., -0.1619, -0.0828,  0.1032]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0060,  0.0468,  0.1115,  ...,  0.1825, -0.0881,  0.0837]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0536, -0.2510, -0.2886,  ...,  0.0044, -0.7651,  0.5117]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[203.0000,  69.6250,  73.6250,  ..., 320.0000, -10.7500, 242.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.1041, 0.1931, 0.1254,  ..., 0.0934, 0.0822, 0.0938]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0972, -0.1255,  0.0307,  ..., -0.3083,  0.0603,  0.0120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1272,  0.3220, -0.0337,  ...,  0.1584,  0.0983, -0.1836]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -61.1250, -225.6250, -123.3125,  ...,  -94.0625,   16.1250,
          104.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5591, -0.4805,  0.1549,  ...,  0.5498, -0.3569,  0.0790]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1043, -0.1670, -0.1973,  ..., -0.0379,  0.1656, -0.0250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0148,  0.0842, -0.6855,  ...,  0.5254,  0.4104,  0.5547]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -49.7500,  522.0000,  342.0000,  ...,  239.7500, -170.3750,
          104.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8398, -0.4092, -0.6187,  ...,  0.1231,  0.2250,  0.1639]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1543, -0.0229, -0.0223,  ...,  0.1510,  0.0328, -0.0628]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3413, -0.2010, -0.2328,  ..., -0.3850, -0.7021,  0.1359]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  23.7500, -334.2500, -304.7500,  ...,   56.8750,   10.9609,
         -220.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3425, -1.0693, -0.8833,  ..., -0.3000,  0.1320, -0.8809]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0365, -0.0294,  0.0752,  ...,  0.2620,  0.0295,  0.0396]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.3799, -0.0613,  0.5645,  ..., -0.5684,  0.3452,  0.3604]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 225.5000, -290.2500, -252.3750,  ...,   31.8438,  146.8750,
         -346.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2318, -0.2808,  0.5239,  ..., -0.4368,  0.3411,  0.2374]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0906, -0.2656, -0.1271,  ..., -0.3552,  0.2861,  0.2200]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1212, -0.4192,  0.1791,  ..., -0.0653, -0.0731, -0.3860]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 590.0000,   28.5625, -264.7500,  ...,  273.2500,  344.7500,
          -48.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6113, -0.6187, -0.2354,  ...,  0.1649, -0.1538,  0.5405]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1273, -0.3594,  0.0565,  ...,  0.0742,  0.0871, -0.2947]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0727,  0.1813, -1.2402,  ..., -0.1353,  0.3062, -0.7856]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-193.2500, -390.7500,  417.0000,  ..., -623.5000,  641.5000,
         -178.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3394,  0.2917,  1.9326,  ..., -1.3887, -1.6348, -1.1006]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4138, -0.2422,  0.3235,  ..., -0.2930, -0.0102, -0.2844]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2852, -0.0162, -0.2520,  ...,  0.0082,  0.2605,  0.9580]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-340.5000,  811.0000,  -49.9688,  ..., -631.0000,  -62.2812,
          245.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6182,  0.9248,  1.3613,  ..., -0.3770, -0.2091,  0.1976]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1866,  0.0187,  0.0314,  ..., -0.1559,  0.3616,  0.0167]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8691, -0.1891,  0.4658,  ..., -0.2350,  0.4026, -0.3667]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 250.1250,   92.7500, -360.7500,  ...,  153.8750, -331.0000,
          784.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2064,  0.2136, -0.9214,  ...,  0.5288,  0.2413, -0.1720]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2242, -0.4358,  0.1846,  ..., -0.0101,  0.0101, -0.4585]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0177, -0.6562, -0.1440,  ...,  0.4575,  0.1565,  0.5229]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 174.7500,  -56.5312, -321.2500,  ...,  -92.5000,   26.4375,
          106.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0710, -0.9004,  0.0634,  ...,  0.1621, -1.1162, -0.5996]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2195, -0.3545, -0.6177,  ..., -0.2263, -0.9165,  0.1212]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0648, -1.1914,  0.3669,  ..., -0.3586,  1.7217,  0.6807]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-396.5000,    2.0664,  866.0000,  ...,  497.7500, -187.1250,
          658.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9917,  0.2312,  0.1837,  ..., -0.0986,  0.3191, -0.4714]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2742, -0.1893,  0.0479,  ..., -0.1086,  0.3352,  0.1454]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2561, -0.6055, -0.2603,  ...,  0.4583, -0.1917, -0.2793]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  128.7500,  -333.7500,   198.5000,  ...,   221.6250, -1238.0000,
           -13.6797]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0099,  0.5620, -0.3762,  ...,  0.8892,  0.8438, -0.4773]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0834,  0.0118, -0.0538,  ..., -0.3569, -0.0172, -0.0235]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1195,  0.2449, -0.1058,  ...,  0.0839,  0.1609,  0.0298]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-1.0962e-01, -5.8950e+02,  8.4688e+01,  ...,  6.8281e+00,
         -4.2025e+02, -3.6475e+02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0292, -0.3074,  0.1350,  ...,  1.2725,  0.2578,  0.8237]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1957, -0.6685,  0.2130,  ..., -0.2529,  0.2566,  0.3547]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4294,  0.1447,  0.0371,  ..., -0.0349,  0.0190,  0.1721]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -78.0625, -601.5000, -798.0000,  ..., -570.0000,  628.0000,
          701.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.1614, 0.6885, 0.5591,  ..., 0.3958, 0.2070, 0.1310]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2277,  0.4062, -0.3630,  ...,  0.4690,  0.1003,  0.2549]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2979, -0.3210, -0.1820,  ...,  0.1562, -0.3508, -0.2040]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-206.2500,  580.0000, -308.2500,  ..., -510.2500, -565.5000,
          610.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4421,  0.1409,  0.5117,  ...,  0.6797,  0.1310, -1.2578]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2788, -0.0021,  0.1337,  ..., -0.6499, -0.4058,  0.1289]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1458, -1.9248, -0.8281,  ..., -0.2101, -0.6694,  0.9990]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  897.5000, -1570.0000,    55.9062,  ...,  1070.0000,  2248.0000,
          -414.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6953,  0.1144, -0.3152,  ...,  0.6245,  0.7871, -0.6304]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1156, -0.3462,  0.0947,  ..., -0.0926,  0.3989,  0.1422]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4297,  0.0431, -0.2898,  ...,  0.2583, -1.5762,  1.8818]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 1212., -3428.,  2308.,  ...,   479.,   501., -1926.]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0300, -0.3596,  1.0000,  ...,  0.0049, -0.0011, -0.0025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0012,  0.0037,  0.0067,  ...,  0.0009, -0.0037,  0.0001]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1208, -0.0354, -0.1219,  ...,  0.0647, -0.0136,  0.0342]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  7.9531, -10.1094,  -6.3906,  ...,  22.6719,   3.0273,  -7.6953]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5400,  0.0679,  0.9307,  ...,  0.0258,  0.0098, -0.0142]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0153,  0.0177, -0.0099,  ...,  0.0094,  0.0068,  0.0069]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0437, -0.0023,  0.0222,  ...,  0.1978,  0.0863,  0.0323]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-76.1875,  33.6562,  14.5469,  ...,  27.3750, -22.8281,  51.0312]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7451,  0.0024,  0.5439,  ..., -0.4915,  0.2279,  0.1284]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0576,  0.0194, -0.0645,  ...,  0.0438, -0.0093,  0.0068]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5303, -0.1698, -0.1254,  ...,  0.1090,  0.0435, -0.0278]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-15.1484, -39.6562, -27.0781,  ...,  56.5312,  51.0000,   9.5781]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3342,  0.0684, -0.0143,  ...,  0.1978, -0.2764, -0.0248]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0932,  0.1025, -0.0906,  ...,  0.0358,  0.1791, -0.0063]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0110, -0.1492,  0.0893,  ..., -0.0321, -0.1661, -0.0147]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  1.4814,  29.6562, -65.7500,  ..., -70.6250, -73.4375, -50.4375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0410,  0.3953,  0.3464,  ...,  0.0638, -0.0041, -0.3247]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0226,  0.0271,  0.0088,  ...,  0.0492, -0.0367, -0.0088]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1825,  0.1135, -0.3459,  ..., -0.0693,  0.0094,  0.0103]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -65.6875,  140.0000,  -56.8125,  ...,   18.9062,  110.0625,
         -140.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2402, -0.1735,  0.1421,  ...,  0.1194, -0.0854,  0.4600]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0839, -0.1333, -0.1176,  ...,  0.0009, -0.0269,  0.0006]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1130,  0.2253,  0.2302,  ..., -0.1779, -0.0923, -0.0031]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-108.2500,  171.6250,   65.6875,  ...,   91.1875,   -3.8398,
          -18.6094]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0091,  0.0801,  0.4348,  ..., -0.3501,  0.4260, -0.5049]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0861, -0.0887, -0.0034,  ...,  0.0703,  0.0414,  0.0580]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1776,  0.0598,  0.1040,  ..., -0.1989,  0.4329,  0.2423]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  88.9375, -133.5000,  153.7500,  ...,  -83.1875,  -59.6562,
          298.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1346,  0.6636, -0.2539,  ..., -0.2710,  0.0345,  0.1087]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1406, -0.1125, -0.0720,  ..., -0.0222,  0.1498,  0.0637]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2212, -0.6406, -0.1722,  ...,  0.9219, -0.2993,  0.7251]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  20.6875,   28.8125,    7.8555,  ...,  -13.4531, -170.1250,
          -40.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3247, -0.7100,  0.4734,  ..., -0.1469, -0.3403, -0.2627]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0409, -0.0509,  0.0707,  ...,  0.0956,  0.1614,  0.1012]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.9175,  0.0912, -0.2930,  ..., -0.0636, -0.0408, -0.5635]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-132.7500,  -10.3516,  130.2500,  ...,  104.4375,  228.2500,
          -32.6562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1074, -0.7041, -0.4348,  ...,  0.1610, -0.3848,  0.2438]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 8.9783e-02, -1.1035e-01,  3.3539e-02,  ..., -4.3571e-05,
          2.4402e-01,  1.2244e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1436, -0.0635, -0.2113,  ...,  0.0717,  0.0380,  1.0010]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -59.0000, -109.0625, -108.9375,  ...,  -63.7500,  -41.2188,
           42.7188]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4607, -0.4802,  0.2438,  ...,  0.0726,  0.0335, -0.4055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0044, -0.0641,  0.0337,  ..., -0.0209, -0.0424,  0.0109]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2539, -0.3306, -0.0356,  ...,  0.1192, -0.1192, -0.1127]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-341.5000,   87.3125,  126.1250,  ...,   20.7344,  147.3750,
          -49.1562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1135,  0.1934, -1.3164,  ..., -0.1719,  0.0975,  0.0476]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0251, -0.0469,  0.0294,  ..., -0.0718,  0.0380,  0.1432]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1171,  0.5615, -0.4873,  ...,  0.2233, -0.0279,  0.4275]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 430.7500,  539.0000, -109.8750,  ...,  -99.2500,    1.6123,
         -141.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2795, -0.0759,  0.3398,  ...,  0.2529, -0.3093,  0.1914]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0715,  0.0939, -0.0042,  ...,  0.1420,  0.1415,  0.0385]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8232,  0.2297, -0.6777,  ...,  0.7627,  0.0878, -0.0769]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  45.5938,  184.0000, -178.2500,  ...,  147.0000, -392.5000,
          -84.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9355, -0.3362, -0.0412,  ...,  0.0499, -0.0410,  0.0316]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0886, 0.2301, 0.0025,  ..., 0.1512, 0.2227, 0.0043]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.6733,  0.3904,  0.2052,  ...,  0.0446, -0.1689,  0.4543]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 267.5000, -249.1250,   45.8125,  ...,  -93.8125,    1.3027,
         -111.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2324, -1.7295, -0.5830,  ..., -0.0418,  0.1893, -0.2769]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0151, -0.0575, -0.0183,  ...,  0.1242, -0.0266,  0.1530]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1761, -0.2490, -0.0384,  ..., -0.4087,  0.5234,  0.2415]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 98.2500,  17.7812, 118.8125,  ..., 181.5000, -68.1875, 281.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9238,  0.2871,  0.5913,  ..., -0.3074, -0.2366,  0.0912]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0223, -0.0184,  0.1024,  ...,  0.0669,  0.0262,  0.0437]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5215, -0.2380, -0.2529,  ...,  0.1462,  0.4136,  0.1160]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[   2.6387,  238.1250, -275.7500,  ...,  289.2500,  -48.5000,
         -448.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4370,  0.7236,  0.3711,  ..., -0.3589,  0.0832,  0.5391]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0421, -0.1442, -0.0165,  ..., -0.1726, -0.1182,  0.2238]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0926,  0.5020,  0.0344,  ...,  0.8408, -0.1212, -0.1329]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-102.9375,  298.7500,  119.0625,  ...,  244.7500,  197.2500,
         -185.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3074, -0.2751,  0.0899,  ...,  0.1209,  0.1256, -0.2971]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0719, -0.0786, -0.0213,  ..., -0.2837,  0.2234,  0.1260]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1038, -0.0355,  0.2140,  ..., -0.0412,  0.6226,  0.9302]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-76.3125, 188.3750, 203.0000,  ..., -92.1875,  48.3438,  50.4688]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4788,  0.6528,  0.6221,  ..., -0.1581, -0.2600,  0.0475]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0650, -0.1026,  0.0817,  ...,  0.0704, -0.1170, -0.0905]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5664,  0.0773,  0.0411,  ...,  0.2411,  0.6313,  0.1628]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 280.0000,  124.9375, -757.5000,  ...,   28.7031,   86.8125,
           45.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4077, -0.2433, -0.0530,  ...,  0.3240, -0.0221,  0.5366]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1813, -0.0793,  0.0306,  ..., -0.1731, -0.3088, -0.0661]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.5947e+00, -6.2549e-01, -6.0254e-01,  ...,  7.0381e-04,
          1.7944e-01,  4.4336e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 214.7500,  300.2500, -185.1250,  ...,  209.0000,  -71.3125,
          313.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1144, -0.3711,  0.5278,  ..., -0.3218,  0.1602,  0.4553]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2462, -0.0763,  0.0306,  ...,  0.2084,  0.3647, -0.1025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2798, -0.6060,  0.0178,  ..., -0.2159, -0.0068, -0.1293]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-364.0000,  212.2500,  417.7500,  ...,  -97.0000,  -45.6562,
          -48.4062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0784,  0.4314,  0.5171,  ...,  1.4746,  0.1965, -0.4709]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1263, -0.1345, -0.0903,  ...,  0.0388,  0.0389, -0.2379]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2269, -0.2754, -0.6377,  ..., -0.3599, -0.8672, -0.4546]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-131.3750,  -18.9531,  -37.4375,  ...,  -73.0000,   76.5625,
          224.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0069, -0.5518,  0.9497,  ..., -0.0340, -1.1543, -0.9741]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0916, -0.1777,  0.1301,  ..., -0.2708, -0.0047, -0.1348]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1257, -0.2255, -1.0742,  ...,  0.1842, -1.0410,  0.0021]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -84.5000,  273.7500,   24.5469,  ..., -293.7500,  131.5000,
          -35.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0214,  0.5620, -0.1273,  ...,  0.0207, -0.2617, -0.0460]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0202, -0.3550,  0.1216,  ..., -0.4165,  0.2144, -0.0916]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7056,  0.1512, -0.0926,  ...,  0.3892,  0.6392, -0.3591]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-168.8750,   43.8750,  -68.1250,  ...,  -10.7109, -452.0000,
          140.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0584, -0.3972, -0.7324,  ...,  0.6206,  0.0822,  0.0395]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2769, -0.0560,  0.3516,  ...,  0.4624, -0.1692,  0.0236]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2969,  0.6333, -0.1691,  ..., -0.7632, -0.0359,  0.0062]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 728.5000,  -35.7500,  404.7500,  ..., -348.2500, -254.0000,
         -926.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3792, -0.2957, -0.2278,  ...,  0.1216, -1.0254, -0.6880]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0512, -0.1116, -0.2061,  ..., -0.2465, -0.1841,  0.1130]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5898, -0.1365, -0.1931,  ...,  0.0840, -0.0608,  0.0544]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  73.0000,   76.1875,   33.9062,  ..., -624.0000,    5.6289,
          116.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.3594, -0.4954,  0.3367,  ..., -0.0523, -0.7158, -0.6636]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0667, -0.3733,  0.1526,  ..., -0.2727,  0.4336,  0.0760]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5137,  1.0498, -0.4878,  ..., -0.5962,  0.1810,  0.2280]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-1171.0000,    39.3438,   -41.3750,  ...,   -76.1250,  -169.8750,
          -906.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4143, -0.0066,  0.9404,  ..., -0.3467,  0.2888, -0.1989]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-1.9299e-01,  3.7671e-01, -5.0068e-04,  ..., -6.4795e-01,
          3.9404e-01, -9.6893e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3147, -0.2859,  0.7656,  ..., -0.5728,  0.2893,  0.4680]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 710.5000,  550.0000, -485.0000,  ...,  298.2500,  538.5000,
         -321.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3462, -0.2190, -0.2017,  ..., -0.4587, -1.0020,  0.1130]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1186, -0.1262,  0.4373,  ..., -0.1505, -0.3635,  0.6011]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.6743,  0.7568,  0.5815,  ..., -0.7988,  0.1061, -0.4373]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-691.0000,  194.3750,   58.1875,  ...,  466.0000,  605.5000,
          577.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0635, -0.2866,  0.2661,  ...,  0.2361,  0.7500,  0.2546]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0681, -0.1409, -0.2791,  ...,  0.1906,  0.0704,  0.2223]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4648,  0.0033,  0.1569,  ..., -0.2025,  0.6665, -0.4309]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 341.0000, -816.0000, -273.5000,  ..., -324.0000,  676.0000,
         -258.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5454, -0.2316, -0.2167,  ...,  0.6729,  0.2581,  0.6318]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3472, -0.1140,  0.3379,  ..., -0.4358, -0.1818,  0.2000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4490,  0.0033, -0.4846,  ...,  0.7168, -1.0166, -0.3403]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -53.7812, -691.5000, -153.2500,  ..., -840.0000,  525.0000,
          237.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2391,  0.0541, -1.1543,  ...,  0.6621, -0.8110,  0.3259]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3811, -0.2440,  0.4209,  ...,  0.1137,  0.5576,  0.0804]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1272, -0.1975,  0.4634,  ..., -1.8828, -2.0586,  0.4778]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-717.0000,  956.0000,  256.0000,  ...,  957.5000,  428.0000,
         1573.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1206, -0.8335,  1.4023,  ..., -0.0016,  0.0022,  0.0026]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0004,  0.0037,  0.0049,  ..., -0.0024, -0.0055, -0.0015]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1616,  0.0212, -0.0544,  ...,  0.1111,  0.0253,  0.0652]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-26.2969, -12.7422,  25.7188,  ...,   4.4297,   7.8203,  13.3281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3145,  0.0107, -0.0476,  ...,  0.0213, -0.0312,  0.0099]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0234,  0.0362, -0.0349,  ..., -0.0069, -0.0122,  0.0309]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0501, -0.1970,  0.0788,  ...,  0.0910, -0.0580, -0.1550]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -74.7500,  -51.1250,   92.3750,  ...,  162.0000,   47.9688,
         -116.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1210, -0.7485,  0.2617,  ..., -0.1646,  0.9243, -0.3167]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0430, -0.0602, -0.0719,  ..., -0.0300,  0.0779,  0.0097]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2423, -0.0684,  0.2578,  ...,  0.1619,  0.0112,  0.1401]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[102.0000, -27.3750,  63.6562,  ..., -94.1250,  90.6875, -11.0859]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2747,  0.1974, -0.2737,  ...,  0.0396,  0.0598, -0.0717]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0153,  0.0506, -0.1340,  ...,  0.1041,  0.1048,  0.0406]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0685, -0.2025, -0.2018,  ...,  0.2900,  0.0959,  0.4819]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 99.9375, -14.2422,  -9.0547,  ..., -34.1562, -78.1875, -19.0312]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6240,  0.2087, -0.1672,  ...,  0.4797, -0.0325, -0.1359]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0282,  0.0423,  0.0279,  ...,  0.0568, -0.1041, -0.0529]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1141, -0.1423, -0.1949,  ...,  0.2113, -0.0012, -0.0536]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -88.8750, -206.3750,  -33.9062,  ...,  158.5000,   18.4844,
           11.8359]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3076,  0.0394, -0.1650,  ...,  0.0302,  0.1801, -0.0967]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1716, -0.0853, -0.1648,  ...,  0.1427,  0.0442,  0.0101]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1860, -0.1561,  0.0510,  ..., -0.0335,  0.3298,  0.0311]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-38.4062,  55.4688,  88.2500,  ..., -51.4688,  29.6562, -21.1250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8926,  0.7280, -0.4941,  ...,  0.0494,  0.0956, -0.2211]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1924,  0.0163, -0.0674,  ...,  0.0587,  0.0827,  0.0989]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2238,  0.1970,  0.0732,  ..., -0.5410,  0.0900, -0.2905]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  35.6250,  228.7500,  102.1250,  ...,  -74.0625,  159.5000,
         -172.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0659,  0.1832, -0.8433,  ..., -0.1810,  0.0032, -0.0174]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0763, -0.1324,  0.0050,  ...,  0.0787,  0.0954,  0.1299]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0311, -0.3105, -0.2054,  ..., -0.0079,  0.0586,  0.3210]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  63.0938, -110.2500,  -55.2812,  ...,   14.4531,   15.5547,
           -4.0703]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3838, -1.0371,  1.0107,  ..., -0.2180, -0.0547,  0.0414]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0533, -0.0340,  0.0403,  ...,  0.0443,  0.2001,  0.1620]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4575, -0.3081, -0.1093,  ..., -0.0723,  0.0519, -0.0006]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -15.7109,   34.4062,   47.9375,  ..., -252.8750, -207.2500,
          -21.6406]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0742, -0.5020,  0.5688,  ...,  0.2147,  0.4500,  0.0456]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1880, -0.1146, -0.0632,  ...,  0.1683,  0.1968,  0.1909]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0828,  0.4409, -0.1492,  ..., -0.2581,  0.6416,  0.0790]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-181.5000,  -66.0625,  115.9375,  ...,   49.5312, -227.0000,
         -197.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5186,  0.0233,  0.2177,  ..., -0.2382, -0.2698,  0.0930]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1764, -0.0380,  0.1234,  ..., -0.0231,  0.0045, -0.0369]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1505, -0.6807, -0.2568,  ...,  0.3171, -0.0893,  0.1179]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  72.5625,  337.7500,   42.9375,  ...,  -34.4062,  -32.6875,
         -160.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9473,  0.6924, -0.4397,  ...,  0.3318,  0.5376, -0.4836]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1203, -0.2272,  0.0775,  ..., -0.0076,  0.1232,  0.1787]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0233,  0.1688,  0.0986,  ...,  0.0592, -0.1764,  0.1952]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 52.2500,  88.0000,  66.8750,  ..., 474.7500,  25.7812, 351.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5142,  0.0398, -0.2524,  ...,  0.6855, -0.1559,  0.1006]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0723,  0.1930, -0.0186,  ...,  0.0394,  0.0467,  0.0512]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5229,  0.1802, -0.5835,  ...,  0.4324,  0.0715, -0.0052]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-272.2500,  -68.5000, -198.7500,  ...,    6.1641, -271.2500,
         -110.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6694,  0.3638, -0.3711,  ...,  0.2438,  0.2266,  0.4280]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2117,  0.1371, -0.0970,  ...,  0.1543,  0.3784,  0.0247]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3123,  0.3145,  0.5498,  ...,  0.1533, -0.5801,  0.0987]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  -3.3203,  -81.3125,  245.3750,  ..., -282.7500,   26.0625,
          -21.3594]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5786, -0.6411, -0.1041,  ..., -0.0724,  0.2247, -0.3120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0370, -0.1893,  0.1770,  ...,  0.3274, -0.1057,  0.0920]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5908, -0.1971, -0.0070,  ..., -0.3718,  0.3616,  0.0778]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-202.0000,   15.6094, -183.8750,  ...,   -3.8242, -218.3750,
          231.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3669,  0.3650, -0.3545,  ..., -0.4568, -0.1161,  0.4617]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0743, -0.1333,  0.1562,  ...,  0.0784,  0.0516,  0.0069]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1941, -0.5801,  0.0446,  ...,  0.1063,  0.0471,  0.1837]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  23.4219,   99.8750,   66.0000,  ...,  426.7500, -173.5000,
           64.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8364,  0.5430,  0.3655,  ..., -0.0397,  0.1910,  0.0134]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0518, -0.0848,  0.0076,  ..., -0.1550, -0.1499,  0.2472]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0914,  0.0148, -0.3354,  ...,  0.4270,  0.1024, -0.1614]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  77.2500,  109.2500, -107.9375,  ..., -199.3750,  156.2500,
           -8.5938]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0565,  0.1024,  0.2883,  ...,  0.6372, -0.6851, -0.4353]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1191, -0.0943, -0.0422,  ..., -0.3093,  0.2157, -0.0827]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0934, -0.1002,  0.1233,  ...,  0.5010,  0.5146,  0.1440]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-323.7500,  312.5000,   65.1250,  ...,  281.2500,   24.7656,
          315.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0482, -0.2651,  0.0735,  ...,  0.9092, -0.3464,  1.0117]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1127, -0.2450,  0.0595,  ...,  0.2318, -0.1072, -0.2788]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2286, -0.9131, -0.2133,  ..., -0.2571, -0.3789, -0.8599]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-107.9375,  602.5000,  206.7500,  ..., -136.7500, -268.0000,
         -535.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3865, -0.7563, -0.2065,  ..., -0.5825, -0.2161,  0.1750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0913,  0.2649, -0.1859,  ..., -0.0248, -0.3489,  0.0740]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.3164,  0.2908, -0.0795,  ..., -0.3159,  0.2435,  0.8657]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  26.5000,  -61.6875,  -35.9688,  ..., -222.8750,  -22.3438,
          508.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0037,  0.1290,  1.0664,  ...,  0.1818,  0.5308, -0.7212]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3308,  0.2457,  0.0599,  ...,  0.2357,  0.2253, -0.0041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0441, -0.4736,  0.1805,  ..., -0.0692, -1.0674, -0.6592]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -51.8438, -136.1250,   86.4375,  ..., -144.7500,  446.2500,
          595.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2554, -0.3794, -0.6587,  ...,  0.3425, -0.1973,  0.4751]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3308, -0.1084,  0.0148,  ..., -0.0006,  0.1560, -0.0552]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5698,  0.2075,  0.1260,  ..., -0.3501, -0.2053,  0.5635]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-274.5000,  -43.1875,  325.7500,  ..., -513.5000, -306.5000,
          308.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9136, -0.3254, -0.4038,  ..., -0.5884,  0.1591,  0.1366]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2375, -0.1509,  0.5864,  ...,  0.1477, -0.1418, -0.2686]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5195,  0.4358, -1.2637,  ..., -0.9019, -0.4673, -0.0959]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-400.5000,  -36.4688,  177.7500,  ...,  136.7500, -363.2500,
          915.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2430,  0.1404, -0.1851,  ..., -0.0406, -0.5234, -0.6519]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2010, -0.2393, -0.1589,  ..., -0.1466,  0.0531, -0.0468]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2808, -0.3586, -0.3701,  ..., -0.2625, -0.0413, -0.7808]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-358.0000,   -1.5400,   -4.0508,  ...,  269.0000,  255.0000,
           63.1562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0186, -0.1428,  0.0703,  ...,  0.0439, -1.0176, -0.7046]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0039, -0.2593,  0.3030,  ...,  0.2905, -0.1879, -0.0291]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1088,  0.0198,  0.5859,  ..., -0.3074, -0.4846,  0.2235]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-565.0000,  112.8125,   45.5625,  ...,  375.7500,  258.7500,
          373.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3967, -0.0210,  0.0136,  ...,  0.2156,  0.2219, -0.0715]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1270,  0.0514, -0.1759,  ..., -0.3525, -0.5439, -0.3977]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3306, -0.1570,  0.1572,  ...,  0.0507,  0.5845, -0.0533]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-104.6250,  578.5000,  710.5000,  ..., -226.6250, -460.2500,
           69.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9644,  0.1309, -0.1050,  ...,  0.0520,  0.0462, -0.2698]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4558, -0.3875, -0.0577,  ..., -0.3809,  0.8130, -0.0731]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2007, -0.1274,  0.5171,  ..., -0.2927,  0.8179,  0.2698]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 681.5000,  227.8750, -501.7500,  ...,  -78.0000, -877.0000,
          135.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1293,  1.2285, -0.0276,  ...,  0.0316,  0.4871,  0.2720]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2361,  0.0814, -0.2634,  ..., -0.3860, -0.0629, -0.1228]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3723, -0.7773, -0.0015,  ...,  0.9258, -0.2502,  0.1486]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-831.0000, -140.7500,  344.2500,  ..., -557.0000, -288.5000,
         -658.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1143,  0.0975,  0.3086,  ..., -0.4041, -0.7764,  0.4658]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4329,  0.3289,  0.2384,  ..., -0.3328, -0.4700,  0.4189]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3743, -0.3213, -0.3628,  ...,  0.8413, -0.9878, -0.4421]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 314.0000,  431.0000,  822.0000,  ..., -458.5000,  525.5000,
           84.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5264,  0.4763, -0.4854,  ...,  1.3350, -0.6846, -0.2507]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1176,  0.0329, -0.8091,  ...,  0.3987, -0.1239,  0.4382]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4519,  1.0977, -0.9844,  ...,  1.5205, -0.2981,  0.1675]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-616.0000,  -55.7188,   66.0625,  ...,  351.5000, -338.5000,
          345.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2104, -0.5977, -0.2300,  ..., -0.2279,  0.7310, -0.0349]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.6323, -0.1089,  0.2195,  ..., -0.5034, -0.5645, -0.0762]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4033, -0.5552,  0.5815,  ..., -0.1957, -0.5459, -0.9526]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-354.0000, -237.3750, -838.5000,  ...,  315.2500,  763.5000,
         -455.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.1289,  0.5874, -0.0967,  ...,  0.1431,  1.1797, -0.1687]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4211, -0.4360,  0.3105,  ..., -0.1278,  0.3525,  0.0972]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8140,  0.2025, -0.0332,  ..., -0.6064, -2.1250,  0.2820]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -151.0000,  -305.2500,  -620.5000,  ...,   220.6250,  1278.0000,
         -1219.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3269,  0.3145,  0.2612,  ..., -0.0026,  0.0018,  0.0027]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0025,  0.0021,  0.0027,  ...,  0.0012,  0.0059, -0.0025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1251, -0.0687, -0.1089,  ...,  0.1293, -0.0217, -0.0116]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[10.1016, -0.6191, -2.3438,  ..., -0.4465, -4.5586, 23.2031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4780,  0.6338,  0.6265,  ...,  0.0134, -0.0241, -0.0341]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0097, -0.0037,  0.0099,  ...,  0.0003,  0.0039,  0.0105]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0534, -0.1825,  0.0141,  ...,  0.1422, -0.0017,  0.0445]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-58.6562,  13.1641,  49.4375,  ..., -15.4844,  30.3281,  98.6875]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5728,  0.1257, -0.1117,  ...,  0.0562,  0.1016, -0.1305]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0294,  0.0493, -0.1003,  ...,  0.0188,  0.0483, -0.0970]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0736,  0.2109, -0.0977,  ..., -0.3574, -0.1011, -0.0134]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-41.2188,  17.6719,  19.6562,  ...,   8.7109, -26.2812,  32.2812]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0494, -0.1631, -0.5088,  ...,  0.1675,  0.0468, -0.1552]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0194,  0.0552, -0.0721,  ...,  0.0315,  0.1035,  0.0050]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0650,  0.1196, -0.2395,  ...,  0.2090, -0.0181, -0.1663]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  0.8213, -53.8125,  72.8750,  ..., -47.1250,  20.8281, -36.7500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3569,  0.5918,  0.2971,  ...,  0.4517, -0.3066, -0.3308]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0079, -0.0330,  0.0282,  ...,  0.0339, -0.0329, -0.0014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2123,  0.1157,  0.1157,  ...,  0.4263,  0.1880, -0.0569]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-112.7500,  103.9375,  -94.0000,  ..., -105.2500,  -34.5312,
           57.7812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3386,  0.1234, -0.2406,  ...,  0.0806, -0.1220, -0.1290]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0250, -0.1564, -0.1086,  ..., -0.0008, -0.0934, -0.0378]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1639, -0.3706,  0.1943,  ..., -0.2021, -0.2678,  0.0920]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  70.5000,  -32.3125,  -31.2344,  ...,   99.3750,  105.6875,
         -135.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1758,  0.0011, -0.3921,  ..., -0.0698, -0.0008,  0.1539]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0467, 0.0762, 0.0187,  ..., 0.1671, 0.0912, 0.0549]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1670, -0.0916,  0.0520,  ..., -0.0554, -0.1313,  0.0150]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  49.9062,  -78.4375, -134.7500,  ...,   19.3906,  -96.6250,
           79.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3962,  0.0021, -0.0327,  ...,  0.1847, -0.4800,  0.2108]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0449, -0.1589, -0.0243,  ...,  0.0165,  0.1219,  0.0606]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0484,  0.0050, -0.1566,  ...,  0.3574, -0.2605,  0.0143]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 127.3125, -186.1250,    9.1406,  ...,  167.0000,  -80.0000,
          135.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1914, -0.7246,  0.7485,  ..., -0.1210, -0.0064, -0.0281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0985, -0.0968, -0.0500,  ...,  0.1796,  0.0540,  0.0991]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8706, -0.3494,  0.0785,  ..., -0.0266, -0.0054,  0.0744]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 18.8438, 113.5625,  29.3906,  ...,  63.2188, 126.5625, -18.9375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1187, -0.3850,  1.0742,  ..., -0.0134,  0.0724, -0.3110]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0851, -0.0234, -0.0004,  ..., -0.0460,  0.1335,  0.1802]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4912,  0.0563, -0.4724,  ..., -0.0806, -0.0247,  0.1614]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  38.6250, -191.0000,   53.2500,  ...,   50.5312, -401.2500,
         -355.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0238, -0.7109,  0.0798,  ..., -0.0945,  0.0649,  0.1272]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1055, -0.0294,  0.0375,  ..., -0.0124,  0.0289, -0.0209]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1506, -0.2126, -0.1683,  ...,  0.6772,  0.1677, -0.2678]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-416.2500,  197.6250, -112.3750,  ...,  145.8750,  221.1250,
          -60.5938]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1210,  0.8892, -0.6943,  ...,  0.1899, -0.3752, -0.1737]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0126,  0.0917,  0.0978,  ..., -0.1165,  0.0512,  0.0838]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5601,  0.0323, -0.3396,  ...,  0.2222, -0.3750,  0.2437]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 113.0625,  -27.5156,    9.4766,  ..., -160.0000,   40.3750,
           85.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5537, -0.0478,  0.2722,  ..., -0.0683, -0.8955, -0.0685]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1879,  0.0500, -0.0070,  ..., -0.0662,  0.0276,  0.0322]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5840,  0.5649, -0.3254,  ...,  0.2405, -0.2274,  0.0660]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-38.4062, 112.6250, 292.7500,  ..., 167.3750,  69.7500, -51.5938]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9224,  0.3018, -0.0889,  ..., -0.1183, -0.0901,  0.1660]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0743,  0.4817, -0.0210,  ...,  0.1421,  0.0832, -0.0443]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4248, -0.1543,  0.3049,  ..., -0.1686,  0.3999,  0.1879]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[104.0000, 552.0000, -61.1250,  ..., -31.8750, -10.4844, 301.7500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9316,  0.0324, -0.8481,  ...,  0.6724,  0.4280,  0.4424]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1160, -0.0161,  0.0951,  ..., -0.0077, -0.0241,  0.0960]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0296, -0.8154,  0.3655,  ..., -0.2876,  0.4727,  0.1116]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  40.4062,  -46.2500, -165.8750,  ...,  -29.8750, -119.0625,
           96.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5952,  0.1107,  0.9644,  ..., -0.1328, -0.2102,  0.3091]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0720, -0.0319,  0.1144,  ...,  0.1462,  0.0198,  0.1039]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5806, -0.1309, -0.1266,  ..., -0.4421,  0.2257, -0.0274]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 283.2500,  -14.7344,  358.0000,  ..., -315.0000,  -22.6406,
           34.9062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2927,  0.5439,  0.2766,  ..., -0.5923, -0.1851,  0.5483]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0628, -0.0643, -0.0521,  ..., -0.2081, -0.1906,  0.2642]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0366,  0.3201, -0.0849,  ...,  0.3140, -0.3647,  0.4939]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-187.3750,  287.7500,  -65.7500,  ...,   67.8125, -286.2500,
         -135.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1876, -0.0400,  0.1870,  ...,  0.3428,  0.2957, -0.1421]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0186, -0.0109,  0.0036,  ..., -0.1442,  0.1489, -0.0407]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1285, -0.1115,  0.6060,  ..., -0.6104, -0.3391,  1.1787]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 644.0000,  223.5000,   81.0000,  ...,  101.6250,  375.2500,
         -405.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3027, -0.0546, -0.4050,  ...,  0.2148, -0.3711, -0.3264]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2163,  0.0186,  0.0901,  ..., -0.0851, -0.2047, -0.2098]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0039,  0.1836, -0.3040,  ...,  0.8618,  0.0050,  0.4883]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-187.5000, -509.0000,  222.7500,  ...,  172.2500, -268.5000,
         -331.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4832, -0.4211, -0.3508,  ...,  1.0576,  0.0705, -0.0081]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0399, -0.0322, -0.1285,  ..., -0.1055, -0.4810,  0.1207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.9883,  0.5693, -0.5796,  ..., -0.2625,  0.3584,  0.6772]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 387.2500,  112.8750, -121.3125,  ...,  631.5000, -405.7500,
          -43.5312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1633, -0.4563, -0.3208,  ...,  0.3418,  0.3601, -0.1373]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0383, -0.1173,  0.0975,  ...,  0.3435,  0.3005,  0.1146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0784, -0.3970,  0.2478,  ...,  0.0895,  0.0077, -0.1553]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-348.2500, -684.0000,  245.8750,  ...,  -60.9375,  326.0000,
          185.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.1201, -0.3315,  0.5947,  ...,  0.2783,  0.2371,  0.4292]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2223, -0.0119, -0.0696,  ...,  0.0186,  0.1107, -0.4700]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4392, -1.0254, -0.6992,  ...,  0.3730, -0.5688,  0.1844]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  -60.3125,  -425.0000,   217.5000,  ...,  -645.5000, -1004.0000,
           -30.8438]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9321,  0.0535,  0.5796,  ..., -1.3057, -0.3652, -0.9185]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3540,  0.1965,  0.4724,  ...,  0.1273, -0.0130,  0.0477]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3889, -0.7808, -0.8042,  ..., -0.5254, -0.9204, -0.4788]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-409.5000,  218.8750,  137.1250,  ..., -152.2500,   95.4375,
          202.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0842, -0.3596, -0.4265,  ...,  0.3992, -0.7070,  0.7944]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1084,  0.0184, -0.2039,  ..., -0.1309,  0.0688,  0.1669]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3169,  0.3599, -0.1556,  ...,  0.2844,  0.0395, -0.6587]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-259.7500,   63.2500,  679.5000,  ...,  159.3750,  181.6250,
          322.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3806, -0.5405,  0.2913,  ..., -0.4172, -0.4756,  0.6255]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0181, -0.2198,  0.2155,  ..., -0.0342, -0.2440,  0.2422]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8560, -0.6333, -0.5581,  ..., -0.2452,  0.1976, -0.5474]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  491.7500,   -21.3438, -1001.0000,  ...,  -236.7500,  -823.0000,
           -68.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4663,  0.0984, -0.2634,  ...,  1.4346,  0.3008, -1.4531]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0121, -0.1129, -0.2095,  ..., -0.1279, -0.2477, -0.2194]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0312, -1.4561, -0.1276,  ...,  0.4463,  0.8198,  0.7817]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 264.7500,  501.0000, -238.0000,  ...,  148.7500,  233.1250,
           41.3438]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5796, -0.6914,  0.1995,  ...,  1.2520, -0.2012, -0.5420]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2494, -0.2365,  0.2722,  ..., -0.2769,  0.5747,  0.3572]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7734,  0.7280, -0.1165,  ...,  0.3628,  0.2410, -0.2842]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  125.6875,  -489.7500, -1009.5000,  ...,   480.7500,   540.5000,
           303.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0479, -0.0375, -0.2864,  ..., -0.4683,  0.7510,  1.0557]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0513,  0.1086, -0.4094,  ..., -0.3562,  0.2352, -0.1490]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3459,  0.4172,  0.0299,  ...,  0.4355, -0.3730,  0.5835]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 590.0000, -218.2500, -131.7500,  ...,  231.2500,  134.8750,
          671.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4006, -0.1710,  0.2291,  ..., -1.0312, -1.1182,  1.2275]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3687,  0.2727, -0.0532,  ..., -0.3147,  0.0004,  0.3254]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0797, -0.4729, -0.2717,  ..., -0.8823, -0.3528, -0.1986]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-672.5000,  194.8750, -838.0000,  ...,  109.0000,   18.0000,
          944.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2460,  0.2063,  0.8486,  ...,  0.5659,  0.0864, -0.1307]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1537,  0.0139, -0.4797,  ...,  0.2849, -0.3162,  0.1816]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3713,  0.6211, -0.1571,  ..., -0.1414, -0.6753, -0.7124]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -85.7500,  749.0000, -907.5000,  ...,  124.0000, -317.7500,
         -457.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7559, -0.7227,  0.3479,  ..., -0.6460,  0.7490,  0.1301]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3877, -0.0189,  0.8081,  ...,  0.0688, -0.3347, -0.2744]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8213,  0.2496, -1.0176,  ..., -0.2515, -0.1671,  0.9092]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -94.3750, -409.5000, -303.7500,  ..., -334.2500,   43.6250,
         -251.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7949,  0.1758, -0.5527,  ..., -0.4146, -0.0758, -0.3076]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.5815, -0.3660, -0.0599,  ...,  0.1234,  0.5581, -0.1185]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3835, -0.2991, -0.8008,  ..., -0.3159, -1.8174,  0.6777]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -873.5000, -1329.0000,  -678.5000,  ...,  -492.2500,  -108.6875,
          -447.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2231e-01, -1.5195e+00,  2.0762e+00,  ...,  1.9638e-02,
         -1.3628e-03, -1.2520e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0016,  0.0040,  0.0016,  ..., -0.0028, -0.0078, -0.0066]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0880,  0.0353, -0.0836,  ...,  0.0424, -0.0620,  0.1035]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  7.0000,  -5.5664,  -4.9688,  ..., -16.4375,  -8.8594,  -8.4375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4805, -0.1329, -0.1769,  ..., -0.0159,  0.0012, -0.0148]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0130,  0.0125, -0.0202,  ..., -0.0010,  0.0165,  0.0025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2534,  0.2172, -0.1010,  ...,  0.1531, -0.0080, -0.0856]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 37.8750,  38.7812,  75.4375,  ...,   7.7266, -81.8750, -25.9375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1842, -1.0186,  0.7725,  ..., -0.2676,  0.0023,  0.2211]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0264, -0.0193, -0.0325,  ..., -0.0189,  0.1000, -0.0467]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0595,  0.1697,  0.1831,  ..., -0.2690,  0.1532,  0.2124]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-22.9062,  -1.3496,  67.3750,  ..., -56.3438, 111.8750,   1.8242]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3218, -0.1109,  0.0354,  ...,  0.1188, -0.1622,  0.0946]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0297,  0.0539, -0.1032,  ...,  0.1027,  0.1763, -0.0233]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5361, -0.1893,  0.0165,  ..., -0.2898,  0.2725, -0.0439]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 138.7500,  -69.0625, -222.3750,  ...,   49.0000, -132.6250,
           -3.5352]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2678,  0.4299, -0.3801,  ...,  0.2404, -0.0095,  0.3020]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0579,  0.0710,  0.0411,  ...,  0.0548, -0.1032, -0.0743]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1232, -0.3845,  0.4829,  ..., -0.3257,  0.0536,  0.3096]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  97.0000,  -74.5625,  162.3750,  ...,   55.4375, -109.6250,
           85.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3247,  0.0783, -0.5020,  ...,  0.2573, -0.0576,  0.0173]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0634, -0.1793, -0.1375,  ...,  0.0804, -0.0598, -0.0910]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1099,  0.0729,  0.0895,  ...,  0.0539, -0.0019, -0.1290]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 63.9375, 175.3750,  81.0000,  ...,   5.2148, -11.1172, 128.3750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3074,  0.5122, -0.0327,  ...,  0.1654,  0.0012, -0.3787]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1932, -0.1126, -0.0305,  ...,  0.0660,  0.0212,  0.0599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0094,  0.2795,  0.3286,  ..., -0.0462,  0.1962, -0.5825]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-106.2500,   14.1641,   63.7188,  ..., -117.0625,  -29.7812,
           28.1719]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0784,  0.2964,  0.0642,  ..., -0.5493, -0.1118, -0.3477]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0532, -0.1108, -0.0235,  ...,  0.0875,  0.1157,  0.2593]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2023, -0.1273, -0.2098,  ...,  0.3843, -0.3252, -0.0017]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-210.1250,  -21.2812,  171.3750,  ...,  149.5000,  108.3750,
           55.5625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2155, -0.8120,  0.5005,  ..., -0.3071,  0.3523, -0.3386]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0208, -0.0421, -0.0224,  ...,  0.1476,  0.1010,  0.1707]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2129,  0.1122, -0.4978,  ...,  0.4807, -0.0025, -0.7124]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-158.7500,  264.7500,   79.7500,  ..., -118.6875, -198.7500,
          -97.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2343, -0.1842, -0.0991,  ...,  0.1458, -0.0262, -0.3621]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1353, -0.0665, -0.0959,  ...,  0.0362,  0.1131,  0.2367]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2065, -0.0545, -0.2039,  ...,  0.1854,  0.0951, -0.0326]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -19.1250,  129.3750, -403.5000,  ..., -174.7500,  -27.2812,
          -53.0312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4360, -0.3010,  0.1829,  ...,  0.3489,  0.1796,  0.2913]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1051, -0.0707, -0.0088,  ...,  0.0608,  0.0789, -0.0383]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0600, -0.0214,  0.0742,  ...,  0.1893, -0.2278, -0.3303]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-201.8750, -134.7500, -118.2500,  ...,   67.4375, -142.7500,
         -127.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3245,  0.2810, -0.7915,  ...,  0.1770,  0.1385,  0.2159]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0228, -0.0236,  0.1088,  ..., -0.0294,  0.0607,  0.1460]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7246,  0.2996,  0.4316,  ...,  0.3499,  0.0731, -0.1558]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -99.9375,  243.3750, -374.7500,  ..., -111.7500, -375.5000,
         -218.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9404,  0.1053,  0.4099,  ...,  0.0441, -0.7021,  0.0626]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0664,  0.2893, -0.0070,  ...,  0.0649,  0.0817,  0.2399]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4619,  0.0662, -0.5938,  ...,  0.3220,  0.1759,  0.4407]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  10.2891, -281.0000,  152.6250,  ...,  163.7500,  211.5000,
            3.8555]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3821,  0.3704,  0.0236,  ...,  0.0126, -0.0229,  0.1345]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1068, -0.0461,  0.0010,  ...,  0.0893,  0.2085,  0.0511]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5767, -0.4714,  0.2322,  ..., -0.0055,  0.2546,  0.5200]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 86.9375, 326.5000, -43.1875,  ..., 242.5000, -95.5625, -61.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0361, -1.3184, -0.9639,  ...,  0.8862,  0.9453, -0.2749]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0516, -0.1088, -0.0282,  ...,  0.0229, -0.0612,  0.1272]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1968, -0.5347,  0.4648,  ...,  0.1061, -0.2452,  0.0945]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  10.7266,   -6.7773,  -36.5312,  ..., -141.0000,   26.0312,
           93.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3391,  0.1107,  0.9614,  ..., -0.0607, -0.1434, -0.2659]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0259, -0.0244,  0.1394,  ...,  0.1328,  0.1203,  0.0360]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1699, -1.1982,  0.1429,  ...,  0.3848, -0.3616,  0.5732]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 141.3750,  107.0000,  269.7500,  ...,   75.6875,  376.5000,
         -237.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2244, -0.2583, -0.2390,  ...,  0.3052,  0.0930,  0.6147]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0706, -0.0629,  0.0691,  ..., -0.2107, -0.1240,  0.3015]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0062,  0.0376, -0.2913,  ..., -0.5415,  0.1061,  0.0753]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 375.7500, -472.7500,   50.2500,  ..., -176.1250,  133.5000,
         -374.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1049,  0.3452,  0.2404,  ..., -0.8130,  0.2681,  0.1868]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0721, -0.0720, -0.0842,  ..., -0.1511,  0.1626,  0.1962]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1499, -0.1046,  0.3792,  ..., -0.6401,  0.4714,  0.9648]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-166.5000,   84.9375, -437.0000,  ...,  138.0000, -101.8750,
         -451.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5381, -0.0511, -0.3872,  ...,  0.7241, -0.2783, -0.1985]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1669, -0.0470,  0.2401,  ...,  0.0346, -0.1171, -0.0724]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4795,  0.1532, -0.0303,  ..., -0.1790,  0.4714,  0.4802]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  60.4375,  -64.2500, -433.0000,  ...,   32.6875,  -84.8750,
          276.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1934, -0.6436, -0.3071,  ..., -0.1979,  0.4507, -0.0400]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0790,  0.0818,  0.0995,  ..., -0.0598, -0.1794, -0.0823]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.9482,  0.6006, -0.4341,  ..., -0.5259,  0.5020, -0.1252]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 145.0000, -357.5000,   81.2500,  ...,  -59.6562,   91.0625,
          490.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1226, -0.3928,  0.0220,  ..., -0.1189, -0.1543, -0.2861]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0308, 0.0156, 0.0768,  ..., 0.2086, 0.2664, 0.0511]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0657,  0.5132, -0.2705,  ...,  0.0170, -1.0342, -0.8906]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 552.5000,   68.1875, -379.5000,  ..., -124.7500,    4.0898,
         -355.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7695, -0.4138, -0.0206,  ...,  1.0469, -0.1199, -0.0837]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2295, -0.1692, -0.2881,  ..., -0.3677,  0.0229, -0.5552]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8789,  0.2158, -0.6392,  ..., -0.0194, -0.2920, -0.3467]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  23.6406, -271.2500,   23.4219,  ..., -123.1875, -270.2500,
          317.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.3564,  0.5688,  0.3535,  ...,  0.1418, -0.8867,  0.1726]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1364,  0.2126,  0.5054,  ..., -0.0741,  0.1070, -0.1624]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.6963,  0.4058, -0.0585,  ...,  0.4736, -0.1748,  0.0132]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  89.6875,  685.5000, -469.7500,  ..., -379.2500, -329.7500,
         -350.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4263, -0.6279,  1.2500,  ...,  0.0461,  0.0466, -0.3630]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1621, -0.3191, -0.3264,  ..., -0.3669,  0.1392,  0.1338]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0522,  0.0876,  0.5039,  ..., -0.4011,  0.3679,  0.3694]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-815.0000,  301.5000, -739.0000,  ...,   40.9375,  124.0000,
          314.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0662,  1.4580,  0.5542,  ...,  0.7500, -0.1487, -0.6294]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1180, -0.2590,  0.1600,  ...,  0.1227, -0.3652,  0.0577]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2759, -0.1119,  0.0345,  ..., -0.5195, -0.2266, -0.9893]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-221.8750, -107.9375,  440.7500,  ...,   89.3125,  -20.3594,
         -556.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4883, -0.4319,  0.1136,  ...,  0.1882,  0.7378,  0.4856]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0485, -0.1914, -0.3110,  ...,  0.2406, -0.0754, -0.1520]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.3818, -0.2751,  0.5244,  ...,  0.1937,  0.5122, -0.7246]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 320.5000,  223.2500, -105.0625,  ..., -257.7500, -322.0000,
          150.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4993, -0.6953,  1.0332,  ...,  1.5703, -0.4014,  0.6650]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4285,  0.0731, -0.1128,  ..., -0.3484,  0.7915,  0.3120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8403, -1.0508, -0.0148,  ...,  0.4661,  0.5781, -0.0566]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 516.0000,   57.9688, -608.0000,  ..., -462.0000,  177.2500,
         -200.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2820,  0.1254, -0.1774,  ..., -1.8066,  0.7969, -1.1875]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1643, -0.0150, -0.2571,  ..., -0.4041, -0.1843, -0.0118]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7686, -0.5610,  0.4390,  ...,  0.6904,  0.7217,  0.1237]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-466.7500,  160.1250, -400.2500,  ..., -648.5000,  103.7500,
          427.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7285, -0.4084, -0.5718,  ...,  0.6938, -0.4917, -0.1482]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2141,  0.1843,  0.3569,  ..., -0.0173, -0.1550,  0.4492]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.2100,  0.0880, -1.3135,  ..., -0.4653, -0.0365,  0.1299]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  473.2500, -1285.0000,  -117.8750,  ...,  -147.6250,  -180.1250,
           500.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1689,  1.4141, -0.6152,  ..., -0.1990,  0.8105, -0.3384]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1770, -0.0343, -0.4932,  ...,  0.2966,  0.0216,  0.4041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.6196, 0.1958, 0.0181,  ..., 0.5498, 0.4612, 1.1260]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 436.7500,  -80.8125,  -14.9531,  ...,  194.2500,  -78.9375,
         -534.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2214,  0.0178,  0.5396,  ...,  2.1680,  0.0079, -0.3821]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0287, -0.1534, -0.2061,  ...,  0.3113,  0.0959,  0.0520]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0651, -0.4709,  0.3137,  ...,  0.1074, -0.7080,  0.2915]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 645.5000,  172.6250,  -92.8750,  ..., 1184.0000, -789.5000,
         -671.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2878, -0.2113, -0.5308,  ...,  0.0180,  0.0012,  0.1124]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2778, -0.2340, -0.0613,  ..., -0.0271,  0.3262,  0.6377]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1113,  0.6045,  0.0115,  ...,  0.4336, -1.2363, -1.0215]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-155.0000, -496.7500,  265.5000,  ...,   44.5625,  205.7500,
         -297.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.6565e-01,  3.9038e-01,  9.9060e-02,  ..., -1.7560e-04,
          3.0518e-03,  3.5286e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0004,  0.0022,  0.0105,  ...,  0.0025,  0.0107, -0.0067]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1562, -0.0557, -0.0621,  ...,  0.1202, -0.0067, -0.0365]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-12.2266,   3.3809,   4.2695,  ..., -41.4688,  21.8750,   1.2539]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0116,  0.2993,  0.1674,  ...,  0.0210, -0.0219,  0.0066]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0070,  0.0003, -0.0006,  ...,  0.0013,  0.0072,  0.0074]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0483,  0.0002,  0.0931,  ...,  0.1599,  0.1609,  0.0320]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-16.8906,  61.8750,  74.1250,  ...,  21.7188,   0.2808,  33.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5464, -0.3740,  0.3706,  ..., -0.4739,  0.2668, -0.0009]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0641, -0.0129, -0.1078,  ...,  0.0042,  0.0441, -0.0656]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2527, -0.1663, -0.2559,  ..., -0.0432,  0.0223,  0.0127]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -9.8672, -18.0312, -33.4062,  ...,   3.1816,  22.1250,  45.8750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2172,  0.7622, -0.0772,  ...,  0.0629, -0.0352,  0.0699]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0457, -0.0311, -0.0392,  ...,  0.0375,  0.1073, -0.0250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1479, -0.3516, -0.4597,  ..., -0.0526, -0.2172, -0.3562]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 31.4375, 182.6250, -90.0625,  ..., -66.3125,  73.8750,  75.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2908, -0.2686, -0.3359,  ..., -0.0216, -0.1313,  0.3152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0374, -0.0461,  0.0939,  ...,  0.0811, -0.0788, -0.0511]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1711, -0.4224,  0.0912,  ..., -0.0837, -0.1643, -0.1989]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -38.4688,  -54.9688,  119.5625,  ...,  -19.7031, -104.6875,
           -9.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0575, -0.2467, -0.1509,  ...,  0.0871, -0.0456, -0.3723]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2295, -0.1628, -0.1478,  ...,  0.0924, -0.0263,  0.1031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0055,  0.1183, -0.2659,  ...,  0.1761,  0.2705, -0.3340]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -27.6875,  488.0000, -178.5000,  ..., -419.0000,  620.5000,
          -17.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4570, -0.7236,  0.3574,  ..., -0.0175,  0.1398, -0.0302]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2026, -0.0767, -0.0555,  ...,  0.0204, -0.0021,  0.0070]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1301, -0.0512,  0.0619,  ..., -0.1519,  0.1433, -0.1415]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -58.4375,  288.7500,  213.2500,  ..., -877.0000,   53.0625,
            2.0410]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2006,  0.2578,  0.5488,  ..., -0.2830,  0.4453,  0.1791]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0486, -0.2502,  0.0212,  ...,  0.1320,  0.0884,  0.1324]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0854, -0.4934, -0.3413,  ...,  0.1318, -0.1805,  0.1250]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  58.9688, -335.7500,   20.3750,  ...,  230.0000,  236.5000,
           85.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0282, -1.9434, -0.6597,  ...,  0.3599, -0.0712,  0.2217]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0215, -0.1052,  0.0924,  ...,  0.0786,  0.2026,  0.2379]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0176, -0.1486, -0.1300,  ...,  0.0704,  0.2041,  0.2008]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 75.0625, -33.3438,  91.0625,  ..., 122.6250,  24.8594,  60.7188]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4509, -0.6719, -0.3579,  ..., -0.1061,  0.2297, -0.4041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1287, -0.1484, -0.0595,  ...,  0.1311,  0.1636,  0.3071]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1625,  0.1044, -0.2561,  ..., -0.2683,  0.0322, -0.2372]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  83.1250, -236.1250,  152.7500,  ...,  251.6250,   -3.8516,
          -67.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3569,  0.3154, -0.0170,  ..., -0.3359, -0.1708,  0.1093]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2747, -0.0880,  0.1780,  ..., -0.0085,  0.0813, -0.1372]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2708, -0.5684, -0.0970,  ..., -0.1731,  0.2365,  0.5420]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-103.5000, -186.1250,  308.5000,  ..., -123.1250, -149.6250,
         -201.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4978, -0.6611,  0.2656,  ..., -0.6143,  0.2754,  0.0452]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0823, -0.0816, -0.2494,  ...,  0.0370, -0.0388,  0.1272]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2122, -0.2715, -0.1427,  ..., -0.1309,  0.4937, -0.2012]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[105.0625, 182.1250, -26.0000,  ...,  43.1250, -54.9062, 240.1250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0439, -0.6401,  0.7222,  ..., -0.0931,  0.2505,  0.2177]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1161,  0.2432,  0.0490,  ..., -0.0295,  0.0720,  0.0249]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2323, -0.5547, -0.3176,  ...,  0.6338, -0.3120, -0.0177]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-83.0000, -30.8750, -45.0625,  ..., 109.0000, -32.9062, -82.1875]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.7490,  0.3071, -0.1920,  ...,  0.2974, -0.3950,  0.2421]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1142,  0.2927, -0.0737,  ...,  0.2922,  0.2048, -0.1481]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0618, -0.0700, -0.2656,  ...,  0.2404,  0.0673,  0.5776]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 232.8750, -165.5000,    6.6680,  ...,   79.0000, -190.0000,
            8.9297]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.8252, -1.0156, -0.3625,  ..., -0.3247,  0.0783, -0.5552]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0423, -0.0291,  0.1401,  ...,  0.0676, -0.1168,  0.1193]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1494,  0.1014, -0.5942,  ...,  0.2112,  0.2847,  0.2266]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -32.3750,  181.6250,  -38.1250,  ..., -121.9375,  -79.5000,
         -464.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3772, -0.4841, -0.4343,  ..., -0.6929, -0.0562,  0.0721]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0311, -0.0293,  0.1237,  ...,  0.1276,  0.0376,  0.0452]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2423, -0.3083, -0.2695,  ...,  0.2561,  0.1655,  0.6587]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-188.2500,  119.8125,  101.8125,  ...,  231.6250, -181.0000,
          106.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5840,  0.3726,  0.1526,  ...,  0.3232,  0.1316,  0.7041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0498, -0.2039, -0.0822,  ..., -0.1383, -0.1163,  0.1769]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.7344, 0.1748, 0.0595,  ..., 0.5166, 0.1259, 0.2369]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 184.7500, -248.6250,  -23.6875,  ...,  217.1250, -327.0000,
          -84.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4451, -0.6392,  0.0465,  ..., -0.3237,  0.4956, -0.3792]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0385, -0.2247, -0.0731,  ..., -0.1799,  0.0361,  0.0618]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5732, -0.4219,  0.0972,  ...,  0.2028,  0.2209, -0.1654]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 119.3750,  -24.8125,   -4.6797,  ...,  339.5000, -553.0000,
         -208.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2949,  1.1709,  1.0576,  ...,  0.1794, -0.7778, -0.4351]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0519, -0.1669,  0.0818,  ...,  0.0925, -0.1146, -0.2206]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4851,  0.0431, -0.6953,  ...,  0.0053, -0.0771, -0.1345]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-254.6250, -221.5000, -212.0000,  ..., -390.0000,  391.7500,
         -266.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2979,  1.0889,  0.3645,  ...,  1.0498, -0.0179,  0.3599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1788,  0.1963,  0.0381,  ..., -0.1366, -0.3206,  0.0017]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 3.9277,  0.4338, -0.3894,  ..., -0.0959,  0.1754, -0.0859]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 176.5000,  -29.0625,   92.4375,  ..., -366.5000,  230.7500,
         -458.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5083, -0.1045,  0.1758,  ..., -0.1978, -0.0720, -0.1289]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0286, -0.2074,  0.1389,  ...,  0.3440,  0.2854,  0.0197]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0773,  0.0176, -0.2866,  ..., -0.3936,  0.0612, -0.4424]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -87.1250,   12.1562, -392.7500,  ...,   -8.4141, -284.5000,
          -64.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.5068, -0.0665,  0.2368,  ..., -0.0236, -0.1631, -0.5869]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3252,  0.0242, -0.3289,  ..., -0.1523,  0.1437, -0.3958]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4988, -0.8193, -0.9619,  ...,  0.3220, -0.0975,  0.8032]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -51.4688, -288.5000,  354.2500,  ..., -731.0000,   39.8125,
          -51.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0820, -1.2646,  1.2393,  ..., -0.9546,  0.9106,  0.2286]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4211,  0.2311,  0.3311,  ...,  0.1060,  0.0645, -0.0053]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3674, -0.1073, -0.5762,  ..., -0.1196,  0.1028,  0.6782]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  86.0000,  439.0000,   79.8750,  ...,  121.4375,  121.6250,
         -221.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8296,  0.4216,  1.1445,  ..., -0.1754, -0.1652, -0.0116]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1630, -0.2327, -0.0340,  ...,  0.0756,  0.2681,  0.0397]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8164,  0.0439,  0.8716,  ...,  0.0966,  0.5186, -0.1862]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 150.0000, -179.1250,  239.2500,  ...,   27.9375,  196.6250,
         -452.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.3154, -1.6943, -0.2852,  ...,  0.6938,  0.0609,  0.0905]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0804,  0.0005,  0.2478,  ..., -0.0373, -0.1009,  0.2047]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5112, -0.2001, -0.2932,  ...,  1.2920, -0.3225,  0.5244]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-106.8750, -118.6875,  104.2500,  ...,  -79.6875,  192.8750,
          -28.5625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2830, -0.0944, -0.3687,  ...,  0.7515,  0.8306,  0.6265]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4021, -0.2128, -0.1028,  ...,  0.1775, -0.2462,  0.0146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2430, -1.7402,  0.0830,  ..., -0.1808,  0.5615, -0.0407]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  90.1875,  385.5000, -331.2500,  ..., -297.5000,  -79.4375,
          470.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2098, -0.4014,  0.7192,  ...,  0.0322,  0.3950, -0.4150]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4688,  0.1230,  0.1825,  ..., -0.3040,  0.4023,  0.1472]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0442, -0.5874,  0.6494,  ...,  0.2472, -0.0666, -0.3062]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -40.4688, -183.3750, -115.5625,  ...,  809.0000, -550.5000,
         -705.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2195,  1.1152, -0.1826,  ..., -0.1122, -0.5527,  0.7129]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.5449, -0.4685, -0.2661,  ..., -0.2411,  0.1160, -0.3333]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3025, -0.0919, -0.7383,  ..., -1.0479,  0.4260,  0.1791]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-3.0762e-01,  5.5400e+02, -4.0125e+02,  ...,  7.4102e+00,
          3.4800e+02,  1.3275e+02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0312, -0.6460,  0.1414,  ..., -0.2194,  0.7095,  1.2510]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0227,  0.3438,  0.7349,  ..., -0.2014,  0.1081,  0.7021]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0967, -0.6802, -0.0247,  ..., -0.2715, -0.8345, -0.6636]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 364.2500,   52.3438, -535.5000,  ...,  310.0000,  324.5000,
          192.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1357,  0.7544,  0.6177,  ..., -0.5156, -0.6787,  1.2061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1595,  0.0278, -0.8623,  ...,  0.2087, -0.0533,  0.4312]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7378,  0.2252, -0.5078,  ...,  0.4189,  0.0163, -1.0371]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  59.7188,  229.7500, -278.0000,  ..., -297.2500,  580.0000,
         -345.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2151,  0.4438, -0.6694,  ...,  0.1087, -1.0176, -0.7642]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0750,  0.0515,  0.9121,  ...,  0.0834, -0.0202,  0.1560]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4265, -0.3594,  0.3635,  ...,  0.3452, -1.1494, -0.1923]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  250.2500,   338.2500,   243.0000,  ..., -1058.0000,  1695.0000,
           146.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9321,  0.9932,  0.2732,  ...,  0.1649, -0.4092, -0.3145]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.6694,  0.0092,  0.0081,  ...,  0.3296,  0.5210, -0.0982]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.1543, -0.6196,  0.5356,  ..., -0.0131, -2.5391,  0.9219]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 1335.0000,   181.1250,   308.5000,  ..., -1136.0000,  2818.0000,
          1022.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2556, -1.3643,  2.0957,  ..., -0.0054, -0.0083, -0.0125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0004,  0.0070,  0.0068,  ...,  0.0003, -0.0078, -0.0004]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1946,  0.0093, -0.1492,  ...,  0.1780,  0.0245,  0.0644]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -6.9531,  22.0156, -22.0625,  ...,  34.9375, -32.0625, -18.1562]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0624,  0.3152, -0.2913,  ..., -0.0072,  0.0248, -0.0204]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0096,  0.0074, -0.0063,  ...,  0.0032, -0.0034,  0.0061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0116,  0.0449, -0.1647,  ..., -0.1428, -0.2354,  0.0198]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  5.6641, 145.7500,   8.8203,  ...,  12.7188,  76.8125,  22.6562]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1382, -0.9971,  0.6294,  ..., -0.0157,  0.1395, -0.1698]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0330,  0.0080, -0.0040,  ...,  0.0526,  0.0630, -0.0319]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2183,  0.0053, -0.0310,  ...,  0.1561,  0.0797, -0.2333]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -56.1562,   66.9375,   94.1875,  ...,  -80.1250, -126.7500,
          -17.6719]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4873, -0.3538,  1.1748,  ...,  0.0772, -0.0056,  0.1986]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0778,  0.0080, -0.1488,  ..., -0.0020,  0.0697,  0.0469]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0091,  0.0860, -0.1410,  ..., -0.1052,  0.1454,  0.0881]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 176.6250,   53.1562,    0.1772,  ...,   60.8750, -107.3750,
           12.0078]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3567, -0.4724, -0.2634,  ...,  0.4353, -0.1903,  0.1703]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0032, -0.0200,  0.0313,  ...,  0.0428, -0.0594,  0.0120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2233,  0.3872, -0.1632,  ...,  0.0471, -0.2314,  0.0392]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-233.3750,  184.5000,  -38.3750,  ..., -127.1875,   -9.4453,
           34.2812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1351,  0.6162, -0.0939,  ...,  0.3308, -0.2327, -0.0861]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1320, -0.1942, -0.0963,  ...,  0.0483, -0.1188, -0.0538]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0604, -0.2600,  0.2052,  ...,  0.0220, -0.1599,  0.0932]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-104.7500,  -29.0000,   71.5625,  ...,  -61.7812,   95.0000,
           76.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1282,  0.4739, -0.3264,  ...,  0.4509,  0.1698, -0.5557]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1353, -0.0009, -0.0803,  ..., -0.0050, -0.0305,  0.0768]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2747, -0.2800,  0.3081,  ..., -0.2460, -0.0731, -0.2705]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-199.7500,  -51.8750,    3.6016,  ...,  -61.6250,   67.1250,
          111.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0065,  0.0966, -0.3811,  ...,  0.3066, -0.0424,  0.4031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1281, -0.1862, -0.0769,  ...,  0.0695,  0.0487,  0.1626]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.6392,  0.0625,  0.0434,  ..., -0.0642, -0.1185,  0.5771]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-118.9375,  121.4375,  -23.3594,  ...,  153.7500, -150.7500,
          -81.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4983, -0.3086,  0.7700,  ..., -0.5288,  0.2800, -0.4524]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1526, -0.1860, -0.0015,  ...,  0.1750,  0.0756,  0.1613]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4351, -0.2710, -0.4587,  ...,  0.2316, -0.2252,  0.2717]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-230.2500,  -27.3281,  273.5000,  ...,   57.4375, -158.7500,
          -66.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0660, -0.7222, -0.1361,  ...,  0.0258, -0.2208, -0.1599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1443, -0.0803, -0.0321,  ...,  0.1096,  0.0911,  0.2446]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2319,  0.0307, -0.0557,  ...,  0.2607, -0.1786,  0.1354]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 309.5000,   90.7500,  122.8750,  ..., -251.6250,  173.1250,
          254.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1974,  0.1404,  0.3997,  ..., -0.3259,  0.0840, -0.1501]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1509, -0.0505,  0.0636,  ...,  0.0111,  0.0583, -0.0830]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1635,  0.0788, -0.3477,  ..., -0.1262,  0.1450,  0.0975]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  89.0625,  240.8750,  128.3750,  ...,  129.2500, -198.2500,
         -552.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3137,  0.3848, -0.1376,  ...,  0.1195, -0.2822,  0.1075]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0682, -0.0932, -0.0038,  ..., -0.0919,  0.1993,  0.1895]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4912, -0.0797,  0.0021,  ..., -0.0717, -0.1240, -0.1960]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[141.7500,  80.8750,  83.4375,  ..., 143.5000, 326.5000, 192.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0195, -0.6255,  0.5693,  ..., -0.2781, -0.2098, -0.0774]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0432,  0.1528, -0.1140,  ...,  0.0588,  0.1032,  0.1377]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4460,  0.1005,  0.0713,  ...,  0.6118, -0.5762, -0.2189]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 222.1250, -187.2500,  177.8750,  ...,  120.0625,  -15.2891,
         -145.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6899,  0.6172, -0.5107,  ...,  0.7017, -0.5308,  0.9585]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0489,  0.0144, -0.0629,  ...,  0.1423,  0.2581,  0.0553]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3948, -0.3027,  0.0383,  ..., -0.5127,  0.0731,  0.6187]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  30.8594,   75.8125, -123.7500,  ...,  140.5000,  119.3125,
          122.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3394, -1.1514, -1.6162,  ...,  1.2490,  0.4707, -0.6528]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0764,  0.0372,  0.0450,  ..., -0.0220, -0.1031,  0.0055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0671, -0.0242,  0.0323,  ..., -0.0234,  0.0838,  0.0762]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  62.0000, -481.0000, -123.6875,  ...,   47.4375, -203.5000,
         -148.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9604, -0.3569,  0.0672,  ..., -1.1855,  0.0398, -0.3376]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0206,  0.0682,  0.1233,  ...,  0.2264, -0.0068,  0.0935]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0333, -0.3401, -0.3528,  ...,  1.0049, -0.3103,  0.5874]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-242.8750,   11.9141,  -81.1875,  ..., -359.7500,    1.5283,
         -394.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3894,  1.1191,  0.1969,  ..., -0.1521,  0.5601,  0.7109]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2235, -0.2300, -0.0374,  ..., -0.2732, -0.2078,  0.2090]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2666,  0.0814,  0.2061,  ...,  0.4202,  0.0055, -0.1788]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 180.8750,  -15.1719,   49.4688,  ...,  188.7500, -204.6250,
          251.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1385, -0.2000, -0.1176,  ...,  0.1677, -0.2517,  0.0891]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0337, -0.0416, -0.1008,  ..., -0.0829,  0.1440,  0.0400]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2454,  0.0491,  0.4045,  ...,  0.5645, -0.1848,  0.7534]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 75.2500, 213.2500, 364.2500,  ..., 113.8750, -14.2188,  -6.5039]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2318, -0.4202,  0.0726,  ...,  0.3142, -0.2150,  0.1921]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0935, -0.0370, -0.0704,  ..., -0.1088,  0.0347, -0.0277]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5752, -0.3201, -0.4082,  ..., -0.3298, -0.2886,  0.5137]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-576.5000,   53.8125, -518.5000,  ...,  -61.0000,  156.1250,
         -529.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2927, -0.8242,  0.3079,  ...,  1.0781,  0.6626,  0.8281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1148,  0.0312, -0.0516,  ..., -0.1315, -0.2268,  0.0744]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.1270,  0.3167, -0.0012,  ..., -0.1006, -0.2776,  0.7222]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -67.4375,  352.7500,   83.4375,  ..., -185.5000,  253.3750,
          122.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1616,  0.1947, -0.0179,  ...,  0.3413,  0.8901, -0.3362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0402, -0.0021, -0.0420,  ...,  0.0964,  0.2047, -0.1174]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1588, -0.6562,  0.4302,  ..., -0.2043, -0.1770, -0.5967]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 201.8750,   54.1250, -217.3750,  ..., -204.7500,  -61.6875,
          117.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1838,  0.3516,  0.6748,  ..., -0.3308,  0.2251,  0.0301]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0045, -0.2448, -0.1991,  ..., -0.1411,  0.0213, -0.1599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1342,  0.2081,  0.1625,  ...,  0.0288, -0.1240,  0.4031]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[487.0000,  91.5625, 844.5000,  ..., 177.0000, 383.2500, 236.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1172, -0.4497, -0.5752,  ..., -0.5020, -1.2852,  0.4783]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2391,  0.1000,  0.3723,  ..., -0.0526,  0.0391, -0.0978]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3152,  0.7168, -0.1573,  ..., -1.1699, -0.9487,  0.4595]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  12.4219,  321.2500,  484.0000,  ...,  -40.7812, -302.2500,
          -48.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5986, -0.0367,  0.5586,  ..., -0.3843, -1.3340,  0.7993]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1414, -0.2656, -0.1324,  ..., -0.2969,  0.3828, -0.0176]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0094, -0.2386, -0.8174,  ...,  0.6699,  0.6045,  0.0011]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[824.0000,  33.8125, -54.4688,  ..., 138.6250, 414.7500, -33.7500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 7.0117e-01, -7.8125e-02, -1.1754e-04,  ..., -1.8701e-01,
          5.0342e-01, -4.3335e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1564, -0.0501,  0.0991,  ...,  0.0864, -0.1176,  0.0135]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2744, -0.4500, -0.1766,  ..., -0.3621, -0.1158,  0.0566]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 208.1250,  694.5000,  -31.7344,  ..., -378.7500,  267.0000,
          374.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0272, -0.5713,  0.3398,  ...,  1.4814, -0.4927, -0.3125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0744, -0.2556, -0.2905,  ..., -0.1053, -0.0662, -0.1570]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5737, -0.4297,  0.6309,  ..., -0.1635,  0.4329,  0.4597]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-499.2500,  101.6250,  411.7500,  ..., -230.3750,  -78.7500,
          745.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5425,  0.5698, -0.3462,  ..., -0.2094, -0.8604, -1.2061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1858,  0.1635,  0.3110,  ..., -0.2900,  1.0674,  0.0210]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0460, -0.2542, -0.3501,  ...,  0.2668, -0.5093, -0.3247]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  128.6250,  -141.8750,  -130.8750,  ...,   445.0000, -1220.0000,
          -674.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6548, -0.8013, -0.3496,  ..., -0.0453,  0.0103, -0.8818]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1125,  0.1833, -0.3743,  ..., -0.2295,  0.2284, -0.0413]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5410,  0.2585,  0.1682,  ...,  0.1670, -0.0518, -0.3860]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 447.7500, -293.0000,  125.7500,  ...,  391.2500, -270.2500,
         -147.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5029, -0.0837,  0.0326,  ..., -0.7373, -0.6895, -0.3291]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3760,  0.1442,  0.9097,  ..., -0.5269, -0.2532,  0.4878]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3494,  0.3262,  0.2212,  ...,  0.3625, -0.3428, -0.7524]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[   2.7754, -294.0000, -455.2500,  ...,   52.6562,  293.5000,
         1027.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0986,  0.3191,  1.0752,  ..., -1.4893,  0.6548,  0.5605]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1252,  0.3645, -0.2546,  ...,  0.3362,  0.2168,  0.2238]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.7738e-04, -8.8965e-01, -1.9202e-01,  ...,  3.0258e-02,
         -6.3672e-01,  1.7737e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-244.6250,  -55.0000, -258.0000,  ..., -931.0000, -724.5000,
          442.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0498,  1.0508, -0.3813,  ..., -0.0873,  1.2529,  0.3081]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2803,  0.0807,  0.2281,  ..., -0.1161,  0.0521,  0.0827]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8765, -0.1389,  0.2202,  ...,  0.6606, -1.1270, -0.5703]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -173.7500, -1219.0000,    81.3750,  ...,   710.0000,    50.2188,
           200.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.4072,  0.2369, -0.7710,  ...,  1.5518,  0.6367,  0.0529]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3579, -0.2045, -0.0523,  ...,  0.3042,  0.6104,  0.1361]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7148, -1.0146, -0.0128,  ...,  0.4268, -2.3945,  1.1484]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 3168.0000, -3194.0000,  -580.5000,  ...,   522.0000,   115.1875,
          -604.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2411, -0.2668,  1.0264,  ...,  0.0095,  0.0076,  0.0029]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0004,  0.0031,  0.0118,  ...,  0.0026, -0.0057, -0.0050]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1875,  0.0631, -0.0892,  ...,  0.0797,  0.0977,  0.0865]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 11.2109,  -1.4951, -12.3750,  ..., -24.8281,  -5.7852,   3.3887]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0068,  0.5112,  0.3101,  ...,  0.0278, -0.0581,  0.0168]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 6.1455e-03, -4.4942e-05, -1.1683e-03,  ...,  5.2071e-03,
          5.2528e-03,  8.6975e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2327, -0.1898,  0.0600,  ..., -0.0256,  0.0375,  0.0274]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 21.5312,  45.8125, -82.1875,  ...,  45.3750,  52.7500, -43.3125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4644, -0.3381,  1.1553,  ..., -0.0379,  0.1792,  0.0743]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0693, -0.0114,  0.0167,  ...,  0.0240,  0.1116, -0.0278]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0602, -0.1276, -0.2830,  ...,  0.0903,  0.1859,  0.1299]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-186.3750, -167.6250,  -99.5000,  ...,   22.0000, -196.3750,
          262.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0400,  0.1265, -0.6626,  ...,  0.2502, -0.2473,  0.2341]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0228, -0.0780,  0.0130,  ..., -0.0146,  0.1049,  0.0534]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2050,  0.2087,  0.1135,  ...,  0.1196, -0.4226, -0.0534]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-113.6875,  299.7500, -190.2500,  ..., -245.8750,  703.5000,
         -267.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5898, -0.3113, -1.3223,  ..., -0.1404, -0.0771,  0.3003]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1060,  0.0347,  0.1086,  ...,  0.0701, -0.0886,  0.0214]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1544, -0.1058, -0.3259,  ..., -0.1110,  0.0925,  0.1771]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -747.0000,  1831.0000,  -396.7500,  ...,  -151.0000, -2552.0000,
          1322.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3574, -0.2939,  0.1575,  ..., -0.1104,  0.0486, -0.1868]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2876, -0.2227, -0.1083,  ...,  0.2491,  0.0154,  0.1475]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1029, -0.0518, -0.2646,  ...,  0.1658,  0.3535, -0.4612]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[   11.6406,  2648.0000,  -868.0000,  ..., -2114.0000,  3146.0000,
          -704.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4434, -0.9077, -0.8413,  ...,  0.0101,  0.2524, -0.0251]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1593,  0.0126, -0.0592,  ...,  0.0276,  0.0337, -0.0357]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1320, -0.2454,  0.2406,  ...,  0.1486,  0.1252, -0.3726]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-130.6250,   59.6875,  351.7500,  ..., -305.0000,  321.5000,
         -118.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2258,  0.4478, -0.2822,  ...,  0.2896,  0.0016,  0.3086]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1131, -0.1577,  0.0518,  ...,  0.1735,  0.1099,  0.1315]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0262, -0.3352, -0.1042,  ..., -0.4370, -0.3923,  0.2417]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-538.5000, -406.2500, -190.2500,  ...,  -94.3750,  306.0000,
         -242.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5903, -2.1035,  0.5771,  ..., -0.4119, -0.1689, -0.5229]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1710,  0.0866,  0.0858,  ...,  0.1912,  0.3320, -0.0245]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7539,  0.1539, -0.1592,  ...,  0.2881,  0.3059,  0.5186]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 187.6250,  -93.5625,  447.7500,  ..., -452.7500,  404.5000,
         -137.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6353, -0.3538, -0.6011,  ...,  0.1070,  0.1844, -0.2502]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1329, -0.0994, -0.0959,  ...,  0.0855,  0.1716,  0.2644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0132,  0.1088, -0.1274,  ..., -0.1777,  0.1332, -0.0853]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  75.6875, -151.5000,  322.5000,  ...,   48.5312,  220.5000,
          320.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3965, -0.0375, -0.0736,  ...,  0.2218,  0.2927, -0.0969]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1777,  0.0029,  0.0596,  ...,  0.0216,  0.0360, -0.0635]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0274, -0.3706,  0.0260,  ...,  0.2520,  0.3040,  0.0770]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -83.1250, -108.1250,  489.2500,  ...,  165.5000, -307.7500,
           54.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1686, -0.2206, -0.4604,  ..., -0.1271,  0.0379,  0.1184]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0771, -0.0282, -0.4014,  ..., -0.0014, -0.4556,  0.0897]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4727, -0.1694, -0.0597,  ..., -0.1031,  0.0501, -0.1227]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -41.9375,   51.8125,  168.1250,  ..., -105.8125, -244.2500,
          411.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3911, -0.2418,  0.4795,  ..., -0.0022,  0.1260,  0.3164]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0485,  0.1064, -0.0623,  ...,  0.1041,  0.0948, -0.0993]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1132, -0.0581, -0.0223,  ...,  0.5674, -0.5537,  0.1672]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 162.2500, -235.0000,  180.2500,  ...,  279.0000,   17.2031,
          205.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2450, -0.4236, -1.1699,  ...,  0.2700, -0.0335,  0.1152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1907,  0.2808, -0.0257,  ...,  0.3198,  0.1729, -0.1175]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2512,  0.1195, -0.0925,  ...,  0.2305,  0.1055,  0.9487]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-122.4375,  -46.5938,   -1.2148,  ...,  117.8125, -298.2500,
           94.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8164, -0.3840,  0.3857,  ..., -0.1864, -0.2700, -1.2168]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0340,  0.0287,  0.0698,  ...,  0.1512, -0.0202,  0.0733]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0313, -0.5068, -0.4980,  ..., -0.0159, -0.1558,  0.5928]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 91.7500, 168.8750, 606.0000,  ..., 281.0000, 172.0000, 106.1250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0101, -0.0917, -0.1235,  ..., -0.6831, -0.1771,  0.0626]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0427,  0.0641,  0.1284,  ...,  0.1244,  0.0446,  0.0473]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3733, -0.6841, -0.0812,  ...,  0.3513,  0.0816,  0.5015]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-701.0000,  179.6250,  308.0000,  ...,  -59.8125,  207.3750,
           93.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1210,  0.5366,  0.1360,  ..., -0.3411,  0.0035,  0.6147]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2615, -0.0974, -0.0057,  ..., -0.1167, -0.0146,  0.2064]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-2.1759e-02, -2.3353e-04,  1.0864e-01,  ..., -4.8035e-02,
          2.6978e-01,  5.8887e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  89.1875, -143.1250,  -86.3750,  ...,  433.5000,  314.2500,
         -489.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5435, -0.4341, -0.5879,  ..., -0.0493, -0.3037,  0.3672]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0190, -0.2686,  0.0431,  ..., -0.0423,  0.2236,  0.0928]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4568, -0.2507, -0.0314,  ...,  0.1167,  0.2688, -0.0595]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-227.8750,  265.2500,   -9.5938,  ...,   45.0625, -143.1250,
          -78.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.0614, 0.6177, 0.7139,  ..., 0.1797, 0.5840, 0.0535]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0865, -0.2625,  0.1062,  ...,  0.2561,  0.1042, -0.1729]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4558, -0.1711,  0.4314,  ...,  0.2627,  0.4714,  0.4778]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 268.2500, -190.1250,  140.7500,  ..., -101.5000,  256.5000,
           -6.6953]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6763,  0.5947, -0.4424,  ...,  0.0926, -0.4460,  0.5210]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1479,  0.1731, -0.0095,  ..., -0.0286, -0.2859, -0.0779]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.0879,  0.3872, -0.0803,  ..., -0.1609,  0.6187, -0.0357]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -28.3750, -190.7500, -298.2500,  ...,  193.7500,   47.8125,
         -250.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0388,  0.1932,  0.4695,  ..., -0.4016, -0.0736, -0.4697]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1045, -0.1427,  0.0234,  ...,  0.3008,  0.4148,  0.1917]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1119,  0.3574, -0.6577,  ...,  0.4070, -0.2908, -0.4685]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-116.7500,  245.0000, -143.1250,  ...,  -66.1250, -306.7500,
         -236.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1997,  0.2236, -0.4724,  ..., -0.3127, -0.2717, -0.3325]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3579, -0.1163, -0.1293,  ..., -0.0794,  0.1411, -0.3042]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3042, -0.6030, -0.7686,  ...,  0.0619, -0.7759, -0.0577]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -682.5000, -1402.0000,  -376.5000,  ..., -2014.0000,  -533.5000,
           588.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6016,  0.0115, -0.1926,  ..., -0.5850,  1.1572,  0.0471]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2397, -0.0420,  0.3499,  ..., -0.2507,  0.2349,  0.2522]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2271, -0.0253, -0.5576,  ...,  0.8071,  0.1354, -0.1033]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-338.0000, -377.2500,  -97.9375,  ...,  -16.7656,  -72.5000,
          313.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1704,  0.0744,  0.5630,  ...,  0.3408, -0.6899,  0.6133]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1573, -0.2451, -0.0901,  ..., -0.0237, -0.3069, -0.0933]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0236,  0.3423,  0.0036,  ...,  0.4746,  0.0335, -0.3010]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 446.5000,  296.7500,  287.7500,  ..., -280.0000,  -97.5000,
          147.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.2344, -1.4238, -0.2258,  ..., -0.2622,  0.2842, -0.7417]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1770, -0.0610,  0.5249,  ...,  0.2510,  0.1349,  0.3110]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8750, -0.2927, -0.6025,  ...,  0.6768,  0.5645,  0.6167]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -65.1875,  282.2500,   14.2734,  ...,  179.5000,  263.7500,
         -278.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1692, -0.1027, -0.0250,  ..., -0.0014,  0.6689,  1.0557]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3643, -0.4961, -0.1220,  ..., -0.9731, -0.5010, -0.7729]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1780, -0.5850,  0.1455,  ..., -0.5806,  0.2107,  0.5010]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 158.6250, -461.2500, -312.2500,  ...,  799.0000,  244.0000,
          826.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5107,  0.6274,  0.3354,  ...,  1.6016,  0.1171,  0.0425]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.7905,  0.1461, -0.4114,  ..., -0.5278,  0.6558,  0.4487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2152, -0.4165, -0.1153,  ..., -0.8301,  0.4514,  1.0352]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  10.0625,  494.7500, -675.0000,  ...,  312.5000,   -6.7461,
          218.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5264, -0.1902, -0.9019,  ..., -0.8564, -1.5898,  0.7349]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1317,  0.1167, -0.1372,  ..., -0.4133,  0.3035,  0.0260]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2656,  0.4302, -0.5889,  ..., -0.0015, -0.3977, -0.0109]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-546.0000,  712.5000, -239.6250,  ...,  253.0000, -107.0000,
          985.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9170, -0.6733, -0.0084,  ...,  0.4404,  0.7158,  0.4927]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0172,  0.4036,  0.5044,  ..., -0.6294, -0.0500,  0.6792]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8354, -0.7119, -0.6982,  ...,  0.1354, -0.7861, -0.2539]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  19.4219, -365.2500, -555.5000,  ...,  260.2500,  681.0000,
         1809.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0453, -0.0634, -0.1185,  ...,  0.0060, -0.0229,  1.7969]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2456,  0.4517, -0.3293,  ...,  0.2961, -0.3125,  0.3372]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.0586,  0.5015, -0.8506,  ...,  0.0938,  0.6450, -0.0250]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  263.5000,   585.5000,  -178.8750,  ...,    65.2500, -1811.0000,
           727.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0225,  0.5420, -0.5762,  ..., -1.4473,  0.7021,  0.1752]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5049,  0.1471,  0.5073,  ..., -0.0134, -0.4917,  0.1384]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2681, -0.6797,  0.4700,  ..., -0.5151, -1.3535, -0.7412]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 1226.0000, -1069.0000,  -962.5000,  ...,   359.7500,  -479.2500,
           771.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0225,  0.0417,  0.1121,  ..., -0.2571, -0.7139, -0.1803]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4287, -0.1635,  0.4868,  ...,  0.4702,  0.0761,  0.3950]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5571,  0.0206, -0.1294,  ..., -0.0726, -1.3096, -0.0291]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -146.1250, -1334.0000,  1066.0000,  ...,  -409.2500,  1361.0000,
           574.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 2.2375e-01, -1.5186e+00,  2.0586e+00,  ...,  1.8215e-03,
          2.7847e-03, -8.6517e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0003,  0.0041,  0.0031,  ..., -0.0006, -0.0101, -0.0018]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1823, -0.0133, -0.1422,  ...,  0.1096, -0.1100,  0.1124]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[37.9375, 57.2188,  1.9580,  ..., 22.5625, 30.7344, 17.7031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3489,  0.5815, -0.7847,  ..., -0.0241, -0.0155,  0.0660]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0136,  0.0029, -0.0117,  ...,  0.0017,  0.0006, -0.0067]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0749, -0.3220,  0.0424,  ..., -0.2361, -0.1356,  0.0285]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 28.2500,  77.6875,  76.5625,  ..., -40.3438, -52.9375, -18.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5298, -0.5469,  1.0645,  ..., -0.1065, -0.0511,  0.1958]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0845, -0.0604,  0.0033,  ...,  0.0268,  0.0788, -0.0156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1554,  0.1621, -0.1949,  ...,  0.1594, -0.1197,  0.3730]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 54.1562, -20.0938, -53.0312,  ..., -12.7266,  18.5781,   9.3281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0662,  1.3008, -0.8213,  ...,  0.0734, -0.0092, -0.0295]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0131,  0.0088, -0.0932,  ...,  0.0165,  0.0909, -0.0356]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5322,  0.1847,  0.0429,  ..., -0.0741,  0.1233, -0.0750]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  9.5391,  19.8594,  14.2812,  ...,  30.6094,  99.6875, -37.4375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3040, -0.4746, -0.2639,  ...,  0.1483, -0.2593, -0.1522]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0232,  0.0288,  0.0210,  ...,  0.0033, -0.1065, -0.0828]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2341,  0.2710, -0.1782,  ..., -0.0464,  0.3735,  0.3982]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 127.5000, -120.5000,   14.8047,  ...,   47.0312,  100.3750,
          156.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0810,  0.1642, -0.0936,  ..., -0.0587, -0.1366, -0.2111]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0522, -0.1032, -0.1172,  ...,  0.0295, -0.1190, -0.0269]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2173, -0.0653,  0.3152,  ..., -0.1881, -0.0609,  0.3225]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -64.0000,  -13.7969,  112.1875,  ..., -273.2500,  108.3750,
           70.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1587, -0.6235,  0.4783,  ...,  0.2329,  0.3213, -0.5391]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1573, -0.1047, -0.0858,  ...,  0.1284, -0.0244,  0.0496]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0505, -0.4158,  0.1121,  ..., -0.1716,  0.1097,  0.1384]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  -6.1523,   52.3438,   18.8281,  ...,  -48.7500,   24.7031,
         -237.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0787, -0.0330, -0.1614,  ...,  0.1287,  0.1219,  0.3345]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1412, -0.1643,  0.0268,  ...,  0.0811,  0.0837,  0.2004]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.6709,  0.0687, -0.0443,  ...,  0.5356, -0.3218,  0.0963]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 65.3125, -47.9375, -73.3750,  ..., 223.5000,  12.2422,  34.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0164, -0.3345,  0.3445,  ..., -0.3696,  0.1771, -0.1156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0428, -0.1896,  0.0384,  ...,  0.2018,  0.0994,  0.2268]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1404,  0.0487, -0.4778,  ...,  0.0119, -0.2308,  0.0005]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  80.0625,  -85.0000,  109.7500,  ...,  -14.6406, -172.8750,
          -88.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0045, -0.9248, -0.0413,  ...,  0.3293, -0.0888,  0.1819]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0296, -0.1846, -0.1725,  ...,  0.0560,  0.1498,  0.2583]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4419, -0.4849, -0.4155,  ...,  0.0405, -0.5801,  0.0884]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  90.9375,  -37.6250,   43.5625,  ..., -169.2500,   91.1250,
          -46.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1798, -0.2856,  0.4963,  ..., -0.2695,  0.3535,  0.1346]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2330, -0.1270,  0.1732,  ..., -0.0261,  0.0290, -0.1320]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3127, -0.1528, -0.3918,  ..., -0.0349,  0.5049,  0.1995]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  30.6875,  -67.5625, -208.5000,  ...,  -66.4375, -142.3750,
           72.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1641,  0.4846, -0.7207,  ..., -0.0575,  0.3274,  0.3875]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0713, -0.0820,  0.0033,  ...,  0.0460,  0.2405,  0.1143]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4868, -0.3774, -0.0366,  ...,  0.0291, -0.2534,  0.3596]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-174.3750, -170.0000,   95.1875,  ..., -163.6250,  -83.9375,
         -188.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6294, -1.1084,  0.2717,  ...,  0.4885, -0.3354,  0.1417]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1288,  0.2168, -0.1218,  ...,  0.0622,  0.0172,  0.0343]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2216, -0.0685,  0.0786,  ...,  0.1979, -0.3123, -0.1021]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  -1.8730,   42.7188,  201.2500,  ...,  -48.2188,  -43.4688,
         -321.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0085,  0.1278, -0.0510,  ...,  0.1567, -0.6255,  0.4500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0387,  0.1919, -0.1653,  ...,  0.1646,  0.2524,  0.1146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3770, -0.2408,  0.2900,  ..., -0.1169,  0.1023,  0.7148]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  39.3750, -114.8750,  -37.8438,  ...,  221.3750,  -30.8281,
           13.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3574, -0.9956, -0.9897,  ...,  0.5034,  0.4900, -0.1534]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0015,  0.0496,  0.0300,  ...,  0.0247, -0.1526,  0.1146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3240, -0.7935, -0.1302,  ...,  0.3875,  0.0171, -0.0481]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -92.0000,  366.2500, -338.0000,  ..., -167.8750,  -52.3438,
         -102.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4875, -0.5947,  0.6914,  ..., -0.4380, -0.7109,  0.3979]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0020,  0.1647,  0.2820,  ...,  0.1652,  0.0524, -0.0371]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4390, -0.8096,  0.2637,  ...,  0.3396, -0.1199,  0.3696]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 428.5000,  160.7500,  141.2500,  ...,    3.5527,   11.3828,
         -109.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3586,  0.0892,  0.0047,  ...,  0.0801, -0.0106,  0.3062]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2411, -0.2283, -0.0209,  ..., -0.3174, -0.0970,  0.1472]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0268, -0.1559, -0.1617,  ...,  0.3169,  0.2454,  0.0844]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-299.0000,  285.7500,  200.3750,  ...,   -3.5547, -393.5000,
          304.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6958, -0.3757,  0.0724,  ...,  0.6323,  0.2131,  0.8994]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0079, -0.0146,  0.0098,  ..., -0.1771,  0.1968,  0.2191]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2085,  0.3384, -0.4802,  ..., -0.3684,  0.4705, -0.0239]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 417.2500,  534.0000,  -24.6094,  ...,   31.7656,  100.6875,
         -357.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1960, -0.4189,  0.0967,  ..., -0.0742, -0.2720,  0.2418]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2634,  0.0466,  0.0662,  ..., -0.1519,  0.1322, -0.1014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2705, -0.5132, -0.3608,  ...,  0.6904,  0.0558, -0.8975]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  45.0938,   77.7500, -197.2500,  ...,  -91.3125,  -74.5625,
           97.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.5933, 0.9292, 0.1443,  ..., 0.3372, 0.1121, 0.0018]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0442, -0.1133,  0.0495,  ...,  0.0807, -0.2119,  0.1092]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.7910, -0.0123, -0.3247,  ..., -0.1774,  0.4673,  0.5928]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-123.1875,  429.5000, -377.0000,  ..., -428.0000, -270.2500,
         -259.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5981, -0.7407,  0.1804,  ..., -0.2339, -0.2439, -0.2092]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0959, -0.2271,  0.0482,  ...,  0.1648,  0.5122,  0.0850]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0356, -0.6982, -0.0606,  ...,  0.1699, -0.3774,  0.0996]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 500.0000,   94.5000,  566.5000,  ...,  161.7500,  105.3125,
         -174.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5112, -0.1666, -0.0732,  ..., -0.2800,  0.3057,  0.0289]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0603, -0.0301, -0.1949,  ...,  0.0136,  0.0624, -0.2690]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2308,  0.4102, -0.4482,  ...,  0.0608,  0.0732, -0.1757]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  65.3750,  -78.3125,  289.5000,  ..., -288.2500, -315.7500,
          301.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2539, -0.7256,  0.7695,  ...,  0.6973,  0.0298,  0.3865]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1385,  0.2103,  0.2489,  ...,  0.0212,  0.0248,  0.2954]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7241,  0.3269, -1.0205,  ..., -0.0080,  0.4729, -0.3184]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-730.0000,   11.3828,  142.2500,  ...,  -11.4141,   44.9062,
           81.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5376,  0.0430,  0.3865,  ...,  0.3923, -0.6494, -0.2452]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1236,  0.1326,  0.0560,  ..., -0.3315, -0.1328,  0.1624]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8677, -0.2783, -0.2825,  ...,  0.4077,  0.6108, -0.0382]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-204.7500,  144.8750, -360.0000,  ..., -668.5000,   51.0938,
            9.0234]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0124,  0.0376, -1.2031,  ..., -0.5825, -0.1842, -0.0504]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1011,  0.0431,  0.3240,  ...,  0.2585, -0.1703,  0.2391]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0331, -0.2246,  0.0024,  ..., -0.3086,  0.0957,  0.5811]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -31.9531, -478.2500, -303.2500,  ...,  672.5000, -226.2500,
          428.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0715, -0.3901,  0.4590,  ...,  0.2325,  0.8110, -0.5249]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0016, -0.4204, -0.4192,  ..., -0.1120, -0.2510, -0.2070]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2817, -0.1438, -0.3301,  ..., -0.2969, -0.2686,  0.4341]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-424.0000,  474.2500, -336.2500,  ..., -318.2500,  184.8750,
         -586.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.2244, 0.2195, 0.1287,  ..., 0.2595, 0.1222, 0.2487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4321,  0.2239, -0.1147,  ..., -0.1687,  0.4089, -0.0728]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2146, -0.2427, -0.1250,  ..., -0.3828, -0.4316, -0.1825]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 391.5000,    8.8125,   53.5625,  ...,  586.5000, -484.5000,
          333.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.8047, -0.7505, -1.0859,  ..., -0.4966,  1.2559,  0.6670]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1805, -0.3145, -0.5093,  ..., -0.3979,  0.0470,  0.3601]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3306,  0.3342, -0.1936,  ...,  0.0238,  0.2834,  0.5908]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 924.5000, -196.5000, -794.5000,  ..., -341.5000, -564.0000,
         -747.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1273, -0.2468,  0.3860,  ...,  0.6064, -0.2225, -0.2281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0501,  0.3030,  0.2996,  ..., -0.2715,  0.1849,  0.6025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1694, -0.6655,  0.2084,  ...,  0.4797, -0.3320, -1.3223]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 259.5000, 1057.0000,  477.5000,  ...,  283.2500,  630.5000,
          -52.6562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0527,  0.9775,  0.9087,  ..., -0.5967,  0.0709,  1.0127]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0139,  0.4121, -0.5781,  ...,  0.3662,  0.2793,  0.1448]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8208,  0.5938,  0.1028,  ...,  0.8438,  0.4849, -0.3037]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-1041.0000,  -329.0000,   124.8750,  ...,    36.5312,   -27.8594,
           -36.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0227, -1.7627,  0.0876,  ...,  0.0572, -0.1040,  1.4707]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5967, -0.1606, -0.2036,  ...,  0.3979,  0.2141, -0.4065]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1320, -0.3750, -1.1426,  ..., -0.5166, -1.1865,  0.0871]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-254.2500, -116.5625, -137.0000,  ..., -419.5000, 1631.0000,
           96.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1672,  0.5747, -0.9946,  ...,  0.5986,  0.2739, -0.3442]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3804,  0.0508,  0.1177,  ...,  0.2937,  0.2500, -0.1306]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7246,  0.4016, -0.9233,  ..., -1.0918, -0.9233,  0.8330]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[1008.0000, -255.6250,  405.0000,  ...,  903.5000, -262.7500,
          -36.0312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3237, -1.2139,  2.1426,  ..., -0.0065,  0.0053,  0.0028]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0015,  0.0005,  0.0077,  ..., -0.0005, -0.0069, -0.0032]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0728,  0.0366,  0.0584,  ..., -0.0065,  0.0453,  0.0296]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-29.4688,  26.4688, -19.2812,  ..., -16.6094, -25.6406,  11.6797]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0076,  0.1945, -0.0316,  ...,  0.0427, -0.0173,  0.0099]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0010, -0.0113,  0.0010,  ...,  0.0015, -0.0028, -0.0122]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3994,  0.4377, -0.0645,  ..., -0.1415, -0.3308, -0.0087]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -11.7266,  107.1875,  -25.4531,  ...,  -83.7500, -164.5000,
          114.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1445, -0.8066,  0.5991,  ...,  0.0111, -0.0398, -0.0644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0475, -0.0500, -0.0137,  ...,  0.0236,  0.0803, -0.0197]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1783, -0.1287, -0.0752,  ...,  0.0254,  0.0894,  0.2325]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-64.5000, -26.2031,  -9.1875,  ..., -77.0000,  28.0781,  54.2188]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4873,  0.4336, -0.6284,  ..., -0.0280, -0.1003,  0.0832]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0171, -0.0090, -0.0397,  ...,  0.0887,  0.1401,  0.0253]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2341, -0.0324, -0.1126,  ..., -0.0962, -0.0425,  0.0394]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  23.0000,   10.7109,  133.0000,  ...,  -76.7500,  -69.8750,
         -105.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1954,  0.1292, -0.1570,  ..., -0.0294,  0.1866, -0.1449]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0310,  0.0091,  0.0784,  ...,  0.0437, -0.1094, -0.0487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2295,  0.1372, -0.2712,  ..., -0.2605, -0.0818,  0.1139]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  2.5293, 111.5625,  58.2188,  ...,  14.0234,  22.2031, -33.7500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1355,  0.4075, -0.5967,  ..., -0.2123,  0.1646,  0.1934]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1373, -0.0909, -0.0579,  ...,  0.0518, -0.0892,  0.0534]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2561, -0.1049, -0.1194,  ...,  0.0169,  0.0916,  0.1583]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-172.2500,   75.1875,  105.4375,  ...,  -75.5000, -147.8750,
            3.0840]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3262,  0.8354, -0.0055,  ..., -0.5991,  0.4077,  0.0319]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2170,  0.0812,  0.0920,  ...,  0.1384, -0.1191, -0.0095]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0417,  0.0701,  0.0554,  ..., -0.0470, -0.3479, -0.1464]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[138.1250, -11.1719,  50.8438,  ..., -29.4375, -66.8125,  47.0938]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2749, -0.0688, -0.2438,  ..., -0.1315, -0.1661, -0.0390]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1000, -0.1226, -0.1069,  ...,  0.0672,  0.0648,  0.1792]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4468, -0.1361, -0.4995,  ...,  0.1521, -0.0761,  0.4734]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 118.5000,  149.3750,  -82.6250,  ...,   20.3750, -104.9375,
           35.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2384, -0.1361,  0.2290,  ..., -0.8354,  0.0684, -0.4888]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0602, -0.1027, -0.0024,  ...,  0.1597,  0.0677,  0.1207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.2754,  0.0501, -0.1917,  ..., -0.0116, -0.3975,  0.3987]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -74.8125,   29.2188, -198.5000,  ...,   86.5625,  125.6875,
          -44.9688]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2163, -0.2296,  0.2749,  ..., -0.7256,  0.1368,  0.1484]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0911, -0.0989, -0.0367,  ...,  0.1736,  0.1571,  0.1809]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1565,  0.1995,  0.0091,  ..., -0.5786, -0.5049,  0.2886]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -64.6875,  -81.6875,  -15.7734,  ...,  111.1250,   34.4375,
         -218.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2539, -0.2698,  0.0974,  ...,  0.0432,  0.5791,  0.0817]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1722,  0.0101,  0.1000,  ..., -0.0806,  0.0274, -0.0296]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1434, -0.5908, -0.1860,  ...,  0.0561, -0.3735,  0.0330]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -15.6797,   22.1250, -143.2500,  ...,  -33.5625,  -77.7500,
         -205.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5967,  0.5537, -1.3184,  ..., -0.1252,  0.0779, -0.2102]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0050, -0.2520, -0.0216,  ..., -0.0248,  0.3481,  0.1644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1376, -0.2781, -0.2378,  ...,  0.4419,  0.3928,  0.1490]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  54.7500, -220.3750,  212.0000,  ...,   67.5000,  138.2500,
         -108.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4421,  0.1232,  0.7998,  ..., -0.0484, -0.5356, -0.1454]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0074,  0.1694,  0.1017,  ...,  0.0168, -0.0283,  0.1790]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1569,  0.2800,  0.3484,  ...,  0.1238, -0.0140,  0.5396]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-138.0000,   45.0000,  -49.6875,  ...,   84.4375,  -70.5000,
          -22.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7031, -0.1393,  0.0833,  ..., -0.1174, -0.2051, -0.3931]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-8.2153e-02, -4.9171e-03, -3.2074e-02,  ...,  2.7979e-01,
          3.2422e-01, -1.7917e-04]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4912,  0.1387, -0.1989,  ..., -0.3140,  0.1293, -0.3293]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  55.5938,  -12.6719,  -64.0625,  ...,    7.0625, -167.1250,
          170.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8164, -1.2021, -0.0798,  ...,  0.5078,  0.2681, -0.6445]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1057, -0.0062,  0.0315,  ..., -0.0150, -0.0737,  0.1108]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0268,  0.0914, -0.4341,  ...,  0.0653,  0.2068,  0.1035]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -32.8438,  202.8750,  307.5000,  ..., -297.0000, -122.8750,
           84.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6357, -0.0027,  0.1667,  ..., -0.6221, -0.4412,  0.4509]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0290, -0.0340,  0.1207,  ...,  0.2446, -0.0177,  0.1055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1606,  0.0152, -0.1467,  ...,  0.6265, -0.0550,  0.0861]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 158.2500, -172.1250, -181.6250,  ...,  192.2500,  274.2500,
         -474.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5713, -0.6650,  0.2418,  ...,  0.5161, -0.1232,  0.3342]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3896, -0.3665, -0.0764,  ..., -0.3826, -0.1233,  0.1583]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7222,  0.2473, -0.2338,  ..., -0.2092, -0.5073, -0.0945]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-124.8125, -210.7500,    5.7227,  ..., -306.0000,  240.2500,
           85.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4475, -0.2549,  0.4419,  ..., -0.0278, -0.1691,  0.5420]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1608, -0.0621, -0.0579,  ..., -0.0625,  0.0660,  0.2208]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1020,  0.0835, -0.6445,  ..., -0.1748,  0.2323, -0.4807]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 183.1250, -155.2500,  -48.5625,  ..., -272.5000, -140.1250,
          -44.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0140,  0.2476, -0.9243,  ...,  0.4768, -0.0753, -0.0218]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0083,  0.0248, -0.1301,  ..., -0.0732, -0.1361,  0.0413]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5503, -0.1448, -0.0780,  ...,  0.6147,  0.0132,  0.3555]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-389.5000, -112.4375,   54.9688,  ..., -645.0000, -117.8750,
          -23.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5967, -1.4072, -0.5835,  ...,  0.2102,  0.1879,  0.1981]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0411,  0.0625,  0.0920,  ..., -0.0892, -0.1718,  0.0967]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.9521,  0.6831,  0.4727,  ..., -0.4221,  0.6548,  0.5054]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-227.7500,  213.0000,  -47.4688,  ...,   55.7500,  165.8750,
         -232.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4143,  0.2057,  0.6567,  ...,  0.0032,  0.2798,  0.8096]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0310, -0.0607,  0.0516,  ...,  0.0852,  0.2363, -0.0181]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3328,  0.0254, -0.5605,  ..., -0.0483,  0.3464, -0.4314]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 218.2500, -217.3750, -267.5000,  ..., -101.0625, -475.7500,
         -192.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3276,  0.4216, -0.8252,  ...,  0.5840,  0.1593, -0.1350]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3833, -0.2499, -0.1207,  ..., -0.0010, -0.0186, -0.0835]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0014, -0.9746, -0.9512,  ..., -0.5610,  0.6362,  0.2328]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-227.2500,  294.5000,  154.2500,  ...,   26.9844,   -3.0234,
         -244.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2871,  0.2194,  0.5630,  ..., -0.5903, -0.2942, -0.0865]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0735,  0.1414, -0.0764,  ...,  0.0127, -0.1576, -0.0265]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1322, -0.1089, -0.0651,  ..., -0.6533, -0.8579,  0.7554]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-143.7500,   12.4453,  528.5000,  ...,  -33.5312,  484.0000,
         -140.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0648,  0.1718,  0.4109,  ..., -0.7280,  0.5947,  0.6841]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0858, -0.4221,  0.0067,  ..., -0.2659,  0.3818,  0.1058]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0468,  0.3210, -0.2600,  ..., -0.1273,  0.5825, -0.0623]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-971.5000,  -97.6875,   69.8125,  ...,  502.0000,  409.7500,
         -196.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0104, -1.2686, -0.0243,  ..., -0.3335,  0.5415, -0.2247]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1400, -0.1088, -0.2152,  ..., -0.0826, -0.1398,  0.0816]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3342, -0.7827,  0.5864,  ...,  0.2009, -0.2039,  0.4424]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-295.5000, -223.5000, -127.4375,  ...,  -67.7500, -428.2500,
          163.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2183, -0.4204,  0.5688,  ...,  1.4111, -0.6489, -0.9102]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1632, -0.0693, -0.4614,  ...,  0.0637,  0.0696, -0.1379]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0128,  0.0025,  0.3066,  ..., -0.1869,  0.6333, -0.3835]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-56.1562, 103.7500, 298.2500,  ..., 448.0000, 108.2500, 137.0000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9448, -0.5381, -0.6328,  ...,  0.9277, -0.3000, -0.8262]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0966, -0.1233, -0.0133,  ..., -0.3352,  0.7344,  0.1958]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1945, -1.0850, -0.4985,  ..., -0.1754, -0.1042,  0.5415]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 171.0000, -638.0000,   48.6250,  ...,  985.0000, -229.6250,
          275.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3694, -0.0577,  0.1083,  ..., -1.4395, -0.6973, -1.2910]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0177, -0.0861, -0.3638,  ..., -0.4231,  0.0242,  0.2903]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2634,  1.2393,  0.1871,  ...,  0.3589,  0.4204,  0.2737]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-272.5000, -605.5000, -577.5000,  ...,  521.5000,  -31.7656,
          222.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7378, -0.2705, -0.4670,  ...,  1.7197, -1.0645,  1.0068]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2271,  0.3013,  0.4868,  ..., -0.1427,  0.3733,  0.5327]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3889, -1.3594,  0.8613,  ..., -0.4578,  0.1152, -1.1816]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-791.5000, -302.5000,  667.0000,  ..., -815.5000,   67.5625,
         -147.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7480,  0.3552,  0.4978,  ..., -0.3704,  0.3496, -0.5640]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0746,  0.0667, -0.4783,  ...,  0.5317, -0.1481,  0.2434]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1317, -0.0261, -0.6875,  ...,  1.5020, -0.2698, -0.0095]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  779.5000, -1096.0000,  -180.0000,  ...,  -302.5000,   634.5000,
          -271.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6724,  0.2732, -0.3088,  ..., -1.1338, -0.3020, -1.1455]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5352,  0.3721,  0.5430,  ...,  0.2065, -0.2109, -0.5786]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4573, -1.0566, -0.5308,  ...,  0.2979, -0.5654, -0.1322]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -294.5000,  -437.7500,   931.5000,  ..., -1738.0000,   207.0000,
          -396.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9321,  0.2842, -0.3198,  ...,  0.7949,  1.0420,  0.7012]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4585,  0.2708,  0.1526,  ..., -0.0479,  0.5854, -0.0191]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7466,  0.2159, -0.4185,  ...,  0.0278, -2.1426,  0.4707]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 1899.0000, -2738.0000,   550.5000,  ...,  -167.3750, -5640.0000,
          -516.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2817, -0.9102,  1.8994,  ...,  0.0123, -0.0030, -0.0063]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0021,  0.0033,  0.0076,  ..., -0.0002, -0.0091, -0.0014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1803, -0.0266, -0.0521,  ...,  0.1422,  0.1324, -0.0047]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[14.7344, -3.9668,  7.0742,  ...,  8.6172, 17.1562,  1.7471]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4780,  0.4004,  0.3079,  ...,  0.0370, -0.0302,  0.0049]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0060,  0.0082, -0.0096,  ..., -0.0070,  0.0102,  0.0305]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0831,  0.0218, -0.1848,  ..., -0.1046,  0.0638, -0.0967]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[103.0000,  49.2812,  33.1250,  ...,  92.8750, 107.0000, -37.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1169,  0.0476,  0.5610,  ..., -0.4468,  0.2590,  0.1843]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0109,  0.0020, -0.0080,  ..., -0.0117,  0.0529, -0.0361]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3027, -0.1311, -0.2278,  ..., -0.1031, -0.0762,  0.3008]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[29.2344, 18.4219, 36.7812,  ..., 46.8438,  4.7695,  9.1172]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1760, -0.1256, -0.9141,  ..., -0.0562,  0.0200, -0.1025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0862,  0.0776, -0.0443,  ...,  0.0872,  0.0753, -0.0843]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2145, -0.0493,  0.1820,  ...,  0.0369,  0.3574,  0.3843]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -19.9219,    2.9355, -107.5625,  ...,   46.8438,   24.7344,
         -118.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2159, -0.2462,  0.0698,  ..., -0.2493, -0.0206, -0.1475]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0578,  0.0152,  0.0154,  ...,  0.0948, -0.0927, -0.0663]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0242, -0.2128, -0.1968,  ...,  0.1122, -0.2168, -0.1897]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -40.3750,  123.9375,   83.6250,  ...,  191.3750,  101.3750,
         -160.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2163,  0.3210, -0.4656,  ..., -0.0091, -0.0565,  0.0206]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0171, -0.1117, -0.0651,  ...,  0.1096, -0.0764, -0.0806]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1505,  0.3184, -0.5610,  ..., -0.3179,  0.3052,  0.0294]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  5.0508,  74.3125, -47.2500,  ...,  41.0312, -19.3906, 149.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8901,  0.7261, -0.3037,  ..., -0.2515,  0.0616,  0.3054]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0684,  0.0536,  0.0666,  ...,  0.1880, -0.0040, -0.0709]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0370, -0.0363,  0.2178,  ..., -0.0825,  0.3630,  0.0113]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-108.7500,  -68.3750, -142.6250,  ..., -102.8750, -139.5000,
           71.3125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0959,  0.5112, -0.0706,  ..., -0.0063, -0.0207,  0.4221]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0726, -0.1412, -0.0883,  ...,  0.1158,  0.0507,  0.1489]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2539,  0.6348, -0.3469,  ...,  0.2061,  0.1223, -0.2683]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-211.0000,  119.0000, -159.8750,  ...,  -25.6562,  139.8750,
          -80.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1031, -0.3789,  0.2734,  ...,  0.0250,  0.6885, -0.2102]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1348, -0.0212,  0.0546,  ...,  0.1749,  0.0313,  0.2462]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2299, -0.0453, -0.1381,  ..., -0.1114,  0.6519,  0.2196]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-133.6250,   92.5000,  -30.6250,  ..., -353.5000,  182.1250,
          -88.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2612,  0.2673,  0.1793,  ..., -0.2720, -0.6294,  0.1628]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1149, -0.0280, -0.1859,  ...,  0.0809,  0.1534,  0.1829]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1805, -0.0087, -0.2717,  ...,  0.5083, -0.1436,  0.4958]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  23.0938, -213.2500,   10.4766,  ..., -115.1875, -265.7500,
          123.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0269,  0.0546,  0.1927,  ..., -0.4795,  0.5537,  0.1157]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1178, -0.0201,  0.1205,  ..., -0.0365, -0.0004, -0.0235]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0129, -0.4343, -0.1656,  ...,  0.2137,  0.1931,  0.1153]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 348.0000,  455.7500,  214.6250,  ...,  232.1250, -256.5000,
            8.1562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0028,  0.7935, -1.0361,  ...,  0.5972, -0.2939, -0.4412]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0397, -0.0890, -0.1061,  ..., -0.0928,  0.0898,  0.1434]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0683,  0.2250, -0.1292,  ...,  0.1129, -0.1346,  0.1541]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 93.0625, 162.1250, 236.8750,  ...,  51.7500,  96.0000, -15.1953]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7153, -0.8486,  0.2578,  ...,  0.0059, -0.5410,  0.4541]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0609,  0.1241, -0.1011,  ...,  0.1552,  0.0612,  0.2203]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4868,  0.4294, -1.1406,  ...,  0.2744, -0.0211,  0.6694]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 155.0000, -236.8750,   71.8750,  ...,  112.7500,  184.3750,
         -133.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0500,  0.6660, -0.0811,  ..., -0.0944,  0.0925,  0.2118]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0111,  0.0148,  0.0303,  ...,  0.1517,  0.3882, -0.0142]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5127, -0.2261,  0.2312,  ...,  0.1705, -0.0554,  0.5205]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-218.7500,  -51.5938,  -95.0000,  ...,   70.0000, -126.3125,
         -118.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6367, -1.2324, -0.6230,  ...,  0.2007,  0.9741,  0.0192]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0388, -0.0089,  0.0367,  ...,  0.0233, -0.1941, -0.1205]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0052, -0.1594, -0.1655,  ..., -0.0150,  0.5166, -0.0077]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 141.8750, -113.3125,  184.7500,  ..., -177.7500, -310.7500,
           34.2812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7930, -0.7158,  0.5874,  ..., -0.0984, -0.0584,  0.2383]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0383,  0.0063,  0.1597,  ...,  0.1921, -0.0532,  0.2491]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2023, -0.3403, -0.4456,  ...,  0.4519,  0.4194,  0.3176]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  -2.9961,   30.2656, -375.0000,  ...,  -91.0625,   17.8750,
          -34.2812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0991, -0.2524,  0.9663,  ..., -0.6357,  0.0640,  0.5557]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1808, -0.2141, -0.1235,  ..., -0.3464, -0.0290,  0.1885]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.1423, 0.2954, 0.0131,  ..., 0.1783, 0.2310, 0.1226]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -40.4062,  -82.1875,  163.3750,  ...,  448.5000,  239.5000,
         -287.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1006, -0.0691,  0.3069,  ...,  0.4470,  0.1664,  0.2834]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1429, -0.1354, -0.1902,  ...,  0.0206,  0.2184,  0.1224]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2325, -0.1663, -0.1216,  ...,  0.5098, -0.1714, -0.1207]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 133.2500,  251.3750,   75.7500,  ...,  -11.7656, -177.1250,
           16.7656]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0980, -0.4841, -0.0055,  ..., -0.1754, -0.5488, -0.0487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2673,  0.0248, -0.0779,  ...,  0.1166,  0.1475, -0.0795]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.4775, -0.4656, -0.5469,  ..., -0.3035, -0.2272,  0.1071]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-290.0000,  -69.8125, -155.5000,  ...,  -47.4062, -105.3125,
          -97.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0728, -1.0195, -0.4077,  ...,  0.9785,  0.5439,  0.0403]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0121,  0.3701,  0.1617,  ..., -0.0577, -0.1946,  0.1447]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.9629,  0.2417, -0.1615,  ..., -0.2292,  0.0576,  1.1309]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-123.9375,  -70.6250,  -50.4062,  ..., -315.0000, -339.7500,
          880.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1804, -0.1849,  0.8086,  ...,  0.2544,  0.1517, -0.7090]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0972, -0.3503, -0.0116,  ...,  0.2106,  0.2471, -0.0373]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1006, -0.1368,  0.0178,  ...,  0.5024, -0.2966, -0.0299]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 319.7500,  188.8750, -204.1250,  ..., -150.6250,  336.5000,
            8.2031]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4998, -0.3027,  0.0323,  ..., -0.7153,  0.3691, -0.3423]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2849, -0.2668, -0.3320,  ...,  0.0698, -0.0828, -0.2113]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4485,  0.2053, -0.9854,  ...,  0.0188,  0.8623,  0.0659]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  94.5625,  -33.8750,  271.2500,  ..., -131.3750,  307.2500,
           88.6875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6235,  0.1108, -0.2045,  ...,  0.0762, -0.0324, -0.7207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0775,  0.0357,  0.2429,  ..., -0.0893,  0.2659, -0.3413]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0155, -0.3320,  0.4448,  ...,  0.4062,  0.5781,  0.0912]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  33.0312, -165.2500, -208.1250,  ...,  638.0000, -104.0000,
           52.0312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1617, -0.2671,  0.0147,  ...,  0.1456,  0.0402,  0.1844]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1360, -0.4900,  0.0171,  ..., -0.2273, -0.0141,  0.2104]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2554, -0.7598,  0.2067,  ...,  0.3818,  0.5498, -0.6348]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 181.1250, -229.7500, -175.7500,  ...,  690.0000,  -23.0312,
         -105.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0787, -0.6572, -0.8359,  ...,  0.0169,  1.1328, -0.8521]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1113, -0.0997,  0.2173,  ...,  0.1055, -0.0446,  0.0768]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2450, -0.0584, -0.3098,  ..., -0.0718,  0.1161, -0.1300]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-207.0000, -132.1250, -441.7500,  ..., -122.0625, -277.5000,
          149.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3889, -0.3201,  0.0716,  ...,  1.1162, -1.1592, -0.3464]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2522, -0.1422, -0.3655,  ...,  0.0554, -0.1949, -0.5430]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3293, -1.5996, -0.0501,  ...,  0.0190, -0.4326,  0.3882]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-827.5000,  536.5000,  109.9375,  ...,   49.7812, -338.2500,
          283.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0233,  0.6113, -0.0785,  ...,  0.1957, -0.4092, -0.1697]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3462,  0.0587, -0.0596,  ..., -0.6846,  0.9858,  0.0290]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1639, -0.0662, -0.2715,  ...,  0.1652,  0.0448,  0.3955]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ 489.7500,  122.0000, -716.0000,  ..., -996.5000, -599.0000,
         -273.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8711,  0.6426, -0.8755,  ...,  0.1921,  1.4434,  0.2041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2347,  0.0769, -0.4485,  ...,  0.0592,  0.4661,  0.0219]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2651,  0.0340, -0.1334,  ..., -0.0436, -0.0030,  0.2039]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-470.2500,  509.0000, -558.5000,  ...,   23.4688, -349.7500,
          739.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2581, -0.4849, -0.2397,  ...,  0.7041, -0.8159,  0.0107]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3687,  0.3254, -0.0309,  ..., -0.2842,  0.5674,  0.0473]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8867, -0.3123,  0.2788,  ...,  0.0822, -0.4937, -0.6597]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  209.8750,   438.2500,  -585.0000,  ...,  1072.0000,   388.0000,
         -1016.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.3655, 0.3398, 0.4470,  ..., 0.1575, 0.9575, 0.3271]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0691,  0.3901, -0.5630,  ...,  0.2076,  0.1505, -0.6030]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4075, -0.1439, -1.2803,  ...,  0.2434, -0.3489, -0.1075]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[ -225.7500,   258.0000,  -395.5000,  ...,  -263.2500, -1650.0000,
           146.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1064,  0.2891,  1.2295,  ..., -0.6943,  1.4033,  1.4014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4004,  0.2308,  0.2751,  ..., -0.6650, -0.1410, -0.3430]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2864, -1.3545, -0.6523,  ...,  0.0113, -0.4304, -0.3445]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[-740.0000,  -43.5938, -460.0000,  ...,  806.0000,  299.5000,
         1162.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8218, -0.2247, -1.2500,  ...,  0.8374,  0.1627, -0.3516]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1897, -0.1415,  0.5049,  ...,  0.3267,  0.5444,  0.3516]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5498, -0.2803, -1.0039,  ...,  0.2205, -1.2607,  1.1191]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
self.weight_only
tensor([[  428.0000,    70.5000,  -443.0000,  ...,  -364.2500, -1154.0000,
         -1482.0000]], device='cuda:0', dtype=torch.float16)
Prompt: 'Statement 1 | If aH is an element of a factor group, then |aH| divides |a|. Statement 2 | If H and K are subgroups of G then HK is a subgroup of G. A. True, True B. False, False C. True, False D. False, True Answer: B  Statement 1 | Every element of a group generates a cyclic subgroup of the group. Statement 2 | The symmetric group S_10 has 10 elements. A. True, True B. False, False C. True, False D. False, True Answer: C ', Generated text: " Stat23- kein 2, wp. Future' Ferdinandlet it ("
WARNING 12-27 00:32:54 config.py:322] mixq4bit quantization is not fully optimized yet. The speed can be slower than non-quantized models.
WARNING 12-27 00:32:54 config.py:392] To see benefits of async output processing, enable CUDA graph. Since, enforce-eager is enabled, async output processor cannot be used
INFO 12-27 00:32:54 llm_engine.py:226] Initializing an LLM engine (v0.6.1.dev238+ge2c6e0a82) with config: model='/home/dataset/mixqdata/quant4/Llama-2-7b', speculative_config=None, tokenizer='/home/dataset/mixqdata/quant4/Llama-2-7b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=True, dtype=torch.float16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=mixq4bit, enforce_eager=True, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=/home/dataset/mixqdata/quant4/Llama-2-7b, use_v2_block_manager=False, num_scheduler_steps=1, multi_step_stream_outputs=False, enable_prefix_caching=False, use_async_output_proc=False, use_cached_outputs=False, mm_processor_kwargs=None)
INFO 12-27 00:32:55 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 12-27 00:32:55 selector.py:116] Using XFormers backend.
INFO 12-27 00:32:56 model_runner.py:1014] Starting to load model /home/dataset/mixqdata/quant4/Llama-2-7b...
mix------weight
4
128
INFO 12-27 00:32:56 selector.py:258] Cannot use FlashAttention-2 backend because the vllm.vllm_flash_attn package is not found. Make sure that vllm_flash_attn was built and installed (on by default).
INFO 12-27 00:32:56 selector.py:116] Using XFormers backend.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:00 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:930] Loading a weight without `output_dim` attribute in QKVParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
WARNING 12-27 00:33:01 linear.py:555] Loading a weight without `output_dim` attribute in MergedColumnParallelLinear, assume the weight is the same for all partitions.
INFO 12-27 00:33:01 model_runner.py:1025] Loading model weights took 8.3436 GB
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        ...,
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06],
        [-6.2764e-05, -6.0201e-06, -2.2388e-04,  ...,  1.8835e-05,
         -2.1338e-05, -6.7353e-06]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        ...,
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05],
        [-2.3305e-05,  9.7156e-06,  9.8944e-06,  ..., -2.2054e-06,
         -1.2100e-05,  1.7822e-05]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        ...,
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03],
        [ 3.3164e-04, -8.7929e-04,  8.4221e-05,  ..., -2.6751e-04,
          2.4021e-04, -2.1381e-03]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        ...,
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001],
        [ 0.0040, -0.0026,  0.0051,  ...,  0.0001,  0.0002,  0.0001]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        ...,
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04],
        [ 1.6689e-06,  1.4186e-04, -1.1975e-04,  ..., -2.1255e-04,
         -8.3148e-05,  2.5892e-04]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        ...,
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163],
        [ 0.0106, -0.0015, -0.0022,  ..., -0.0037,  0.0074,  0.0163]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        ...,
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120],
        [-0.0342, -0.0228,  0.0194,  ..., -0.0024,  0.0125, -0.0120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        ...,
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03],
        [-2.5024e-03,  2.6276e-02, -1.6747e-03,  ...,  6.7024e-03,
          3.5882e-05, -2.8744e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        ...,
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170],
        [ 0.3464,  0.0504,  0.3042,  ...,  0.0062, -0.0798,  0.2170]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        ...,
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041],
        [-0.9644, -0.6016,  0.6973,  ..., -0.1422,  0.0117,  0.1041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        ...,
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271],
        [ 0.0837, -0.0701, -0.2632,  ...,  0.2646,  0.1804, -0.3271]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        ...,
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425],
        [-0.5000,  0.0939, -0.0167,  ...,  0.3030,  1.4004,  0.1425]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        ...,
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370],
        [-0.1349,  0.4290,  0.2939,  ...,  0.1317,  0.5771,  0.0370]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        ...,
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747],
        [ 0.0337, -0.0253,  0.5952,  ...,  0.2261, -0.2622,  0.2747]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        ...,
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235],
        [-0.1501, -0.1736,  0.0836,  ...,  0.4453, -0.1220,  0.0235]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        ...,
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055],
        [ 0.1229,  0.4031,  0.3699,  ..., -0.2915,  0.1206,  0.6055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        ...,
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781],
        [-0.0845,  0.1453, -0.1716,  ...,  0.1552,  0.0818, -0.2781]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        ...,
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959],
        [-0.2017, -0.5020, -0.1996,  ..., -0.1021,  0.1716, -0.1959]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        ...,
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499],
        [ 0.2800, -0.3533,  0.7539,  ..., -0.2473,  0.0914,  0.0499]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        ...,
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322],
        [-0.1827,  0.1194, -0.1412,  ...,  0.1060, -0.0290,  0.2322]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        ...,
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190],
        [-0.4424,  0.0037,  0.0114,  ..., -0.2426,  0.0409, -0.5190]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        ...,
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117],
        [ 0.2976, -0.2827,  0.1888,  ..., -0.4258, -0.1768, -0.0117]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        ...,
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650],
        [ 0.4233,  0.2944, -0.1061,  ..., -0.1449,  0.0285, -0.1650]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        ...,
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727],
        [-0.1040, -0.2583, -0.8413,  ...,  0.0756, -0.6665,  0.4727]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        ...,
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036],
        [ 0.6045, -0.4424,  0.6880,  ...,  0.1241,  0.0914, -0.2036]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        ...,
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191],
        [ 0.0007, -0.0307,  0.0264,  ...,  0.0546, -0.0794,  0.0191]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        ...,
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000],
        [-1.2393, -0.5874, -0.2891,  ...,  0.1937, -0.5474,  0.3000]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        ...,
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061],
        [ 0.3372,  0.0398,  0.4148,  ...,  0.0113, -0.2262,  0.0061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        ...,
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302],
        [-0.3635,  0.2808, -0.2094,  ...,  0.0851, -0.0506,  0.0302]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        ...,
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661],
        [-0.1458, -1.3955, -0.5073,  ..., -0.0516, -0.1139, -0.0661]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        ...,
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616],
        [ 0.0378, -0.2046, -0.3091,  ...,  0.0800, -0.1467, -0.0616]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        ...,
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163],
        [ 0.1428, -0.1582,  0.1764,  ...,  0.1488, -0.3445,  0.1163]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        ...,
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584],
        [-0.0122, -0.7534,  0.0867,  ..., -0.1427,  0.3799, -0.1584]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        ...,
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364],
        [ 1.0596,  0.1281,  0.1266,  ...,  0.2939, -0.4966, -0.3364]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        ...,
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426],
        [ 0.0381,  0.1172, -0.0545,  ..., -0.2241, -0.0947,  0.6426]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        ...,
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735],
        [-0.1545, -0.6748, -0.2505,  ..., -0.2766,  0.0024, -0.0735]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        ...,
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996],
        [ 0.1154, -0.5596, -0.2976,  ...,  0.2825, -0.3779, -0.1996]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        ...,
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998],
        [ 0.3179, -0.2610, -0.4431,  ..., -0.4138,  0.5332,  0.2998]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        ...,
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337],
        [-0.4761, -0.3213,  0.0086,  ...,  0.6211, -0.0629,  0.1337]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        ...,
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883],
        [ 0.7070,  0.0119, -0.4624,  ...,  0.1282,  0.5435,  0.2883]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        ...,
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615],
        [ 0.3245, -0.4663,  0.4700,  ...,  0.4946, -0.3386,  0.0615]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        ...,
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655],
        [ 0.2312, -0.7598, -0.3669,  ..., -0.4153, -0.1383, -0.1655]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        ...,
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953],
        [ 1.8945, -0.7231, -0.4468,  ...,  0.6226,  0.4094, -0.0953]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        ...,
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627],
        [ 0.5684, -0.1505, -0.3057,  ..., -0.0030,  0.0562, -0.1627]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        ...,
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011],
        [-0.2180, -0.0812,  0.0884,  ..., -0.0069,  0.2529,  0.1011]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        ...,
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088],
        [ 0.0567,  0.1190,  0.5073,  ..., -0.0409,  0.2864,  0.3088]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        ...,
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801],
        [ 0.3579, -0.0709, -0.5664,  ..., -0.2693,  0.0283, -0.1801]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        ...,
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130],
        [ 0.0290, -0.3403, -0.1284,  ...,  0.2588,  0.4204,  0.3130]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        ...,
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672],
        [ 0.2930,  0.0439, -0.1621,  ..., -0.4822,  0.0701, -0.3672]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        ...,
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358],
        [-0.1118, -0.1231, -0.2935,  ...,  0.3940, -0.0857,  0.0358]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        ...,
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402],
        [-0.0833,  0.4104, -0.3196,  ..., -0.1726, -0.0751,  0.7402]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        ...,
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542],
        [ 0.2527, -0.3704,  0.0327,  ...,  0.0527,  0.1260, -0.0542]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        ...,
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167],
        [-0.2888,  0.2517,  0.0577,  ...,  0.0906,  0.1639,  0.4167]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        ...,
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616],
        [-0.2201, -0.1227,  0.1581,  ...,  0.1353,  0.4963, -0.0616]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        ...,
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799],
        [-1.0625,  0.5093,  0.4363,  ..., -0.5566, -0.1578, -0.1799]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        ...,
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035],
        [-0.4524, -0.2573,  0.0091,  ...,  0.2024, -0.1888,  0.6035]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        ...,
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837],
        [ 0.1589, -0.5708, -0.2229,  ..., -0.2303, -0.3303, -0.1837]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        ...,
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904],
        [-0.9976,  0.0138,  0.0269,  ...,  0.1909,  0.0856, -0.1904]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        ...,
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170],
        [-1.1504, -0.0588,  0.5605,  ..., -0.2330,  0.4326, -0.1170]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        ...,
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595],
        [ 2.3945, -0.1830, -0.0455,  ...,  0.2505, -0.2124,  0.4595]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        ...,
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793],
        [-0.1951,  0.0643, -0.1873,  ..., -0.2981, -0.1005, -0.2793]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        ...,
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116],
        [-0.3923, -0.6733, -0.0915,  ...,  0.0652, -0.7388, -0.0116]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        ...,
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579],
        [ 0.3718, -0.0863, -0.6021,  ..., -0.3169,  0.1490, -0.0579]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        ...,
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936],
        [2.2500, 1.4854, 1.0518,  ..., 0.5327, 0.4756, 0.0936]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        ...,
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759],
        [ 0.1096,  0.0936, -0.4500,  ..., -0.2443, -0.4016, -0.2759]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        ...,
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145],
        [ 0.0099,  0.0212, -0.3091,  ...,  0.3022, -0.0613,  0.1145]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        ...,
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862],
        [-0.8428,  0.1212,  0.8745,  ..., -0.0402,  0.4983,  0.1862]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        ...,
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609],
        [-0.1555, -0.6289,  0.4119,  ..., -1.3330, -1.7637, -0.0609]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        ...,
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217],
        [-0.8589, -0.0439, -0.8760,  ..., -1.4072,  0.0254, -0.0217]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        ...,
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462],
        [-0.1674,  0.2234,  0.3784,  ..., -0.1199,  0.8350, -0.2462]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        ...,
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439],
        [ 0.8848,  0.9229,  0.1627,  ...,  0.2705,  0.1951, -0.1439]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        ...,
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932],
        [ 0.0699, -1.3359, -0.6284,  ..., -0.3823,  0.0601,  0.4932]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        ...,
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795],
        [-0.3005,  1.7607, -0.1238,  ..., -0.7192, -0.0451, -0.4795]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        ...,
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362],
        [ 0.1129, -0.1270,  0.0301,  ..., -0.3113, -0.8994,  0.0362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        ...,
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349],
        [-0.7310,  0.3652, -0.4792,  ...,  0.2986,  0.3013, -0.0349]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        ...,
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436],
        [ 0.3862, -0.4617, -0.5869,  ...,  0.6533,  1.0117,  0.1436]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        ...,
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445],
        [-0.1459,  0.1259, -0.3752,  ..., -0.7651,  0.2201, -1.1445]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        ...,
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552],
        [ 0.0854, -0.7837, -0.3967,  ..., -0.3684,  0.7944, -0.5552]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        ...,
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082],
        [-0.6177,  0.8853, -0.3567,  ...,  0.7095, -0.1772, -0.1082]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        ...,
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439],
        [ 1.5625,  0.5508, -0.7642,  ..., -0.9058,  0.0421,  0.5439]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        ...,
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048],
        [-0.4246, -0.1013, -0.1848,  ...,  0.1898,  0.3518, -0.4048]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        ...,
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847],
        [-0.7627,  0.6948,  0.0432,  ...,  1.3467,  0.7871, -0.0847]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        ...,
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963],
        [-0.2666, -0.8745, -0.1232,  ...,  0.6108, -0.9033, -1.1963]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        ...,
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337],
        [-0.5620,  0.3569, -0.0037,  ..., -0.1982,  0.5923,  0.1337]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        ...,
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001],
        [ 0.1956,  0.2815,  0.1406,  ..., -0.7310,  0.5371,  0.6001]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        ...,
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412],
        [ 1.0869,  1.2373, -0.7803,  ..., -1.0283,  0.9502,  0.4412]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        ...,
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870],
        [-0.6479, -1.1191,  0.6499,  ..., -0.1871, -0.2363,  0.6870]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        ...,
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038],
        [ 0.0710,  1.0674,  0.6387,  ..., -0.4971,  0.8892, -0.4038]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        ...,
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592],
        [ 1.4209,  0.6265,  0.1415,  ..., -1.6924, -0.6152, -0.6592]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        ...,
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348],
        [ 0.4866, -0.0142, -0.4895,  ..., -0.0403, -0.4014, -0.1348]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        ...,
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116],
        [-0.5186,  0.5713,  0.6040,  ...,  1.0107,  0.2625, -0.1116]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        ...,
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926],
        [ 0.4355, -0.3164,  0.2576,  ..., -0.1212,  0.1787, -0.3926]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        ...,
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637],
        [-0.2300, -0.0935,  0.4111,  ..., -0.3159, -1.3955,  0.2637]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
call 4 bit mix
torch.Size([4096, 4096])torch.Size([12288, 2048])
tensor([[ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        ...,
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783],
        [ 2.4277, -0.6519,  0.2120,  ...,  0.5947,  0.5063, -0.4783]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([4096, 2048])
tensor([[-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        ...,
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456],
        [-1.2188,  0.5283, -0.9966,  ..., -0.1823,  1.1133,  0.7456]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([4096, 4096])torch.Size([22016, 2048])
tensor([[ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        ...,
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338],
        [ 0.3167, -0.2825,  0.0974,  ..., -0.2773, -3.5215, -0.6338]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([4096, 11008])torch.Size([4096, 11008])
INFO 12-27 00:33:02 gpu_executor.py:122] # GPU blocks: 1514, # CPU blocks: 512
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.1951e-01, -4.0503e-01,  7.5781e-01,  ...,  2.1439e-03,
         -4.0674e-04, -1.9293e-03],
        [ 5.1666e-02, -1.4941e+00,  2.0488e+00,  ..., -2.4357e-03,
          1.2245e-03,  3.5057e-03],
        [ 3.2178e-01, -1.0527e+00,  2.0195e+00,  ...,  1.6525e-02,
          4.2229e-03,  5.9662e-03],
        ...,
        [ 2.3206e-01,  3.7500e-01,  3.7817e-01,  ...,  3.9887e-04,
         -5.8746e-03,  3.6073e-04],
        [ 2.8412e-02, -1.0469e+00,  1.6025e+00,  ...,  8.5526e-03,
          4.5586e-03,  4.0092e-03],
        [-3.0014e-02, -3.5962e-01,  1.0000e+00,  ...,  4.8828e-03,
         -1.0996e-03, -2.5177e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0284, -0.0320, -0.0141,  ...,  0.0173, -0.0050,  0.0165],
        [-0.0256, -0.0105, -0.0182,  ...,  0.0077, -0.0032,  0.0037],
        [-0.0214, -0.0024, -0.0021,  ...,  0.0124,  0.0047,  0.0092],
        ...,
        [-0.0006,  0.0061,  0.0067,  ..., -0.0003, -0.0088, -0.0027],
        [-0.0031,  0.0067,  0.0039,  ...,  0.0034, -0.0103, -0.0027],
        [-0.0007,  0.0074,  0.0069,  ...,  0.0059, -0.0036, -0.0002]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0145,  0.0560, -0.1092,  ...,  0.1914,  0.1015,  0.1075],
        [-0.0226,  0.0784, -0.0087,  ...,  0.2316,  0.2432,  0.1664],
        [-0.0851, -0.0636, -0.0917,  ...,  0.1350,  0.1632,  0.0279],
        ...,
        [-0.1562,  0.0676, -0.0693,  ...,  0.0732,  0.0191,  0.0828],
        [-0.1858, -0.0165, -0.0272,  ...,  0.1053,  0.0457,  0.1203],
        [-0.0927, -0.0140, -0.0891,  ...,  0.0233,  0.0310,  0.0359]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 2.4624e-03,  9.1003e-02, -1.5266e-02,  ..., -2.8046e-02,
         -2.5543e-02,  4.5319e-02],
        [ 1.6785e-02,  1.0498e-02,  4.0030e-04,  ...,  4.3755e-03,
         -6.1264e-03,  1.7273e-02],
        [ 7.2136e-03,  7.5417e-03, -3.2387e-03,  ..., -2.6817e-03,
          7.1259e-03,  9.2387e-06],
        ...,
        [-1.9569e-03, -3.9444e-03,  5.5695e-03,  ...,  2.2583e-03,
          8.6899e-03,  7.2136e-03],
        [ 1.3649e-02, -1.4229e-02,  1.4210e-03,  ..., -5.7487e-03,
          1.0544e-02,  2.8934e-03],
        [ 4.7951e-03, -7.1030e-03, -4.7646e-03,  ...,  7.9727e-03,
          4.2939e-04, -8.5068e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.3359e+00,  1.0176e+00,  7.1973e-01,  ..., -1.4442e-02,
          1.3733e-02, -2.1470e-04],
        [ 3.0591e-01,  2.2871e+00,  1.4824e+00,  ..., -2.8702e-02,
         -1.4748e-02,  3.4027e-02],
        [ 2.6025e-01,  1.0000e+00,  7.6807e-01,  ...,  2.1606e-02,
         -5.1498e-03, -1.3641e-02],
        ...,
        [-2.3889e-01,  1.7929e-02,  6.6650e-01,  ...,  9.3889e-04,
         -7.1526e-04, -8.3389e-03],
        [-2.1582e-01,  8.1006e-01,  1.1511e-01,  ..., -2.2507e-03,
         -7.9117e-03, -4.6515e-04],
        [-9.6512e-03,  4.9561e-01,  3.1274e-01,  ..., -6.4163e-03,
          9.5224e-04, -5.0812e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 1.4008e-02, -9.4299e-03,  1.0490e-03,  ...,  1.1398e-02,
          1.0185e-02,  2.0599e-02],
        [ 2.3102e-02, -2.2373e-03,  6.4125e-03,  ...,  1.3916e-02,
          1.2512e-02,  2.7084e-02],
        [ 1.7807e-02, -1.6052e-02,  3.1891e-02,  ...,  8.7357e-03,
         -6.5279e-04,  3.5156e-02],
        ...,
        [-6.0806e-03,  5.9509e-03,  2.7585e-04,  ..., -2.7122e-03,
         -3.6850e-03, -8.3008e-03],
        [ 4.6234e-03,  1.8539e-02, -1.3260e-02,  ...,  3.4428e-03,
          9.9869e-03,  7.7095e-03],
        [-1.7414e-03,  1.2505e-02, -4.9973e-03,  ...,  9.9480e-05,
          1.2169e-02, -3.4046e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.1820,  0.3257, -0.1897,  ..., -0.0670,  0.0219,  0.2330],
        [ 0.0851,  0.1873, -0.1888,  ...,  0.0919, -0.0379,  0.1693],
        [ 0.0853, -0.1433, -0.1521,  ..., -0.0150,  0.0587,  0.2114],
        ...,
        [-0.1230, -0.1566,  0.0282,  ..., -0.1220,  0.1039,  0.1084],
        [-0.0553, -0.0436, -0.0157,  ..., -0.0064,  0.0663,  0.0525],
        [-0.1032, -0.1134, -0.0592,  ...,  0.0571,  0.1025,  0.0978]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 1.8042e-01, -5.7031e-01,  1.1511e-01,  ...,  3.3417e-02,
         -3.0609e-02,  1.5144e-02],
        [-4.0054e-05,  2.9602e-02,  1.7334e-02,  ..., -9.9945e-04,
         -6.7711e-03, -1.0010e-02],
        [-2.9316e-03, -9.5062e-03, -2.8870e-02,  ..., -6.5956e-03,
         -1.1627e-02, -2.2675e-02],
        ...,
        [ 1.5327e-02,  1.7481e-03,  2.0370e-02,  ..., -1.6663e-02,
          2.5513e-02, -1.4114e-03],
        [ 3.0499e-03, -8.9645e-03, -8.3542e-03,  ...,  1.6489e-03,
          3.1281e-03,  7.7934e-03],
        [ 2.6505e-02,  1.4420e-02,  1.3180e-03,  ..., -7.2441e-03,
         -1.0963e-02, -5.1613e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-2.0386e-01,  7.3425e-02,  6.2347e-02,  ...,  1.7258e-02,
         -3.4084e-03, -8.4877e-04],
        [ 9.0430e-01, -6.8994e-01,  1.3477e+00,  ..., -2.5977e-01,
         -8.5083e-02, -5.5450e-02],
        [ 2.4158e-01, -1.0864e-01,  3.9111e-01,  ...,  8.8074e-02,
          3.1982e-02,  1.1273e-01],
        ...,
        [ 1.3447e+00, -9.3079e-02,  7.2441e-03,  ...,  1.6345e-01,
         -2.4841e-01,  1.0901e-01],
        [ 1.2695e+00, -7.3584e-01,  2.8564e-01,  ..., -1.6602e-01,
          4.4739e-02,  6.9641e-02],
        [ 1.5957e+00, -1.7595e-03, -1.0272e-01,  ..., -4.1943e-01,
         -2.3523e-01, -2.9663e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 2.0962e-03,  5.2223e-03, -2.1133e-03,  ...,  3.3092e-03,
         -6.7592e-05,  1.0986e-02],
        [ 1.3084e-02,  1.1726e-02,  6.4545e-03,  ...,  1.7071e-03,
         -3.9520e-03, -3.9101e-03],
        [-2.4738e-03,  2.6321e-02,  1.9951e-03,  ...,  2.4948e-03,
         -1.2100e-02, -1.6144e-02],
        ...,
        [-2.9510e-02, -2.8336e-02, -2.5818e-02,  ..., -5.0476e-02,
         -9.6130e-03, -7.3662e-03],
        [-1.5488e-02,  1.5114e-02, -6.5088e-05,  ...,  2.2842e-02,
          1.9550e-03,  7.5493e-03],
        [ 3.1261e-03,  4.5052e-03,  1.7700e-02,  ..., -1.2383e-02,
          2.1820e-03,  1.5869e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0338, -0.0333, -0.0222,  ...,  0.0128, -0.0073, -0.0022],
        [ 0.1249, -0.0087,  0.0320,  ...,  0.0128,  0.0928,  0.1100],
        [-0.0049,  0.4146, -0.1455,  ..., -0.1056, -0.1395, -0.2040],
        ...,
        [ 0.1814,  0.3003, -0.2382,  ...,  0.1729, -0.0589, -0.0056],
        [-0.0614, -0.0291, -0.0236,  ...,  0.0994,  0.0707,  0.1932],
        [ 0.2620, -0.2460, -0.1456,  ...,  0.1033, -0.0194, -0.0625]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0328, -0.0394,  0.0388,  ..., -0.0291,  0.0150,  0.0311],
        [ 0.0123,  0.0247,  0.0223,  ..., -0.0078,  0.0051, -0.0170],
        [-0.0165,  0.0102, -0.0417,  ..., -0.0227,  0.0009, -0.0035],
        ...,
        [-0.0153, -0.0290, -0.0125,  ...,  0.0005,  0.0364, -0.0061],
        [-0.0174, -0.0003, -0.0056,  ..., -0.0217, -0.0108,  0.0006],
        [-0.0083,  0.0252,  0.0340,  ..., -0.0559, -0.0407, -0.0802]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0768, -0.0188,  0.0173,  ..., -0.0049,  0.0022,  0.0052],
        [ 0.2197,  0.2786,  0.1158,  ...,  0.1091, -0.2238, -0.0519],
        [ 0.2979,  0.7573,  0.5757,  ...,  0.2561, -0.0241,  0.0338],
        ...,
        [ 0.4258,  0.3657,  0.4648,  ...,  0.0797,  0.0873, -0.0378],
        [ 0.4165,  0.5615, -0.5830,  ...,  0.1243, -0.0356, -0.0920],
        [-0.3879,  0.5010, -0.5298,  ...,  0.0187, -0.0201,  0.0172]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0176, -0.0135, -0.0017,  ..., -0.0107,  0.0089,  0.0057],
        [-0.0266, -0.0061, -0.0029,  ..., -0.0262,  0.0255, -0.0022],
        [ 0.0156, -0.0028, -0.0175,  ...,  0.0179,  0.0144,  0.0043],
        ...,
        [-0.0049, -0.0070, -0.0184,  ...,  0.0146, -0.0017,  0.0065],
        [ 0.0063,  0.0049, -0.0683,  ...,  0.0450,  0.0283,  0.0242],
        [-0.0067,  0.0177, -0.0194,  ...,  0.0276,  0.0190,  0.0051]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0300,  0.0183, -0.1058,  ..., -0.0597,  0.2930,  0.0452],
        [-0.0044, -0.0560, -0.0667,  ..., -0.1115,  0.4475,  0.0279],
        [-0.1450,  0.1544, -0.3411,  ...,  0.0405,  0.3914, -0.0152],
        ...,
        [-0.2229, -0.1760,  0.0298,  ..., -0.1455,  0.2659, -0.0725],
        [-0.3596, -0.1608,  0.1333,  ..., -0.2419, -0.1797,  0.0086],
        [-0.1952,  0.0084, -0.2006,  ..., -0.1626,  0.0139,  0.0926]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.0068, -0.0240,  0.0025,  ...,  0.0038,  0.0094,  0.0162],
        [ 0.0184,  0.0788,  0.0066,  ...,  0.0171,  0.0297,  0.0620],
        [-0.0375,  0.0033,  0.0235,  ...,  0.0002, -0.0403,  0.0411],
        ...,
        [ 0.0291, -0.0111, -0.0311,  ..., -0.0025, -0.0253,  0.0040],
        [ 0.0412, -0.0041, -0.0141,  ...,  0.0162,  0.0190,  0.0197],
        [ 0.0799, -0.0369, -0.0671,  ..., -0.0374,  0.0384,  0.0275]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.2080,  0.1624, -0.0223,  ...,  0.0076, -0.0040, -0.0095],
        [ 0.3069, -1.6826, -0.6572,  ..., -0.5664, -0.2917, -0.2212],
        [-0.4675, -0.9604,  0.0592,  ..., -0.0163, -0.5713,  0.0256],
        ...,
        [ 0.3074, -0.6753,  0.4487,  ...,  0.2737, -0.0599, -0.0734],
        [ 0.3728,  0.1973, -1.2354,  ...,  0.2325, -0.0833,  0.1589],
        [ 0.4143,  0.5449,  0.1179,  ...,  0.1090,  0.2610, -0.0986]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0016, -0.0056,  0.0221,  ...,  0.0108,  0.0036, -0.0110],
        [-0.0128, -0.0102,  0.0093,  ...,  0.0013,  0.0075, -0.0139],
        [ 0.0106, -0.0289, -0.0167,  ..., -0.0112,  0.0278, -0.0195],
        ...,
        [-0.0328,  0.0383, -0.0574,  ..., -0.0059, -0.0412, -0.0798],
        [-0.0002,  0.0106, -0.0407,  ...,  0.0035, -0.0114, -0.0645],
        [ 0.0002,  0.0007, -0.0098,  ..., -0.0096,  0.0006, -0.0146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0820, -0.0894, -0.0104,  ..., -0.1830,  0.1893, -0.0624],
        [ 0.1508,  0.1434, -0.0383,  ...,  0.0495,  0.0579, -0.3867],
        [ 0.1321, -0.2986,  0.0045,  ...,  0.1134,  0.0626, -0.3296],
        ...,
        [ 0.0475,  0.0246, -0.3015,  ...,  0.0238,  0.1290, -0.2739],
        [-0.2174, -0.4397, -0.4404,  ..., -0.2222,  0.3435, -0.2744],
        [-0.1527, -0.1727, -0.2111,  ...,  0.0189,  0.2788, -0.3674]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.1400, -0.1406, -0.1149,  ..., -0.0709,  0.0778, -0.2372],
        [-0.0218,  0.1122, -0.0232,  ..., -0.0117,  0.0625, -0.0584],
        [-0.0339,  0.0154, -0.0287,  ..., -0.0182, -0.0125,  0.0604],
        ...,
        [ 0.0192,  0.0067,  0.0551,  ..., -0.0214,  0.0402, -0.0229],
        [-0.0158,  0.0065, -0.0352,  ...,  0.0113,  0.0075, -0.0122],
        [-0.0240,  0.0031,  0.0152,  ...,  0.1107, -0.0463, -0.0240]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 5.6458e-02, -1.3293e-01,  1.4001e-01,  ...,  1.2188e-03,
         -4.1771e-03,  2.9278e-04],
        [ 2.7563e-01,  1.1055e+00, -4.6582e-01,  ...,  1.1108e-01,
          2.8662e-01, -2.4316e-01],
        [ 4.4067e-02,  8.2471e-01, -3.1982e-01,  ..., -1.1426e-01,
         -6.2622e-02,  7.6256e-03],
        ...,
        [ 8.9172e-02,  8.5107e-01, -4.0601e-01,  ..., -1.4978e-01,
         -1.8848e-01,  2.4707e-01],
        [ 5.7812e-01, -3.1836e-01, -2.1204e-01,  ...,  9.1248e-02,
         -2.7344e-02,  5.2277e-02],
        [ 5.0439e-01,  5.9619e-01, -2.9370e-01,  ...,  6.4941e-02,
          1.8225e-01,  1.5881e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0007,  0.0114,  0.0526,  ...,  0.0181, -0.0123, -0.0158],
        [-0.0242,  0.0505, -0.0352,  ..., -0.0161, -0.0433, -0.0837],
        [-0.0161,  0.0453,  0.0521,  ...,  0.0242, -0.0028, -0.1100],
        ...,
        [ 0.0895, -0.0840,  0.0076,  ..., -0.0619, -0.0494, -0.0055],
        [ 0.0030, -0.0844,  0.0159,  ..., -0.0358,  0.0398, -0.0292],
        [ 0.0367, -0.0926,  0.0094,  ...,  0.0495,  0.0274,  0.0051]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0543, -0.1142, -0.0817,  ...,  0.0432, -0.0547, -0.1293],
        [ 0.1995,  0.1591, -0.4097,  ...,  0.3245, -0.0294,  0.0897],
        [ 0.1425,  0.2247, -0.1732,  ..., -0.0325, -0.1130,  0.1477],
        ...,
        [-0.4033, -0.0853, -0.2263,  ..., -0.1177, -0.0314, -0.1991],
        [-0.0576,  0.1798, -0.1476,  ..., -0.0872, -0.4788,  0.0807],
        [-0.2988, -0.1304, -0.2576,  ...,  0.1340, -0.1572,  0.2419]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.0128, -0.0106, -0.0137,  ..., -0.0223,  0.0172, -0.0039],
        [ 0.0133,  0.1547, -0.0446,  ...,  0.0799, -0.1298,  0.0500],
        [-0.0244,  0.0052, -0.0914,  ..., -0.0344,  0.0191, -0.0193],
        ...,
        [-0.0683,  0.0493,  0.0129,  ..., -0.1147, -0.0633,  0.0135],
        [ 0.0307,  0.0029, -0.0250,  ...,  0.0089, -0.0206, -0.1127],
        [ 0.0024,  0.0493, -0.0584,  ..., -0.0594,  0.0049,  0.0459]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0903, -0.1174,  0.0690,  ...,  0.0089, -0.0026, -0.0094],
        [-0.2179,  1.1357, -0.7671,  ...,  0.9155, -0.4658, -0.0622],
        [-0.2386,  0.3284, -1.0674,  ...,  0.7729,  0.3767, -0.0566],
        ...,
        [ 0.8784, -0.4453,  0.2200,  ...,  0.1104,  0.1234,  0.5464],
        [ 0.5684, -0.1959, -0.0058,  ..., -0.0040,  0.5024,  0.0134],
        [ 0.0103, -0.4194,  0.6460,  ...,  0.2052, -0.3926,  0.0270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0109,  0.0131,  0.0270,  ..., -0.0370, -0.0109, -0.0026],
        [-0.1713,  0.0212, -0.0997,  ..., -0.0334,  0.1619,  0.0006],
        [-0.0340,  0.0008,  0.0049,  ..., -0.0348,  0.0041,  0.0051],
        ...,
        [ 0.1222, -0.0693, -0.0547,  ...,  0.0039, -0.0088,  0.0889],
        [ 0.0536,  0.0881,  0.0286,  ...,  0.0240, -0.0113,  0.0430],
        [ 0.1061, -0.0085, -0.2025,  ..., -0.1041, -0.0279, -0.0264]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0284,  0.0375,  0.0362,  ...,  0.1283, -0.1316, -0.1168],
        [-0.1193,  0.1740, -0.1381,  ...,  0.2137,  0.1708, -0.3560],
        [-0.0240,  0.2256, -0.1074,  ..., -0.6909, -0.3154, -0.5825],
        ...,
        [-0.4868,  0.3181, -0.0801,  ...,  0.1230,  0.0795, -0.1099],
        [-0.1381,  0.2607,  0.1566,  ..., -0.0452,  0.0338,  0.3044],
        [-0.0473,  0.3479,  0.0456,  ...,  0.2313,  0.0793, -0.4861]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0089,  0.0043, -0.0113,  ..., -0.0181,  0.0005,  0.0024],
        [ 0.1282,  0.0493,  0.0452,  ..., -0.0178, -0.0153,  0.0213],
        [ 0.0834, -0.0182, -0.0036,  ...,  0.0018, -0.0428, -0.1064],
        ...,
        [ 0.1350,  0.0476,  0.0351,  ...,  0.0364, -0.0617,  0.0400],
        [-0.1351,  0.0093, -0.0469,  ..., -0.0251,  0.0605, -0.0153],
        [-0.0516,  0.0961, -0.0247,  ..., -0.0159,  0.0618, -0.0268]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0403, -0.0154, -0.0115,  ..., -0.0071,  0.0028,  0.0103],
        [-0.1187,  0.2656, -0.8325,  ..., -0.1713, -0.2534,  0.1281],
        [-0.1863,  0.7847, -0.7856,  ...,  0.2018, -0.3921,  0.6016],
        ...,
        [ 0.1247,  0.2571, -0.1167,  ...,  0.0953,  0.1582, -0.6792],
        [-0.0023, -0.0407,  0.7446,  ...,  0.4016, -0.3005,  0.1648],
        [-0.0381,  0.3350, -0.0825,  ...,  0.5234,  0.1812, -0.0426]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0047,  0.0259,  0.0037,  ...,  0.0092, -0.0160,  0.0088],
        [-0.0201, -0.0057, -0.0005,  ...,  0.0410, -0.0229, -0.0042],
        [-0.0384, -0.0500,  0.0126,  ...,  0.0353,  0.0261,  0.0060],
        ...,
        [ 0.0800,  0.0048, -0.0572,  ...,  0.0390,  0.0926, -0.0008],
        [ 0.1210,  0.1168,  0.1702,  ..., -0.1193,  0.0437,  0.1138],
        [-0.1022, -0.0358, -0.0430,  ..., -0.0986,  0.0563, -0.0228]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0723, -0.0899, -0.3174,  ...,  0.0633, -0.1979,  0.2529],
        [-0.0409,  0.0728,  0.4758,  ...,  0.1116, -0.0049, -0.4192],
        [-0.0856,  0.4148, -0.1838,  ..., -0.1553,  0.1511, -0.2212],
        ...,
        [-0.1443, -0.6084, -0.6768,  ..., -0.0220, -0.4790,  0.1760],
        [ 0.6597, -0.6230,  0.0124,  ..., -0.0201, -0.7446,  0.2959],
        [ 0.1278, -0.6108, -0.1552,  ...,  0.0073, -0.3096,  0.2251]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.0042, -0.0091, -0.0084,  ..., -0.0254,  0.0036, -0.0028],
        [-0.0247, -0.0403, -0.0129,  ..., -0.1238,  0.0787,  0.0200],
        [ 0.1562,  0.1315,  0.0058,  ...,  0.0901, -0.0165, -0.1127],
        ...,
        [-0.0748,  0.0161,  0.0756,  ..., -0.0723, -0.1587,  0.0076],
        [ 0.0998, -0.0466, -0.1082,  ...,  0.1247, -0.1328,  0.0057],
        [ 0.0124, -0.0859,  0.0997,  ..., -0.0528,  0.0243, -0.1532]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0450,  0.0461, -0.0175,  ...,  0.0037, -0.0153,  0.0072],
        [-0.0248,  0.2318,  0.2495,  ...,  0.0219,  0.0222, -0.0875],
        [-0.0376,  0.0200, -0.7671,  ..., -0.3518, -0.5186, -0.4968],
        ...,
        [-0.0302, -0.6777,  0.0750,  ..., -0.0556,  0.2334,  0.1758],
        [ 0.2922, -0.4805, -0.4133,  ...,  0.1262, -0.4204, -0.0338],
        [-0.2876, -0.3589, -0.1606,  ..., -0.7495, -0.0897, -0.2900]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0113,  0.0394,  0.0316,  ..., -0.0376, -0.0127, -0.0314],
        [ 0.0096, -0.0297,  0.0123,  ...,  0.0094, -0.0027,  0.0156],
        [-0.0186, -0.0332,  0.0362,  ..., -0.0047,  0.0109,  0.0453],
        ...,
        [ 0.0983,  0.0994,  0.0472,  ...,  0.0870, -0.0293,  0.0009],
        [-0.0085,  0.0418,  0.0707,  ..., -0.0762,  0.0831,  0.0232],
        [ 0.1008, -0.0169,  0.0084,  ..., -0.0439, -0.0058,  0.1353]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0524, -0.2239, -0.0060,  ...,  0.2495,  0.0778,  0.1578],
        [-0.5288,  0.2089,  0.0118,  ...,  0.0350, -0.0338,  0.6230],
        [-0.4844, -0.0040,  0.1395,  ...,  0.0266,  0.1853,  0.0814],
        ...,
        [-1.2119, -0.2277,  0.2313,  ..., -0.4160, -0.3276, -0.0541],
        [-0.4954, -0.0726,  0.1223,  ..., -0.1927, -0.3062, -0.1368],
        [-1.3574, -0.2651, -0.1830,  ..., -0.2227, -0.3035, -0.2585]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0177, -0.0209, -0.0072,  ..., -0.0037, -0.0094, -0.0132],
        [ 0.0169, -0.0300,  0.1321,  ...,  0.1069,  0.0683,  0.0727],
        [-0.0859, -0.1261, -0.0873,  ...,  0.1501,  0.0296,  0.0120],
        ...,
        [-0.2472, -0.0658, -0.0218,  ...,  0.0006, -0.0395,  0.1158],
        [-0.1014, -0.0621,  0.1141,  ..., -0.0535, -0.0061,  0.0687],
        [ 0.1137,  0.1204, -0.0083,  ...,  0.2034, -0.1385, -0.1567]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.1112,  0.0218, -0.0129,  ..., -0.0048, -0.0059,  0.0083],
        [ 0.2986,  0.2417, -0.0834,  ..., -0.0816,  0.0650,  0.0548],
        [ 0.0445, -0.6519,  0.0132,  ...,  0.3091,  0.4248, -0.3647],
        ...,
        [ 0.1953,  0.5078,  0.7124,  ...,  0.1255,  0.0449, -0.2637],
        [-0.1461, -0.1604,  0.1606,  ...,  0.3284,  0.2058,  0.2323],
        [ 0.0892,  0.2915,  0.5835,  ...,  0.0149, -0.0297,  0.0772]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0162,  0.0426,  0.0072,  ..., -0.0101, -0.0018, -0.0426],
        [ 0.0284,  0.0549, -0.0081,  ...,  0.0131,  0.0139, -0.0414],
        [ 0.0422,  0.0308, -0.0103,  ...,  0.0436,  0.0029, -0.0221],
        ...,
        [ 0.2059,  0.0997, -0.0077,  ..., -0.0726,  0.0332, -0.1532],
        [ 0.1021,  0.0469, -0.0254,  ..., -0.1152,  0.2218,  0.0734],
        [ 0.1383,  0.0655,  0.1166,  ...,  0.0230,  0.1030, -0.0311]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.2195, -0.0548, -0.1335,  ..., -0.1395,  0.0974, -0.1815],
        [-0.9507,  0.1248,  0.3064,  ...,  0.0867,  0.1545, -0.3364],
        [-0.6050, -0.0021, -0.0249,  ...,  0.0173,  0.2299, -0.3103],
        ...,
        [-0.5576, -0.0271,  0.0027,  ..., -0.0439,  0.2314, -0.1490],
        [-0.4189, -0.1459, -0.5527,  ..., -0.3481,  0.2974, -0.2491],
        [-0.2086, -0.0529,  0.2324,  ..., -0.3196,  0.0677,  0.2362]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0060, -0.0134, -0.0184,  ...,  0.0119, -0.0069, -0.0136],
        [ 0.0374, -0.0423,  0.0671,  ..., -0.0519, -0.0440, -0.0456],
        [-0.0041,  0.0559, -0.1085,  ...,  0.0625, -0.0714, -0.0638],
        ...,
        [-0.2251,  0.1031,  0.1617,  ...,  0.2261, -0.1181,  0.0169],
        [-0.1287, -0.0869,  0.0443,  ...,  0.1104, -0.1968,  0.0454],
        [-0.0932, -0.0406, -0.0164,  ..., -0.0551, -0.0500, -0.0796]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0575, -0.1893, -0.0219,  ...,  0.0201, -0.0099,  0.0057],
        [ 0.4612,  0.5132,  0.1505,  ...,  0.3484,  0.1407, -0.0378],
        [ 0.5547,  0.0687,  0.2465,  ...,  0.2510,  0.0485,  0.4609],
        ...,
        [-0.4958, -0.6260, -0.3152,  ..., -0.4956, -0.4285, -0.1113],
        [ 0.2539,  0.2216, -0.6899,  ..., -0.6499, -0.2329,  0.3345],
        [ 0.1633,  0.5317,  0.1407,  ..., -0.0901,  0.2988,  0.4153]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0264,  0.0298,  0.0284,  ..., -0.0297,  0.0062,  0.0469],
        [ 0.0241, -0.0097,  0.0039,  ...,  0.0046, -0.0165,  0.0217],
        [-0.0246, -0.0092,  0.0286,  ...,  0.0598, -0.0094,  0.0505],
        ...,
        [-0.0253, -0.2214,  0.0037,  ..., -0.0565, -0.1399, -0.0681],
        [ 0.2617, -0.0985,  0.0945,  ..., -0.0739, -0.0979, -0.1000],
        [ 0.0847,  0.0232, -0.0176,  ...,  0.0524, -0.1761,  0.0140]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-1.0925e-01, -4.5929e-02, -1.1780e-01,  ..., -6.8970e-02,
         -2.0523e-02,  1.0364e-01],
        [-1.9507e-01, -1.1774e-01, -2.5732e-01,  ..., -1.0950e-01,
          3.1421e-01,  4.1237e-03],
        [-3.9331e-01,  1.6113e-01,  1.1615e-01,  ...,  1.1273e-01,
          2.1423e-01, -3.1261e-03],
        ...,
        [-4.5044e-02, -1.4026e-01, -1.1993e-01,  ...,  1.1986e-04,
          5.7373e-01, -5.9326e-01],
        [-3.2910e-01, -2.6807e-01, -2.7808e-01,  ...,  1.4294e-01,
          1.7798e-01, -4.6826e-01],
        [-1.6907e-01, -2.4634e-01, -2.9663e-01,  ...,  1.7444e-01,
          1.5479e-01,  1.1383e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0012,  0.0096, -0.0069,  ...,  0.0269,  0.0083, -0.0114],
        [-0.0270,  0.0126, -0.1060,  ..., -0.2203,  0.0361, -0.0138],
        [ 0.0593, -0.1447, -0.2050,  ..., -0.1163,  0.1969,  0.1393],
        ...,
        [ 0.0260, -0.0586,  0.0212,  ..., -0.0695,  0.1804,  0.0398],
        [-0.1331,  0.0421,  0.1161,  ..., -0.0093,  0.0070,  0.0217],
        [-0.0529, -0.0715,  0.0467,  ..., -0.1891,  0.0107,  0.0211]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0131, -0.1102,  0.1304,  ...,  0.0133,  0.0024, -0.0023],
        [-0.6680,  0.0867, -0.4761,  ...,  0.1746, -0.1512,  0.1321],
        [ 0.2302,  0.1730, -0.2157,  ..., -0.2013, -0.7046, -1.0908],
        ...,
        [ 0.0062,  0.2341, -0.1884,  ...,  0.5273,  0.2203, -0.1534],
        [ 0.3809, -0.4722, -0.6665,  ...,  0.1350, -0.4563, -1.0117],
        [-0.6089,  0.4087,  0.1927,  ...,  0.1584, -0.0259, -0.0778]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0045,  0.0483,  0.0322,  ..., -0.0528, -0.0542,  0.0181],
        [-0.0266,  0.0461,  0.0594,  ..., -0.0106, -0.0272,  0.0240],
        [-0.0003,  0.0188,  0.0290,  ...,  0.0148, -0.0208,  0.0395],
        ...,
        [-0.0900, -0.0997,  0.0297,  ..., -0.0562,  0.0329,  0.1486],
        [ 0.0201, -0.1635,  0.0931,  ..., -0.0758,  0.1852, -0.0280],
        [-0.0306,  0.0418,  0.1542,  ..., -0.0464,  0.0583,  0.0535]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0980, -0.3345, -0.1488,  ..., -0.0410, -0.1014,  0.0385],
        [ 0.1203, -0.6289,  0.0030,  ..., -0.3372, -0.5566,  0.1032],
        [ 0.4731, -0.3298, -0.4512,  ..., -0.1136, -0.5386,  0.3635],
        ...,
        [ 0.5884, -0.5117, -0.4163,  ..., -0.2123, -0.0972,  0.1094],
        [ 0.0349, -0.3357, -0.6504,  ..., -0.3103, -0.0260, -0.1024],
        [ 0.9736,  0.4370, -0.5654,  ..., -0.3184, -0.1709, -0.0963]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0017, -0.0397, -0.0124,  ...,  0.0145, -0.0032, -0.0103],
        [-0.0019, -0.0876,  0.0859,  ...,  0.0680,  0.0381,  0.1209],
        [ 0.0169, -0.1243,  0.1345,  ...,  0.1425, -0.0383,  0.0338],
        ...,
        [ 0.0168,  0.1464,  0.0674,  ...,  0.1936,  0.0145,  0.1061],
        [ 0.0051,  0.0281, -0.0700,  ...,  0.2629, -0.1089, -0.0733],
        [-0.0789, -0.2119,  0.1306,  ...,  0.0223, -0.1091, -0.2240]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.0726, -0.0099, -0.0952,  ..., -0.0424, -0.0235,  0.0198],
        [-0.4380, -0.5669,  0.0911,  ...,  0.1472,  0.2639,  0.0105],
        [-0.9932, -0.1082,  0.5312,  ..., -0.2727, -0.2424,  0.0763],
        ...,
        [ 0.1509,  0.1202,  0.0820,  ..., -0.7202, -0.0250, -0.0270],
        [-1.0234, -0.5317,  0.5459,  ...,  0.1224,  0.1764, -0.1533],
        [-0.3411, -0.1804, -0.4863,  ...,  0.7100, -0.1864,  0.0645]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0205, -0.0079,  0.0067,  ..., -0.0029, -0.0008,  0.0273],
        [-0.0184, -0.0305,  0.0033,  ...,  0.0420, -0.0164,  0.0228],
        [-0.0308, -0.0674, -0.0009,  ...,  0.0383, -0.0186,  0.0123],
        ...,
        [ 0.0853,  0.1127,  0.1630,  ...,  0.0413, -0.0243,  0.0299],
        [-0.0965,  0.1281,  0.1449,  ...,  0.1823,  0.0853,  0.0316],
        [-0.0933, -0.0036, -0.1267,  ...,  0.1512,  0.0905,  0.1205]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1965, -0.0297, -0.0163,  ...,  0.0862,  0.0109, -0.1135],
        [-0.2825, -0.6123, -0.2881,  ..., -0.0022, -0.0781, -0.3110],
        [ 0.0581, -0.1797, -0.2625,  ...,  0.0935,  0.2971,  0.0609],
        ...,
        [-1.6230, -0.4412, -0.3125,  ...,  0.2764, -0.0147,  0.2004],
        [-0.5527, -0.3999, -0.6807,  ...,  0.0264,  0.3904, -0.1050],
        [-0.4792,  0.0811, -0.5435,  ...,  0.3015, -0.6006, -0.1549]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0171, -0.0222, -0.0176,  ...,  0.0112,  0.0009, -0.0046],
        [ 0.0670, -0.0288, -0.0150,  ..., -0.0936,  0.0608, -0.0197],
        [ 0.0094,  0.2335,  0.0048,  ...,  0.1153,  0.0377, -0.0484],
        ...,
        [ 0.1010, -0.1876,  0.1851,  ..., -0.0400,  0.0797, -0.1031],
        [-0.0562,  0.0647, -0.0438,  ..., -0.2264, -0.0494,  0.0378],
        [ 0.1848, -0.0704,  0.0680,  ..., -0.0531,  0.0207,  0.0015]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.0571, -0.0219,  0.0133,  ..., -0.0149,  0.0123,  0.0089],
        [ 0.0250,  0.2876,  0.2878,  ..., -0.3601, -0.4438, -0.2966],
        [-0.7456, -0.3179,  0.7539,  ...,  0.6885,  0.2133,  0.1177],
        ...,
        [ 0.3301,  0.1209, -0.6982,  ...,  0.0308,  0.4575, -0.1968],
        [-0.1805,  0.0544, -0.0935,  ...,  0.5986, -0.1320,  0.3442],
        [-0.2185,  0.6128, -0.0090,  ..., -0.5073,  0.4329,  0.2362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0009, -0.0109, -0.0062,  ...,  0.0029, -0.0250, -0.0474],
        [-0.1161, -0.0388,  0.0818,  ..., -0.0217,  0.0255, -0.0450],
        [-0.0866,  0.0423,  0.0142,  ...,  0.0558, -0.0451, -0.0285],
        ...,
        [ 0.2620,  0.1005,  0.0081,  ...,  0.0648,  0.0766,  0.1438],
        [ 0.1567,  0.1010, -0.0364,  ..., -0.0455,  0.0252,  0.2164],
        [ 0.2051,  0.0321,  0.0019,  ..., -0.0592,  0.0195,  0.1353]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1719,  0.0698, -0.1020,  ..., -0.0279,  0.0639, -0.0524],
        [-0.2593, -0.3862,  0.1536,  ..., -0.1791, -0.2566,  0.4614],
        [ 0.4263,  0.0646,  0.3313,  ..., -0.5918, -0.2820, -0.2344],
        ...,
        [ 0.2578, -0.6401, -0.0154,  ..., -0.2499, -0.0016,  0.2561],
        [ 0.4883, -0.8110, -0.5161,  ..., -0.3464, -0.3650, -0.3789],
        [ 0.5430, -0.6821, -0.2686,  ..., -0.4365, -0.1119, -0.0333]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.0029, -0.0147,  0.0058,  ...,  0.0024,  0.0191,  0.0072],
        [-0.0224, -0.1252, -0.0287,  ..., -0.1582, -0.1740,  0.0479],
        [-0.0443, -0.0575, -0.0389,  ..., -0.2646,  0.0869, -0.0261],
        ...,
        [-0.5479,  0.1255, -0.1102,  ...,  0.1238,  0.0020,  0.1407],
        [ 0.0169,  0.2002, -0.1824,  ...,  0.2642, -0.1381, -0.0826],
        [-0.1713, -0.0461, -0.2058,  ..., -0.2317, -0.0154, -0.0343]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.1057, -0.1631,  0.0392,  ...,  0.0146, -0.0037,  0.0130],
        [ 1.4180,  0.1042, -0.2578,  ..., -0.5015, -0.2764, -0.4121],
        [ 2.2812, -0.2539,  0.6611,  ...,  0.0607,  0.3513, -0.5415],
        ...,
        [ 2.1582,  0.0058,  0.2703,  ...,  0.0197, -0.8286,  0.4329],
        [ 2.6270, -0.0369, -0.6870,  ...,  0.8574,  0.2810, -0.0803],
        [ 1.6621, -0.8462,  0.1517,  ...,  0.6650, -0.6616, -0.1449]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0005, -0.0323,  0.0443,  ...,  0.0012, -0.0048, -0.0182],
        [ 0.0369, -0.0311, -0.0399,  ...,  0.0706,  0.0190,  0.0254],
        [-0.0525, -0.1621,  0.0197,  ...,  0.0098, -0.0263, -0.0647],
        ...,
        [-0.0243, -0.1442,  0.1259,  ..., -0.1993,  0.2244,  0.0612],
        [ 0.0258, -0.0954, -0.2212,  ..., -0.0324,  0.2673,  0.1093],
        [ 0.0117, -0.0619,  0.0853,  ...,  0.0328,  0.0953,  0.0448]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0311, -0.0283, -0.1158,  ...,  0.0070, -0.0012, -0.0883],
        [ 0.4250,  0.5317, -0.7290,  ...,  0.7598,  0.1620, -0.1120],
        [ 0.3804,  0.5098, -0.6157,  ...,  0.2742,  0.3169, -0.0522],
        ...,
        [ 0.0280,  0.5200, -0.4663,  ...,  0.5166, -0.1411,  0.3223],
        [-0.6416,  0.5298, -0.1036,  ...,  0.5620,  0.1086, -0.0748],
        [-0.3931, -0.2747, -0.3127,  ...,  0.2203,  0.4839, -0.1802]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.0264,  0.0103,  0.0099,  ...,  0.0134,  0.0151, -0.0214],
        [ 0.1345,  0.0228, -0.1152,  ...,  0.0431,  0.1165,  0.0283],
        [-0.0180,  0.0658, -0.0828,  ...,  0.0745,  0.0686,  0.1592],
        ...,
        [ 0.2196,  0.1346, -0.0667,  ...,  0.2483, -0.2605, -0.1587],
        [-0.0739,  0.1321, -0.0927,  ...,  0.1250, -0.0238, -0.2279],
        [-0.1360,  0.0005, -0.1300,  ...,  0.2683,  0.3503, -0.1896]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0116,  0.0048, -0.0029,  ...,  0.0095,  0.0236,  0.0061],
        [-0.0071,  0.3271, -0.7690,  ..., -0.2445,  0.0821, -0.1610],
        [ 0.2815, -0.0835, -0.3938,  ...,  0.5869, -0.2615, -0.2820],
        ...,
        [-0.1694,  0.3521,  0.0574,  ..., -0.5249,  0.4285,  0.4099],
        [ 0.4202,  0.5010,  0.3020,  ..., -0.1417,  0.1982,  0.0463],
        [ 0.1508, -0.2041,  0.0075,  ...,  0.0022,  0.1560,  0.5474]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0698,  0.0369,  0.0016,  ..., -0.0204,  0.0005,  0.0129],
        [-0.0711, -0.0155,  0.0080,  ...,  0.0519,  0.0493,  0.0244],
        [-0.0271, -0.0216, -0.0822,  ...,  0.0757,  0.0990, -0.0887],
        ...,
        [-0.0307,  0.1367,  0.0312,  ...,  0.2849,  0.0092,  0.1007],
        [-0.1237, -0.0352,  0.0235,  ...,  0.1692,  0.1600,  0.0587],
        [ 0.1054,  0.0998,  0.0690,  ...,  0.0815,  0.1416,  0.1030]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0477,  0.0854,  0.0069,  ...,  0.0908, -0.1003, -0.1255],
        [-0.1842, -0.0847, -0.6294,  ..., -0.1265, -0.5156,  0.2115],
        [-0.4731, -0.4751, -0.2913,  ...,  0.4709, -0.7803,  0.5591],
        ...,
        [-0.0910, -0.6797, -0.4717,  ...,  0.9243,  0.0737,  0.7446],
        [ 0.2086, -0.2319,  0.0612,  ...,  0.1206,  0.1726,  0.3589],
        [-0.0536,  0.2106, -0.1663,  ...,  0.6709,  0.4419,  0.3638]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.0131, -0.0079,  0.0231,  ...,  0.0123, -0.0038, -0.0448],
        [ 0.2350, -0.1975, -0.1226,  ...,  0.1818,  0.1549,  0.2396],
        [-0.1113,  0.2000, -0.0131,  ..., -0.1227,  0.0318,  0.0437],
        ...,
        [ 0.0942,  0.0632,  0.0530,  ..., -0.0609, -0.1981, -0.3088],
        [ 0.2158, -0.0194, -0.3044,  ...,  0.0107,  0.0675, -0.2040],
        [-0.1241, -0.2147, -0.3340,  ...,  0.0128, -0.0431,  0.1407]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0313, -0.0403,  0.2258,  ..., -0.0074, -0.0215, -0.0194],
        [-0.1586, -0.1707, -0.4180,  ...,  0.0693,  0.4893, -0.1259],
        [-0.6460, -0.2632, -0.4028,  ...,  0.5820,  0.7744, -0.2333],
        ...,
        [-0.2446, -0.7847,  0.5840,  ..., -0.9194, -0.2607,  0.0420],
        [ 0.1584, -0.5630, -0.0910,  ..., -0.9878, -0.0152, -0.1023],
        [ 0.8711, -0.1899,  0.3816,  ..., -0.6348, -0.4487, -0.3965]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0107, -0.0052,  0.0258,  ..., -0.0355, -0.0961, -0.0358],
        [-0.0244, -0.0236,  0.0480,  ..., -0.0288, -0.0193, -0.0488],
        [ 0.0250, -0.0396, -0.0396,  ..., -0.0778,  0.0022, -0.0461],
        ...,
        [-0.0518, -0.1924,  0.0696,  ...,  0.1201,  0.0829, -0.1393],
        [-0.1655, -0.3718,  0.2070,  ..., -0.3186,  0.0428, -0.1465],
        [-0.0191,  0.0024,  0.1748,  ..., -0.0554,  0.0310,  0.2087]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0399,  0.0801, -0.1229,  ...,  0.0293, -0.0623,  0.2502],
        [ 0.3054, -0.1948,  0.0923,  ..., -0.2576,  0.1062, -0.3250],
        [ 0.6909, -0.0439, -0.3643,  ..., -0.1360,  0.0862, -0.0167],
        ...,
        [-0.5620,  0.2168, -0.6494,  ...,  0.1338,  0.0359, -0.1619],
        [-0.5430,  0.2145, -0.2808,  ...,  0.5332,  0.3115, -0.0796],
        [-0.4126,  0.0867, -0.1608,  ...,  0.3833,  0.5532, -0.3628]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.3135,  0.1421,  0.0203,  ...,  0.2761,  0.1931,  0.2800],
        [ 0.2340,  0.0980, -0.2874,  ..., -0.0904,  0.3728, -0.5947],
        [ 0.1428,  0.2480, -0.1436,  ...,  0.1278,  0.2668,  0.1132],
        ...,
        [ 0.1526,  0.0447, -0.0166,  ...,  0.1129,  0.0489, -0.0272],
        [-0.0655, -0.3418,  0.0859,  ..., -0.0029, -0.2361, -0.0259],
        [ 0.2568, -0.1682, -0.0922,  ...,  0.2747, -0.3308, -0.0142]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0531, -0.0352, -0.0451,  ..., -0.0139, -0.0016,  0.0108],
        [ 0.0599,  0.0469, -0.2693,  ..., -0.4270, -0.3237, -0.1934],
        [-0.0223,  0.0300,  0.0035,  ..., -0.2852,  0.0346,  0.4429],
        ...,
        [-0.0397,  0.2319, -0.0547,  ...,  0.3386,  0.0990, -0.6543],
        [ 0.3838, -1.0303,  0.0416,  ..., -0.3528, -0.2510, -0.2783],
        [ 0.1378, -0.1581,  0.0558,  ...,  0.1711, -0.1503,  0.5156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0150,  0.0583, -0.0021,  ..., -0.0047, -0.0970, -0.0959],
        [ 0.0589,  0.0044, -0.0128,  ..., -0.0157,  0.0407,  0.0671],
        [ 0.0493,  0.0272,  0.0209,  ..., -0.0714,  0.0842,  0.0895],
        ...,
        [ 0.0523, -0.0732,  0.0784,  ...,  0.0840,  0.0737, -0.0968],
        [ 0.0172, -0.0583,  0.0740,  ..., -0.0365,  0.1050,  0.0865],
        [ 0.0488, -0.0323, -0.0163,  ...,  0.0146,  0.0878, -0.0707]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0549,  0.0769,  0.0174,  ...,  0.0294, -0.0132, -0.1533],
        [-0.9048, -0.4407,  0.0773,  ..., -0.4304, -0.3806,  0.3279],
        [-0.0521,  0.1120,  0.1521,  ..., -0.4661, -0.2869, -0.2629],
        ...,
        [ 0.4790, -0.0856,  0.3235,  ..., -0.0448,  0.2410, -0.3870],
        [-0.0104,  0.2377, -0.4587,  ..., -0.3157,  0.1471, -0.2290],
        [-0.2319, -0.3110, -0.1869,  ...,  0.4526, -0.2729, -0.2705]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0226,  0.0023, -0.0088,  ..., -0.0283, -0.0125,  0.0043],
        [-0.0490,  0.2070,  0.1539,  ..., -0.5303,  0.3406,  0.1306],
        [-0.0574,  0.1517,  0.0897,  ...,  0.1996,  0.0226, -0.0166],
        ...,
        [-0.3293,  0.0235,  0.1984,  ...,  0.1768, -0.1122,  0.0028],
        [-0.3347, -0.0590,  0.0077,  ..., -0.2737,  0.3069,  0.0701],
        [-0.3821,  0.0132, -0.0436,  ..., -0.0597,  0.4934, -0.0078]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0141, -0.0143,  0.0026,  ..., -0.0122,  0.0169,  0.0141],
        [ 0.2817,  0.2057, -0.0648,  ...,  0.5103, -0.2449,  0.3936],
        [-0.0693,  0.1648,  0.8223,  ...,  0.2172, -0.3054,  0.1595],
        ...,
        [ 0.7266,  0.9976, -0.6484,  ..., -0.1927, -0.1838, -0.5293],
        [ 1.0537,  0.9951, -0.0549,  ...,  0.8188, -0.9961,  0.3174],
        [ 0.8037,  0.1282, -0.5820,  ...,  0.6255, -0.4011,  0.3992]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0383,  0.0150,  0.0025,  ..., -0.0194, -0.0532, -0.0382],
        [-0.0701, -0.0051, -0.0077,  ..., -0.0308, -0.0432, -0.0355],
        [-0.0679, -0.1605, -0.0613,  ..., -0.0955,  0.0438,  0.0191],
        ...,
        [ 0.0895, -0.0677, -0.0595,  ...,  0.0161,  0.0374, -0.1467],
        [ 0.1075, -0.0355,  0.0265,  ..., -0.0971, -0.0644,  0.0684],
        [-0.1033,  0.0956, -0.0775,  ..., -0.0798,  0.1093,  0.0558]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1084,  0.0146,  0.0256,  ..., -0.0443,  0.0310, -0.0734],
        [-0.2639,  0.2219, -0.8735,  ...,  0.3530,  0.2754,  0.6104],
        [-0.4333, -0.0472, -0.0167,  ...,  0.4626,  0.4868,  0.4553],
        ...,
        [-0.6533, -0.7080, -0.4492,  ...,  0.3330, -0.0156, -0.6953],
        [-0.1065, -0.2896, -0.3103,  ..., -0.1471,  0.0186,  0.3547],
        [ 0.1204, -0.1442, -0.0417,  ...,  0.2898,  0.0085, -0.0732]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.0075,  0.0096,  0.0173,  ...,  0.0029,  0.0107, -0.0197],
        [ 0.1181,  0.0779,  0.0724,  ...,  0.0287, -0.2266,  0.4229],
        [ 0.0939, -0.4827, -0.2177,  ...,  0.0357, -0.0659,  0.4353],
        ...,
        [ 0.0991,  0.1187,  0.3235,  ..., -0.0499, -0.3091, -0.1737],
        [-0.1142,  0.2505,  0.1626,  ..., -0.0059,  0.0397,  0.0697],
        [ 0.0260, -0.1626, -0.4561,  ..., -0.1089, -0.2468,  0.2642]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0547, -0.0326,  0.0108,  ..., -0.0030,  0.0168, -0.0017],
        [-0.4875, -0.3889,  1.0186,  ..., -0.0087, -0.0218, -0.3333],
        [ 0.0502,  0.1235,  0.4072,  ...,  1.1260, -0.1348,  0.3474],
        ...,
        [-1.5898, -0.3945, -0.5146,  ..., -0.1896,  0.6982,  0.1887],
        [-1.3291,  0.7334,  0.4019,  ..., -0.6187,  0.4937,  0.3745],
        [-1.0391, -0.4407,  0.1619,  ..., -0.5493, -0.3950,  0.0616]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0154,  0.0060, -0.0637,  ..., -0.0354, -0.0551,  0.0234],
        [-0.0002, -0.0149, -0.1082,  ..., -0.0605, -0.0504,  0.0420],
        [-0.0495,  0.0405, -0.0533,  ..., -0.0667, -0.0726,  0.0280],
        ...,
        [ 0.0077, -0.0173, -0.0274,  ...,  0.0332, -0.0294, -0.0187],
        [ 0.0192,  0.0412, -0.1628,  ..., -0.1184, -0.1572,  0.0954],
        [ 0.1184, -0.0551, -0.0283,  ..., -0.0279, -0.0403, -0.0098]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.4983,  0.0504,  0.0526,  ..., -0.1052, -0.0490, -0.0889],
        [ 0.9790, -0.0640, -0.0177,  ..., -0.1470, -0.1696,  0.1080],
        [ 1.2090,  0.0124,  0.3340,  ...,  0.0500,  0.3389, -0.5244],
        ...,
        [ 1.0684,  0.0646,  1.0029,  ..., -0.3086, -0.1703,  0.1228],
        [ 1.3564, -0.5508,  0.4424,  ..., -0.4968,  0.7017,  0.6504],
        [ 1.6074, -0.0817,  1.1543,  ...,  0.4736,  0.1516,  0.5063]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.0521,  0.0531,  0.0824,  ...,  0.2212,  0.2747,  0.1766],
        [ 0.7681,  0.3894,  0.1137,  ...,  0.0014, -0.7954, -0.2097],
        [-0.3130, -0.5039, -0.0546,  ..., -0.2849, -0.0874, -0.1055],
        ...,
        [ 0.1720,  0.0146,  0.2798,  ..., -0.1735,  0.5522,  0.2561],
        [-0.0865,  0.0388, -0.1483,  ..., -0.1904, -0.2155,  0.1570],
        [ 0.0971,  0.0375,  0.0435,  ..., -0.1835, -0.0939,  0.3711]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.0047, -0.0210, -0.0676,  ..., -0.0145, -0.0067, -0.0071],
        [-0.4663, -0.3030,  0.1016,  ...,  0.0782,  0.0238, -0.1111],
        [-0.2678, -0.6626,  0.0645,  ..., -0.6611, -0.4521, -0.3142],
        ...,
        [-0.3181, -0.5366, -0.3601,  ...,  0.0535,  0.6060,  0.3982],
        [-0.4407, -0.0340,  0.1143,  ...,  0.0615,  0.8823, -0.3567],
        [ 0.0286, -0.0840,  0.2028,  ...,  0.0113,  0.2306, -0.0564]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0290, -0.0081, -0.0269,  ..., -0.0528, -0.0189, -0.0188],
        [ 0.0079, -0.0372, -0.0727,  ..., -0.0009, -0.0288,  0.0034],
        [-0.0836, -0.0993, -0.0490,  ...,  0.0501,  0.0712,  0.0587],
        ...,
        [ 0.0057, -0.0465,  0.0638,  ...,  0.0886,  0.0656,  0.0282],
        [ 0.2705, -0.0660,  0.1317,  ...,  0.1418,  0.0954,  0.0920],
        [-0.0140, -0.0616,  0.1357,  ...,  0.1853,  0.0381,  0.0837]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1018, -0.0518,  0.1110,  ...,  0.0127, -0.1177, -0.0458],
        [-0.2043,  0.4006, -0.1425,  ..., -0.2583,  0.3040,  0.0242],
        [-0.4753,  0.2339,  0.2725,  ..., -0.2771, -0.2122, -0.3296],
        ...,
        [-0.5820, -0.5381, -0.2717,  ..., -0.2432,  0.1804,  0.0600],
        [-1.2949,  0.0266, -0.2452,  ..., -0.2180,  0.5190, -0.0208],
        [-0.8726, -0.3706, -0.1361,  ..., -0.2260,  0.7080, -0.4746]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 3.6831e-03,  3.7018e-02,  5.4893e-03,  ...,  1.1147e-02,
          1.1909e-02, -1.7853e-02],
        [ 4.8071e-01, -1.6162e-01, -7.2693e-02,  ...,  1.3086e-01,
          2.6172e-01, -1.0553e-01],
        [ 1.4771e-01, -2.7588e-01,  2.8931e-01,  ...,  2.5903e-01,
          1.8787e-01,  9.1431e-02],
        ...,
        [ 1.3382e-02, -1.5991e-01,  3.4637e-02,  ..., -1.2445e-01,
          1.5320e-01,  2.1423e-01],
        [-1.0559e-02,  1.0132e-01,  1.1642e-02,  ...,  7.6904e-02,
         -1.6882e-01,  3.5498e-01],
        [ 1.0521e-02, -5.8055e-05, -7.8552e-02,  ...,  1.6260e-01,
          3.2135e-02,  9.8328e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.5479e-01,  5.2795e-02,  1.5381e-01,  ..., -4.6120e-03,
         -1.7774e-04,  8.6689e-04],
        [ 2.1027e-02, -2.8369e-01, -2.0752e-01,  ...,  4.1943e-01,
          3.0518e-01,  8.3008e-02],
        [-9.8242e-01, -1.1597e-01, -4.1333e-01,  ...,  4.2578e-01,
          4.6533e-01,  1.0312e+00],
        ...,
        [ 1.0352e-01,  6.4844e-01, -3.7866e-01,  ..., -1.8896e-01,
          6.3037e-01,  4.4824e-01],
        [-1.6565e-01,  4.2041e-01, -2.2534e-01,  ..., -5.0873e-02,
          7.9224e-02, -5.9033e-01],
        [ 9.6436e-02,  2.6831e-01, -3.9246e-02,  ..., -2.6929e-01,
         -1.2744e-01, -7.0117e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0177, -0.0290, -0.0293,  ..., -0.0439, -0.0230, -0.0655],
        [-0.0039, -0.0460, -0.0364,  ..., -0.0319, -0.0137, -0.0815],
        [ 0.0208, -0.0244, -0.1213,  ..., -0.0092, -0.0526, -0.0886],
        ...,
        [ 0.0768,  0.0190, -0.0618,  ...,  0.0270,  0.0624, -0.0984],
        [-0.2291,  0.1460, -0.4507,  ...,  0.2783, -0.0876,  0.0044],
        [-0.2101, -0.0137, -0.2842,  ...,  0.1792, -0.0598,  0.0486]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1814, -0.1941,  0.1924,  ..., -0.0396, -0.1003, -0.0082],
        [ 0.1471,  0.7227, -0.3425,  ..., -0.6196,  0.1790, -0.9800],
        [ 0.5225, -0.4404, -1.1133,  ...,  0.2179,  0.0847, -0.6216],
        ...,
        [ 0.6631,  0.1877, -1.2598,  ..., -0.3320,  0.4946, -0.2732],
        [ 0.6572, -0.2211, -1.8457,  ...,  0.4324, -0.1963,  0.2930],
        [ 0.5288, -0.8281, -1.2227,  ...,  0.6743,  0.3567,  0.2800]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0439,  0.0142,  0.0139,  ..., -0.0072, -0.0147,  0.0121],
        [ 0.0868,  0.0569,  0.1135,  ...,  0.0198,  0.6367, -0.0392],
        [-0.1458, -0.1207,  0.4419,  ..., -0.2314,  0.1338,  0.0014],
        ...,
        [-0.0737, -0.2852, -0.2976,  ..., -0.1164,  0.4631,  0.1160],
        [-0.0170, -0.0641, -0.1622,  ..., -0.0064, -0.0968, -0.0309],
        [-0.0401, -0.1322, -0.2068,  ..., -0.1284, -0.2642,  0.5254]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0527,  0.0212,  0.0773,  ...,  0.0079,  0.0040, -0.0141],
        [-0.7227, -1.5684,  1.3477,  ...,  0.8096, -1.2588,  0.1467],
        [-1.4697, -1.1494, -0.0433,  ...,  0.5249,  0.1492,  0.6787],
        ...,
        [ 0.5552,  0.8574,  0.3140,  ..., -0.5698, -0.0862,  0.7856],
        [-1.2061, -0.7700, -0.0645,  ..., -0.0255,  0.3691, -0.4673],
        [-0.0506, -0.6206,  0.0386,  ...,  0.2595, -0.5601, -0.1306]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0013,  0.0426,  0.0022,  ...,  0.0597, -0.0145, -0.0406],
        [ 0.0493,  0.0328,  0.0588,  ...,  0.0216, -0.1019, -0.0260],
        [-0.0862, -0.0947, -0.0365,  ...,  0.0267, -0.0074,  0.1327],
        ...,
        [-0.1133,  0.0212,  0.1620,  ...,  0.1035,  0.1516,  0.0800],
        [ 0.2274, -0.0107,  0.2095,  ..., -0.1511,  0.0850,  0.0911],
        [ 0.2593,  0.0345,  0.2201,  ..., -0.1871,  0.1842,  0.0189]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0919,  0.0318,  0.1077,  ...,  0.0386,  0.0204, -0.0593],
        [ 0.2250,  0.8428, -0.1886,  ..., -0.4717,  0.2612, -0.6694],
        [-0.1151, -0.1321,  0.1309,  ..., -0.4404,  0.9609,  0.4604],
        ...,
        [-1.3301,  0.2566,  0.2988,  ...,  0.7705, -0.0925,  0.6685],
        [-0.5010, -0.1605,  0.0624,  ..., -0.1186, -0.3657,  0.0458],
        [-0.7642, -0.3066, -0.1406,  ..., -0.2708, -0.2756,  0.8618]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0312,  0.0210,  0.0273,  ...,  0.0017,  0.0343,  0.0224],
        [-0.1620, -0.0870, -0.2491,  ...,  0.0093, -0.2637, -0.3171],
        [-0.0890, -0.1453, -0.1456,  ...,  0.3303, -0.3633, -0.0812],
        ...,
        [ 0.2688, -0.0344,  0.4004,  ...,  0.1076,  0.1447, -0.3411],
        [-0.4705,  0.2593, -0.1388,  ..., -0.1824, -0.0078, -0.1664],
        [-0.3425,  0.3521,  0.3059,  ..., -0.3066,  0.2432, -0.0419]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0090, -0.0545, -0.0031,  ...,  0.0052, -0.0282, -0.0130],
        [ 0.0519,  0.8647,  0.1011,  ...,  0.2036,  0.5728, -0.3752],
        [ 0.3376,  0.3989,  0.6011,  ...,  0.5249, -0.0286, -0.5444],
        ...,
        [-0.1760,  0.3716, -0.3135,  ...,  0.1755,  0.3220,  0.0995],
        [ 0.1993,  0.5015, -0.3479,  ..., -0.4568, -0.3035,  0.7012],
        [-0.0876, -0.2266,  0.1054,  ...,  0.0560, -0.1475, -0.2827]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0152,  0.0170, -0.0175,  ...,  0.0329,  0.0258, -0.0470],
        [ 0.0286,  0.0266,  0.0380,  ...,  0.0442,  0.0138, -0.0023],
        [ 0.0812, -0.1349,  0.1100,  ..., -0.0912, -0.0658,  0.0143],
        ...,
        [-0.0247,  0.0195, -0.0552,  ..., -0.0320,  0.0043, -0.0826],
        [-0.1119,  0.1307, -0.0651,  ..., -0.0021,  0.1106,  0.1339],
        [-0.0323, -0.0302,  0.0551,  ..., -0.2213,  0.0142,  0.0640]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0555, -0.0491, -0.1494,  ...,  0.0458, -0.0645,  0.0310],
        [ 0.3774, -0.6914,  0.0503,  ...,  0.1971,  0.3364,  0.2622],
        [ 0.3181,  0.0505,  1.0137,  ...,  0.7578,  0.1945,  0.1149],
        ...,
        [-0.7832, -0.1995,  0.1726,  ...,  0.0149,  0.3367, -0.0837],
        [-0.6943, -0.9312,  0.0749,  ...,  1.0879,  0.0789,  0.2230],
        [-0.3003, -0.5186, -0.6221,  ...,  0.8413, -0.0550, -0.1455]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 1.0895e-02,  2.9922e-02, -8.2779e-03,  ..., -3.0117e-03,
          4.8256e-03, -2.4772e-04],
        [-8.2458e-02,  3.8354e-01, -3.3765e-01,  ...,  9.8755e-02,
          1.2805e-01,  2.3474e-01],
        [-2.8345e-01,  3.1226e-01, -4.7876e-01,  ...,  9.8877e-02,
          1.7395e-01, -3.0396e-01],
        ...,
        [ 3.6548e-01,  8.4106e-02, -2.5903e-01,  ...,  4.0039e-02,
         -1.0638e-01, -4.3042e-01],
        [ 2.7298e-02, -9.3750e-02, -3.6450e-01,  ..., -1.8872e-01,
          1.0712e-01, -5.8807e-02],
        [-3.6041e-02,  8.1177e-02,  1.0547e-01,  ..., -5.5267e-02,
          2.7612e-01, -7.0477e-04]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.2229, -0.0225, -0.0264,  ...,  0.0164, -0.0159, -0.0029],
        [-0.6943, -0.2981,  0.1002,  ..., -0.2010, -0.3574, -0.3567],
        [ 0.3513,  0.8950, -0.3552,  ...,  0.1161,  0.0346, -0.0831],
        ...,
        [ 0.2544,  1.8262,  0.3479,  ...,  0.7759, -0.2466,  0.0518],
        [ 0.0954,  0.8613, -0.3237,  ..., -0.1398, -0.0504,  0.0232],
        [-0.3723,  0.8721, -1.1211,  ...,  0.2369, -0.1287,  0.4670]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0101, -0.0428, -0.0026,  ...,  0.0335,  0.0173, -0.0022],
        [ 0.1085,  0.1744,  0.0014,  ..., -0.0270, -0.0667, -0.0461],
        [ 0.0091,  0.0651, -0.0904,  ..., -0.0178, -0.1138, -0.0804],
        ...,
        [-0.0170,  0.0823,  0.0572,  ...,  0.0382,  0.0806,  0.0479],
        [-0.5249,  0.5513,  0.0395,  ...,  0.0336,  0.0815,  0.2125],
        [-0.2610,  0.1813,  0.0665,  ...,  0.1008,  0.0529, -0.3113]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0186,  0.1421, -0.0163,  ...,  0.3291,  0.0475, -0.1107],
        [-0.9604, -0.4417, -0.7251,  ...,  0.9746, -0.3916, -0.4636],
        [-0.0291, -0.8013, -0.9146,  ..., -0.6025, -0.0165,  0.4395],
        ...,
        [ 0.0514,  0.0639, -0.4272,  ..., -0.4607,  0.1170, -0.5063],
        [ 0.1324,  0.7295,  0.0622,  ..., -0.8740,  0.1530,  0.0880],
        [-0.2053,  1.3574, -0.5195,  ..., -0.5210, -0.0148, -0.3235]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0646,  0.0158, -0.0323,  ..., -0.0153,  0.0061,  0.0131],
        [ 0.2634,  0.1584, -0.1991,  ...,  0.0366,  0.3325, -0.4272],
        [ 0.1802,  0.1140, -0.3293,  ...,  0.2571,  0.0194,  0.0759],
        ...,
        [ 0.1769,  0.1281,  0.1119,  ..., -0.1511,  0.2087,  0.0427],
        [-0.1056, -0.4688, -0.0763,  ..., -0.0197,  0.0296,  0.1001],
        [ 0.0889, -0.2759, -0.1117,  ...,  0.2349,  0.1226, -0.3369]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.3657, -0.3374,  0.2446,  ..., -0.0061, -0.0071, -0.0034],
        [-0.1226, -0.2286, -0.0850,  ..., -0.5625,  1.5371,  0.9990],
        [ 0.4968, -0.2124, -0.2542,  ..., -0.1348, -0.6562, -1.0283],
        ...,
        [ 0.0094,  0.1580, -0.0618,  ...,  0.9722,  0.0775, -0.1632],
        [-0.1836, -0.1220,  0.4529,  ...,  0.0446, -0.4841,  0.3809],
        [ 0.1327, -0.2820,  0.4026,  ..., -0.5015, -1.0547,  0.6743]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0109,  0.0147, -0.0062,  ...,  0.0251,  0.0705, -0.0016],
        [-0.0454,  0.0262, -0.0567,  ...,  0.0379,  0.0410, -0.0300],
        [-0.0994, -0.1304,  0.0804,  ..., -0.0167, -0.0020, -0.0978],
        ...,
        [-0.0714, -0.1053, -0.0620,  ..., -0.0221, -0.0287, -0.0899],
        [-0.1251, -0.4175, -0.1168,  ..., -0.2394, -0.3965, -0.2830],
        [ 0.0159, -0.3813, -0.1554,  ..., -0.2379, -0.1361, -0.2117]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0115, -0.0347, -0.0626,  ...,  0.0995, -0.0989, -0.0822],
        [-0.4580, -0.2356,  0.1573,  ..., -0.3850, -0.2343, -0.5215],
        [-0.0351, -0.5171,  0.0807,  ..., -0.8711,  0.0311,  0.4429],
        ...,
        [ 0.1438,  0.0523,  0.6919,  ..., -0.4961,  0.0876, -0.5298],
        [ 0.5229, -0.5337, -0.1246,  ..., -0.1373,  0.9541,  0.1154],
        [ 0.3259, -1.0742, -0.1627,  ..., -1.0479, -0.1327,  0.0682]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 1.1269e-02,  2.6774e-04,  1.3397e-02,  ...,  9.5520e-03,
          5.4749e-02, -1.0933e-02],
        [-1.3757e-01, -1.9617e-01, -1.5344e-01,  ...,  1.2866e-01,
         -4.5581e-01,  2.0886e-01],
        [ 6.7334e-01, -2.0984e-01, -1.4673e-01,  ...,  5.7678e-02,
         -5.1361e-02,  2.3816e-01],
        ...,
        [-4.3457e-01, -6.8164e-01, -1.9373e-01,  ..., -2.9126e-01,
         -2.7002e-01, -1.0474e-01],
        [ 1.9189e-01, -1.2732e-01,  2.0798e-02,  ..., -8.4595e-02,
         -4.4702e-01, -2.2461e-02],
        [ 8.6609e-02, -4.8413e-01, -1.6846e-01,  ..., -1.1591e-01,
         -7.7686e-01, -3.0469e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-1.0132e-01,  1.6235e-01, -2.8183e-02,  ..., -2.2087e-03,
          1.0651e-02, -7.3318e-03],
        [-1.3098e-01, -8.3301e-01, -5.9375e-01,  ...,  1.5979e-01,
          3.2861e-01, -3.2959e-01],
        [ 1.8176e-01, -4.7925e-01, -4.3011e-04,  ..., -3.1006e-01,
         -2.0142e-02,  9.5154e-02],
        ...,
        [-5.5206e-02, -3.1128e-01, -7.7246e-01,  ...,  5.6396e-02,
         -6.6113e-01,  1.1279e+00],
        [-6.8457e-01,  7.7686e-01, -8.3008e-01,  ...,  6.3867e-01,
         -7.2852e-01, -8.5938e-02],
        [-5.3955e-01,  4.8535e-01, -3.6133e-01,  ...,  6.9580e-01,
         -5.4199e-01, -8.4473e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0126,  0.0376, -0.0041,  ..., -0.0165,  0.0579, -0.0172],
        [-0.1024,  0.0257,  0.0595,  ...,  0.0118,  0.0251, -0.0496],
        [-0.1108, -0.0100,  0.0059,  ...,  0.0316,  0.0408, -0.0166],
        ...,
        [-0.0248,  0.1588,  0.0220,  ..., -0.2747,  0.1952,  0.3274],
        [-0.2434, -0.0565, -0.2722,  ..., -0.3506,  0.0191,  0.2202],
        [-0.2554,  0.2379, -0.2581,  ..., -0.2598,  0.2644,  0.2037]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.1375, -0.1154, -0.0079,  ...,  0.0717, -0.0056,  0.0898],
        [-0.0026, -0.4817,  0.6055,  ...,  0.0244, -0.3811, -0.4004],
        [-0.0740,  0.0845,  1.2168,  ...,  0.5430, -0.5034, -0.8853],
        ...,
        [-0.2040, -0.2688,  0.0428,  ...,  0.2942, -0.0410, -0.2485],
        [-0.5361, -0.1958,  0.9556,  ..., -0.1129,  0.7124,  0.2522],
        [ 0.0050,  0.4553,  0.8877,  ..., -0.0726,  0.2705,  0.2184]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0145, -0.0051, -0.0032,  ...,  0.0630,  0.0298,  0.0175],
        [ 0.2651, -0.0931, -0.1656,  ...,  0.3320, -0.3789, -0.2991],
        [-0.4131, -0.2400,  0.0130,  ..., -0.6973, -0.4961,  0.3450],
        ...,
        [ 0.1342, -0.1694,  0.0065,  ..., -0.2224, -0.3367, -0.2983],
        [-0.2400, -0.0648,  0.3875,  ..., -0.0274,  0.0191,  0.1605],
        [-0.0480,  0.3032,  0.2893,  ..., -0.1321, -0.2229,  0.5107]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0950,  0.0403,  0.0022,  ..., -0.0038, -0.0350,  0.0300],
        [ 0.1094,  0.7803, -0.6201,  ...,  0.1440, -0.4570,  0.3000],
        [ 0.2174,  0.4250, -1.5273,  ...,  0.5039,  0.7139,  0.3237],
        ...,
        [-0.5449, -0.6255,  0.2410,  ...,  0.4797, -0.0744,  0.5156],
        [ 0.6909,  0.1715,  1.1855,  ..., -0.1914, -0.4441, -0.7290],
        [-0.2612,  0.5186,  0.7354,  ..., -0.1013, -0.0643, -0.1140]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0237, -0.0465,  0.0245,  ...,  0.0385,  0.0486,  0.0065],
        [ 0.0239, -0.0094,  0.0343,  ...,  0.0359,  0.0151,  0.0621],
        [-0.0430, -0.0779, -0.0919,  ...,  0.0773, -0.1008, -0.0465],
        ...,
        [ 0.0721, -0.0524,  0.0261,  ..., -0.0301,  0.1404, -0.2307],
        [-0.0296, -0.0640,  0.0534,  ...,  0.0308, -0.0408, -0.3674],
        [ 0.0295, -0.0199,  0.1254,  ..., -0.1963,  0.1360, -0.2391]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.0091, -0.2394,  0.0226,  ...,  0.1112,  0.1162, -0.0238],
        [-0.4492, -0.9253, -0.3521,  ..., -0.0110, -0.5039,  0.1394],
        [-0.0848, -0.1964, -0.4402,  ..., -0.3362, -0.0022, -0.0184],
        ...,
        [ 0.5820, -0.4998, -0.4084,  ...,  0.6694,  0.4810, -0.1437],
        [-0.1388, -0.6919, -0.1663,  ..., -0.1852, -0.5459, -0.1760],
        [-0.2583, -0.6851,  0.1206,  ...,  0.1032, -0.3726,  0.0283]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0863, -0.0250,  0.0561,  ...,  0.0252, -0.0304,  0.0481],
        [ 0.4519, -0.0403,  0.1472,  ...,  0.1432,  0.3987,  0.2139],
        [ 0.6089, -0.0044, -0.6875,  ..., -0.2546,  0.1768,  0.3557],
        ...,
        [ 0.0837, -0.1609,  0.1436,  ..., -0.0614,  0.3169,  0.0103],
        [-0.5327, -0.3149,  0.1207,  ...,  0.1285, -0.1622,  0.0953],
        [-0.4258, -0.1290,  0.0913,  ..., -0.2437,  0.1344,  0.0415]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-5.8398e-01,  1.7500e+00,  2.0020e+00,  ..., -1.5383e-03,
         -1.6174e-02, -2.8019e-03],
        [ 4.4287e-01,  1.4111e-01, -6.0944e-02,  ...,  5.0586e-01,
         -1.6052e-01, -6.2939e-01],
        [ 6.3867e-01, -5.6201e-01, -6.5771e-01,  ...,  7.7393e-01,
         -3.7549e-01,  6.0638e-02],
        ...,
        [ 3.9648e-01,  3.7793e-01,  9.3750e-02,  ..., -2.0935e-01,
         -1.3879e-01,  1.0234e+00],
        [ 7.6416e-02,  4.2505e-01,  8.7402e-01,  ...,  3.1714e-01,
          1.7881e+00,  5.8545e-01],
        [ 3.3252e-01,  4.1333e-01,  7.5391e-01,  ...,  6.3818e-01,
          8.8135e-01,  7.7881e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0334, -0.0771, -0.0376,  ...,  0.0297,  0.0732,  0.0197],
        [ 0.0103,  0.1082, -0.2424,  ..., -0.1317,  0.1475, -0.0329],
        [ 0.0322, -0.0749, -0.0095,  ..., -0.0374, -0.0160,  0.1085],
        ...,
        [ 0.1411,  0.1749, -0.1901,  ..., -0.1689,  0.2059,  0.0276],
        [-0.5342,  0.4143, -0.1350,  ..., -0.1759, -0.2010, -0.3687],
        [-0.5063,  0.1746, -0.2452,  ..., -0.0171, -0.1398, -0.1748]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.0023, -0.2749,  0.0017,  ..., -0.0301, -0.0592, -0.0472],
        [-0.0574, -0.6709, -0.8491,  ...,  0.7681,  0.0253,  0.1906],
        [-0.2983, -0.3928, -0.0948,  ...,  0.3306, -0.5518,  0.7651],
        ...,
        [ 0.7109, -0.8462, -0.1181,  ..., -0.0710, -0.4932, -0.3062],
        [ 0.3123, -0.9761, -0.9438,  ...,  0.6328, -0.2169,  0.5654],
        [ 0.2966, -0.4851, -1.4893,  ...,  0.8179, -0.7437,  0.4998]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.0365, -0.0435,  0.0443,  ...,  0.0677, -0.0064, -0.0235],
        [ 0.6611,  0.0793, -0.0325,  ..., -0.3484,  0.1273,  0.0723],
        [-0.5654,  0.1506, -0.3933,  ...,  0.1072,  0.1782,  0.3086],
        ...,
        [ 0.0334, -0.5840, -0.4036,  ..., -0.3018,  0.0989,  0.0872],
        [ 0.1346,  0.0984,  0.0217,  ..., -0.1284,  0.1660,  0.1836],
        [ 0.5732,  0.5767, -0.3425,  ...,  0.1713,  0.0803,  0.1337]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[-0.0163,  0.1180,  0.0623,  ...,  0.0345, -0.0048, -0.0110],
        [ 0.7393, -0.6753,  0.4214,  ...,  1.0967, -0.4312,  0.0634],
        [ 1.1289, -0.8047, -0.4448,  ..., -0.4658,  0.2322, -0.3220],
        ...,
        [ 0.0894, -0.2324, -0.0509,  ...,  0.8179, -0.5117, -0.1342],
        [-0.3577, -0.2155, -0.5625,  ...,  0.3406, -0.1296,  0.3545],
        [-0.8262, -0.9331, -0.1962,  ..., -0.2695, -0.4941, -0.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[-0.0265, -0.0294,  0.1379,  ...,  0.0301,  0.0549,  0.0194],
        [ 0.0712,  0.0149,  0.1564,  ..., -0.0056,  0.1271,  0.0634],
        [-0.0011, -0.0172,  0.1749,  ...,  0.0257,  0.1072,  0.0586],
        ...,
        [-0.1708, -0.2695, -0.3479,  ...,  0.1511,  0.0447,  0.1871],
        [-0.1899,  0.1019, -0.3572,  ...,  0.0585, -0.0077,  0.1873],
        [-0.1676,  0.0113, -0.0782,  ...,  0.2793, -0.2076,  0.1830]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.1792, -0.0021,  0.1025,  ..., -0.1283,  0.0077,  0.0429],
        [-1.0156,  0.1350, -0.8833,  ...,  0.1118,  0.8813,  0.3953],
        [ 0.0856, -1.0107, -0.9136,  ..., -0.1874, -0.5464, -0.1080],
        ...,
        [-0.4263, -1.1523, -0.3779,  ...,  0.0479, -0.6074,  0.1429],
        [-0.0585, -0.7866,  0.8174,  ...,  0.2642, -0.7383,  0.1829],
        [-0.3677, -0.7192,  0.9448,  ..., -0.0672, -0.7471, -0.1432]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.3127,  0.0210,  0.2181,  ...,  0.2915, -0.1556,  0.1627],
        [-0.0565,  0.1608, -0.1929,  ..., -0.6201,  0.5342, -0.3096],
        [ 0.0615,  0.6704, -0.7383,  ..., -0.1128,  0.6523,  0.1714],
        ...,
        [-0.2905, -0.2700, -0.3259,  ..., -0.8706,  0.3225, -0.0439],
        [ 0.4089,  0.5312,  0.3374,  ..., -0.0799,  0.5669,  0.3716],
        [ 0.2192,  0.0834,  0.0849,  ..., -0.0098,  0.4846,  0.1519]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 1.5410,  1.3223, -1.5459,  ...,  0.0042, -0.0367, -0.0166],
        [ 0.0070, -0.1379, -0.6333,  ...,  0.6763,  1.8242,  0.2607],
        [-0.0532,  0.4536, -0.8315,  ...,  0.2345,  0.4912, -0.4436],
        ...,
        [-0.1235,  0.4116,  0.7720,  ..., -0.4419, -0.2949,  0.2900],
        [-0.0523,  0.4944,  0.4062,  ...,  0.2012, -0.8130, -2.1816],
        [-0.8911,  0.4524,  0.2435,  ...,  0.5684, -1.7871, -0.7373]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0162, -0.2173, -0.0847,  ...,  0.0545,  0.1487, -0.0334],
        [-0.0724,  0.0222,  0.0380,  ..., -0.1267,  0.1627,  0.0633],
        [-0.0745,  0.0354,  0.0566,  ..., -0.1003,  0.2576,  0.1349],
        ...,
        [ 0.1617, -0.3157, -0.0266,  ..., -0.3000,  0.0192, -0.1528],
        [-0.3235, -0.4458, -0.0368,  ..., -0.1841, -0.2134, -0.2761],
        [-0.5132, -0.5405, -0.1045,  ..., -0.2036, -0.0502, -0.2920]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[-0.1064, -0.0446, -0.1103,  ..., -0.0325,  0.2423, -0.0567],
        [ 0.1108, -0.0851, -0.6143,  ..., -1.0391, -1.0449,  0.5059],
        [-0.2478,  0.5327,  0.4031,  ...,  0.0616, -0.8711,  0.5303],
        ...,
        [-0.6860,  0.6377, -0.3301,  ...,  0.3823, -2.4277,  0.1924],
        [-0.1932, -0.1137, -0.1620,  ..., -0.1813, -1.2900, -0.0348],
        [-0.4368, -0.1665, -1.2539,  ...,  0.1096, -1.4189, -0.3889]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[-0.0461,  0.8584, -0.6260,  ..., -0.5771, -0.2605,  0.0753],
        [ 0.4014,  0.5815, -0.3586,  ...,  0.0705, -0.1687,  0.3635],
        [ 0.0282, -0.2754,  0.2140,  ..., -0.8486,  0.8662,  0.4663],
        ...,
        [-0.1868, -0.1257,  0.2644,  ...,  0.3511, -0.2791, -0.1383],
        [ 0.0834, -0.4397,  0.2351,  ..., -0.4255, -1.0127, -0.9893],
        [-0.1685, -0.1016,  0.2708,  ..., -0.9204, -0.5693,  0.0079]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([12288, 2048])
tensor([[ 0.3667, -0.5225,  0.3511,  ..., -0.0527, -0.0326, -0.0083],
        [-0.3413, -0.1077, -0.3542,  ...,  0.4607, -0.0723,  0.2145],
        [-0.4561,  0.3582,  0.3508,  ..., -0.2898,  0.6406,  2.0508],
        ...,
        [ 1.2822,  0.3074, -0.5361,  ...,  0.6196,  0.7969,  0.4185],
        [ 0.1395,  0.6646, -0.3171,  ...,  0.1484,  0.1605,  0.3733],
        [ 0.4124, -0.2422,  0.4395,  ...,  0.5425, -0.1505,  0.3523]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([4096, 2048])
tensor([[ 0.0683,  0.0973, -0.0627,  ..., -0.1399,  0.1611,  0.2830],
        [-0.2524, -0.1160,  0.0382,  ...,  0.1593, -0.1815,  0.1112],
        [-0.4675, -0.0583, -0.4619,  ...,  0.0017, -0.3591,  0.1426],
        ...,
        [-0.2595,  0.0113, -0.0440,  ..., -0.4194,  0.2827,  0.0815],
        [-0.8467,  0.3020, -0.0684,  ...,  0.0240,  0.0424,  0.5923],
        [-0.7812,  0.4001, -0.0277,  ..., -0.2406, -0.1931,  0.6709]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([136, 4096])torch.Size([22016, 2048])
tensor([[ 0.3040, -1.0762, -0.1211,  ...,  0.1333,  0.0786, -0.2517],
        [ 1.1504, -0.9800,  0.1418,  ...,  0.2217, -2.4648, -0.1429],
        [ 0.8999,  0.5088, -0.4229,  ..., -0.5708, -1.8174,  0.1266],
        ...,
        [-0.4753, -0.4678, -0.8027,  ..., -0.2935, -3.7949,  0.2617],
        [-0.4248, -0.3926, -1.5283,  ...,  0.0185, -1.9463,  0.2947],
        [-0.8159, -0.6787,  0.0259,  ..., -0.5864, -2.3223, -0.0588]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([136, 11008])torch.Size([4096, 11008])
tensor([[ 0.4109, -0.1304, -0.1823,  ..., -0.1219,  0.3105, -0.0172],
        [-0.8750,  0.9927, -0.4385,  ...,  2.3711,  0.3154,  0.7622],
        [ 0.8423, -0.2576, -0.3018,  ...,  0.3413,  0.0837, -0.4177],
        ...,
        [ 0.9321, -0.1917,  1.1787,  ...,  0.3574,  0.4790,  0.8716],
        [-1.4316,  1.2725, -0.0110,  ...,  1.4062,  0.6201,  1.3213],
        [-3.3340,  1.4941,  2.0605,  ...,  1.7920, -0.3215,  1.6152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 5.1666e-02, -1.4941e+00,  2.0488e+00,  ..., -2.4357e-03,
          1.2245e-03,  3.5057e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0004,  0.0074,  0.0033,  ...,  0.0003, -0.0120, -0.0035]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2666,  0.0644, -0.0764,  ...,  0.0981,  0.0407,  0.2023]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  3.9727,  -0.3271, -14.5078,  ..., -19.7188, -15.2188,  31.2656]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4434,  0.8198, -0.2922,  ..., -0.0625, -0.0117, -0.0324]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0095,  0.0094, -0.0123,  ...,  0.0079,  0.0029,  0.0040]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1392, -0.0995,  0.0371,  ...,  0.2766, -0.1378, -0.0008]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 46.2188,  79.6875, 103.1250,  ..., -17.5156,  49.0938,  12.4609]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2028, -0.1813,  0.7227,  ...,  0.1116, -0.1326, -0.0547]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0107, -0.0332, -0.0336,  ..., -0.0648, -0.0018, -0.0629]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0158, -0.1088,  0.0141,  ...,  0.0661,  0.3154,  0.1437]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 15.5703,  45.9688,  19.9062,  ..., -20.7188,  76.3125,  11.5156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0218,  0.5645,  0.0516,  ..., -0.0416, -0.0364, -0.0742]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0594,  0.0853, -0.1020,  ...,  0.1124,  0.0499, -0.0587]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2737,  0.1104, -0.0705,  ...,  0.2451,  0.0586, -0.0793]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  53.2812,  -44.7500,   21.3594,  ...,   46.2188,  -75.2500,
         -100.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3064, -0.2527, -0.3975,  ..., -0.7925, -0.0490, -0.0538]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0023,  0.0868, -0.0161,  ..., -0.0538, -0.0481, -0.0583]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1246,  0.2629, -0.5117,  ..., -0.0978,  0.0435,  0.0714]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-128.1250,  -40.8125,  -17.3594,  ...,  -23.5781,  107.8750,
         -119.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1080,  0.2825, -0.4653,  ..., -0.0158, -0.0580,  0.0039]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0055, -0.1122, -0.0385,  ..., -0.0284, -0.0429,  0.0082]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1147,  0.1978, -0.0145,  ..., -0.1702,  0.0013,  0.0826]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[   8.1172,   -8.4141,    5.3828,  ...,  -47.1562, -201.0000,
          -74.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2668,  0.0294, -1.4639,  ..., -0.0999,  0.1335, -0.1637]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2585,  0.0110, -0.0100,  ..., -0.0800,  0.0486,  0.1178]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2455, -0.2717, -0.0444,  ..., -0.0728, -0.0038, -0.0399]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  87.3750,  209.0000,   36.2188,  ..., -119.3750,    5.2734,
          116.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1147, -0.1189, -0.0841,  ..., -0.0183,  0.1608, -0.4128]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0630,  0.0099,  0.0119,  ...,  0.0361,  0.0229,  0.3098]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0753,  0.4072, -0.5664,  ...,  0.3723, -0.0431,  0.3015]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -13.5078,  -28.1562,   75.0625,  ...,  176.2500, -131.7500,
          140.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4934, -0.1752,  0.4231,  ..., -0.0982,  0.2137, -0.3389]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0211, -0.0584,  0.0760,  ..., -0.1301,  0.1174,  0.2051]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0765, -0.0444, -0.3892,  ...,  0.1747, -0.1469,  0.4663]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-88.8125, -43.8438, -87.7500,  ..., 157.7500, -45.9375, 198.3750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0532, -0.3706, -0.1942,  ...,  0.3118,  0.2061,  0.1362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1201, -0.0823,  0.0449,  ...,  0.0905,  0.1119,  0.0246]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2500,  0.0100, -0.3540,  ..., -0.0785, -0.2498,  0.2583]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -37.3438, -318.7500,   51.5312,  ..., -141.6250, -290.7500,
         -456.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1515, -0.5513,  0.4324,  ..., -0.1453,  0.3428, -0.3083]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1316, -0.1208, -0.0099,  ...,  0.0844,  0.0862, -0.0730]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1677, -0.3696,  0.0511,  ...,  0.1163, -0.0911,  0.0475]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 200.1250,  -31.5156,  -36.6562,  ..., -321.2500,   44.1250,
           20.7812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2103,  0.4795, -0.9014,  ...,  0.5190,  0.7935, -0.8120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0630,  0.0157, -0.0013,  ..., -0.0559,  0.0154,  0.0406]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.1000, 0.5166, 0.1598,  ..., 0.1782, 0.1501, 0.0969]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[192.7500,  41.0000, 103.4375,  ..., -37.5938,  47.4688, 302.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4038, -0.1956,  0.4170,  ...,  0.1041, -0.3044,  0.1650]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0217, -0.0885, -0.0643,  ...,  0.1941,  0.1238,  0.0695]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5205,  0.1906, -0.4302,  ...,  0.3821, -0.5762,  0.4661]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -93.3750,   96.4375,  247.5000,  ...,   48.8125,  281.0000,
         -135.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0869, -0.2617, -0.4270,  ...,  0.4978, -0.0685,  0.2350]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2118, -0.0715, -0.0992,  ..., -0.0359,  0.0303,  0.1749]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2134, -0.1473, -0.0915,  ...,  0.0379, -0.3772,  0.7778]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  91.6250,   -1.4004,   77.4375,  ...,  -12.1094, -188.7500,
         -102.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4854, -1.1660, -1.7451,  ...,  0.5591,  0.8804, -0.1691]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0046, -0.1064, -0.1100,  ...,  0.0312,  0.1913,  0.0833]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2708, -0.0333,  0.0720,  ..., -0.1642,  0.1891,  0.0970]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  41.5625,  272.5000, -117.3750,  ...,   16.6562, -295.5000,
          -20.4219]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3752, -0.3318, -0.5923,  ..., -0.7134,  0.0139,  0.2810]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0441, -0.0532,  0.0557,  ...,  0.1392,  0.0295,  0.0007]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1632, -0.3342, -0.4246,  ...,  0.5972, -0.3574,  0.5659]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 187.6250,  129.5000,  -46.0625,  ...,  236.8750,   68.5625,
         -152.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0271,  0.3982,  0.2983,  ..., -0.6377,  0.4812,  0.5420]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0159, -0.0036, -0.0219,  ..., -0.0767, -0.0098, -0.0084]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1048,  0.2258,  0.3398,  ...,  0.1334, -0.4148,  0.0829]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-365.2500,   59.6875,   32.4375,  ..., -232.5000, -137.2500,
         -165.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2023, -0.1158, -0.0356,  ...,  0.4583,  0.0048,  0.2517]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1782, -0.1420, -0.0577,  ...,  0.1902,  0.3125,  0.0474]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4192,  0.0927, -0.3076,  ..., -0.3188, -0.1175,  0.7378]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-446.7500,  410.2500,  288.5000,  ..., -379.5000,  118.2500,
            2.1914]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7832,  0.6367,  0.7554,  ..., -0.0339, -0.1637,  0.0634]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0173, -0.1180,  0.2162,  ..., -0.1876,  0.0762,  0.0485]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5229,  0.2040, -0.1533,  ...,  0.4487, -0.0409,  0.3535]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-107.2500,  278.2500,  208.7500,  ...,  150.2500,  -35.0938,
         -610.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5864, -0.1306, -0.7866,  ...,  0.1748,  0.0388, -0.1241]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0954, -0.1459, -0.3660,  ..., -0.3052,  0.1732, -0.0813]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.5332,  0.1354, -0.1462,  ..., -0.2571, -0.0762,  0.6958]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-135.8750, -406.7500,  248.8750,  ..., -447.2500, -139.7500,
          119.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2551, -0.6621, -0.1759,  ..., -1.2070, -0.2058, -0.0335]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1445, -0.1222, -0.2026,  ...,  0.2485,  0.4470, -0.0969]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1738, -0.4832,  0.4873,  ..., -0.9146, -0.1819,  0.0342]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-563.0000,  120.6875,   39.1250,  ...,  182.1250,  -66.5625,
          110.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.4844,  0.3855,  0.3225,  ...,  0.6362, -0.1826,  0.2194]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1004, -0.0461, -0.0250,  ..., -0.0573,  0.0241, -0.1075]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2800, -0.2216, -0.6533,  ..., -0.5498,  0.2112, -0.7144]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 349.0000,   64.8750, -294.5000,  ..., -179.2500, -319.2500,
           49.6875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0463, -1.0400,  1.8857,  ..., -1.0488, -0.5229, -0.2290]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0215, -0.1355,  0.4524,  ..., -0.0868,  0.0345,  0.1152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7749, -0.4980, -0.4976,  ...,  0.5142, -0.7529,  0.2388]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-377.0000,  293.7500,   52.2500,  ..., -145.3750, -104.1875,
          761.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2273,  0.3975,  0.4104,  ..., -0.0586,  0.5703, -0.4473]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1581, -0.2322, -0.1892,  ..., -0.4368,  0.1086, -0.1174]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3149,  0.0451, -0.1219,  ...,  0.5107, -0.2343, -0.3389]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-310.0000, -115.3750,  169.7500,  ..., -135.1250, -517.5000,
          360.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0266,  0.2118, -0.2996,  ...,  0.2559, -0.3762, -0.0608]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2307,  0.3525,  0.2927,  ..., -0.1145,  0.0605, -0.0089]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4619,  0.5151, -0.2213,  ...,  0.5415, -0.2874,  0.6440]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-411.0000,  -15.7891, -516.0000,  ...,  173.5000,  -53.0625,
          472.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1259, -0.1429,  0.2124,  ..., -0.8936,  0.2654,  1.2412]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2205, -0.4397, -0.0727,  ..., -0.2106, -0.1876, -0.5078]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0178, -1.2676,  0.5708,  ...,  0.2389,  0.2444, -0.2285]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  41.4375, -194.6250, -482.0000,  ...,  -91.5625, -295.5000,
         -274.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.3799,  0.1777,  0.7832,  ...,  0.5269, -0.4021,  0.8726]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0540,  0.0068, -0.3291,  ..., -0.1034,  0.2074, -0.0167]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3784, -0.8447, -0.1620,  ..., -0.3835,  0.5254, -0.8857]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  77.1875,  250.0000,  689.0000,  ...,  420.7500, -533.0000,
         -279.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.1709, -0.0489, -1.0771,  ..., -0.1065,  0.0382,  1.1426]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0800, -0.2012, -0.0124,  ..., -0.5464,  0.1655, -0.2054]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1561, -0.4509, -0.4873,  ..., -0.7202, -0.6597, -0.1488]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 736.5000, -388.2500, -104.7500,  ..., -443.5000,  220.8750,
         -160.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0457, -0.5083, -0.4998,  ...,  1.2832, -0.1696,  0.4910]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.6216, -0.0272,  0.3376,  ..., -0.2449, -0.1082,  0.5054]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4412, -0.1204, -0.2205,  ..., -0.2482, -0.5479, -0.3430]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-407.7500,  303.0000, -816.0000,  ..., -295.5000,  666.0000,
           76.5625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.5342,  0.0217, -0.0125,  ..., -0.6348, -0.7178,  0.9326]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1473,  0.0835, -0.5283,  ...,  0.1680,  0.7856, -0.1565]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0025,  0.0998,  0.2122,  ..., -0.3293, -0.5171,  0.2915]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -695.0000,  -116.8750, -1473.0000,  ...,   317.5000,   430.7500,
           122.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0596, -0.0729, -1.1299,  ...,  0.3528,  1.9375,  0.8584]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3521, -0.3579,  0.5747,  ..., -0.3076, -0.4988,  0.5366]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2224, -0.1100,  0.3198,  ..., -0.8701, -0.2012,  0.1848]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  69.8125, 1452.0000, -758.0000,  ...,  348.0000, -492.5000,
         -829.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8813, -0.0115, -0.5781,  ...,  0.6938, -0.1478,  0.6021]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.8281, -0.2163,  0.2357,  ...,  0.0101,  0.1943,  0.2744]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.3623,  0.7993,  0.0316,  ..., -0.1348, -2.1367,  0.4402]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 1038., -2764.,   609.,  ...,  1229., -2282.,  -696.]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1206, -0.8335,  1.4023,  ..., -0.0016,  0.0022,  0.0026]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-2.9335e-03,  5.6000e-03,  5.7907e-03,  ...,  2.5845e-03,
         -7.5073e-03, -7.4446e-05]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1570,  0.0554, -0.0728,  ...,  0.0873,  0.0514,  0.0512]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-20.8125, -18.7656,  26.9531,  ...,  -3.8730,   3.7988,   7.9219]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3804,  0.1355,  0.0151,  ...,  0.0013, -0.0327, -0.0044]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0327,  0.0227, -0.0273,  ...,  0.0100, -0.0002,  0.0196]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0196, -0.2150,  0.0861,  ...,  0.0313, -0.0298, -0.1456]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -67.4375,  -56.5312,  136.2500,  ...,  144.6250,   71.8125,
         -158.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1799, -0.7134,  0.2467,  ..., -0.2129,  0.9136, -0.2710]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0303, -0.0229, -0.0820,  ..., -0.0579,  0.0664, -0.0259]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2007, -0.0360,  0.2371,  ...,  0.1750,  0.0615,  0.0724]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[114.6250, -13.5234,  57.3438,  ..., -88.8750, 112.5000, -11.0859]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0860,  0.3157, -0.3921,  ...,  0.0190,  0.0446, -0.0767]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1086,  0.0622, -0.1931,  ...,  0.1193,  0.1143,  0.0700]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1421, -0.3201, -0.1621,  ...,  0.2744,  0.0347,  0.4707]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 85.1250,  66.3750,  35.3438,  ..., -36.3438, -92.2500, -15.3125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6182,  0.2664, -0.0125,  ...,  0.4614, -0.0864, -0.1031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0204,  0.0660, -0.0353,  ..., -0.0066, -0.0921, -0.1027]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2485,  0.0864, -0.1611,  ...,  0.1356,  0.0359,  0.1044]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -90.9375, -189.3750,  -65.2500,  ...,  193.6250,   33.6562,
           -2.1367]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3406,  0.0235, -0.2458,  ...,  0.1119,  0.1493,  0.0052]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0624, -0.1074, -0.0634,  ..., -0.0013, -0.0339, -0.0490]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1329, -0.1865,  0.0778,  ..., -0.0444,  0.2490,  0.1381]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-24.6406, 110.5625, 148.7500,  ..., -68.3750,  33.6250, 121.3750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0234,  0.7490, -0.6123,  ...,  0.1765,  0.0498, -0.2043]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2434, -0.0520, -0.0711,  ..., -0.0360,  0.0402,  0.1364]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2402,  0.2358,  0.0044,  ..., -0.4907,  0.0895, -0.3101]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  -7.9141,  135.6250,   46.4688,  ...,  -77.4375,  186.3750,
         -191.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1033,  0.2988, -0.9790,  ..., -0.2061,  0.0432,  0.0793]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0109, -0.0747, -0.0719,  ...,  0.0551,  0.0790,  0.2333]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0462, -0.3499, -0.1913,  ...,  0.0762, -0.0273,  0.3779]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[   5.5234, -228.1250,   46.2812,  ...,  122.2500,  -40.8438,
          -14.0547]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4746, -0.9229,  1.0586,  ..., -0.1151, -0.3076,  0.1205]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0072, -0.0646, -0.0285,  ..., -0.0456,  0.0767,  0.2018]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2321, -0.4971, -0.1973,  ..., -0.1066,  0.0044, -0.0084]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  55.7188,    5.6133,  -19.0469,  ..., -304.2500, -145.8750,
          -74.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8296, -0.6318,  0.4885,  ...,  0.0714,  0.4790, -0.0291]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1635, -0.0612, -0.0297,  ...,  0.1632,  0.1022,  0.1285]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2316,  0.6997, -0.2979,  ..., -0.2195,  0.7998, -0.0405]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  -8.5938,  -34.9375,  114.5000,  ...,   26.0625, -202.8750,
         -274.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4670,  0.0601,  0.2834,  ..., -0.1782, -0.0977, -0.0487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1160, -0.0489,  0.0170,  ..., -0.0352,  0.0291, -0.0558]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0918, -0.5205, -0.2343,  ...,  0.4939, -0.1719,  0.1107]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -91.8750,  231.2500,  -26.5156,  ...,  -18.7656, -127.5625,
          -31.8438]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8115,  0.6025, -0.3416,  ...,  0.7163,  0.6006, -0.5840]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0256, -0.0164,  0.1356,  ..., -0.1226,  0.0002,  0.1111]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3174,  0.2927,  0.1035,  ...,  0.0252,  0.0531,  0.2004]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-41.6875,  12.0078,  -6.9180,  ..., 418.2500, -66.6250, 260.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5918, -0.0527,  0.0068,  ...,  0.6377, -0.0516,  0.0894]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0570, -0.0721, -0.0074,  ...,  0.1628,  0.1801,  0.1205]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4470,  0.2097, -0.3362,  ...,  0.5469,  0.0062,  0.1340]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -87.9375,  -75.1875,   38.4062,  ..., -219.0000, -185.1250,
         -280.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5752,  0.6982, -0.4443,  ...,  0.3850,  0.0652,  0.1785]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1744, -0.2869,  0.0331,  ..., -0.2944,  0.2407,  0.1599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1599,  0.1670,  0.3669,  ...,  0.1276, -0.8223, -0.1841]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-135.3750, -333.7500,  260.7500,  ...,  -38.8750,  -95.0000,
          175.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6577, -0.7759, -0.2097,  ..., -0.0275,  0.4099,  0.0273]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0162, -0.1526,  0.0428,  ...,  0.1547,  0.1541,  0.1876]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3159, -0.1141,  0.1377,  ..., -0.0102,  0.4878,  0.2025]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-482.5000,   35.1250,   33.3438,  ...,  -21.6875,    9.3125,
         -199.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2070,  0.4878, -0.4900,  ..., -0.3965, -0.3047,  0.4102]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0026,  0.0364, -0.0098,  ...,  0.0827,  0.1061,  0.0138]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1191, -0.2094, -0.2686,  ...,  0.2365, -0.1200,  0.1460]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 319.7500,  239.2500, -105.1875,  ...,  399.7500, -374.0000,
          288.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.8945, 0.2496, 0.3843,  ..., 0.1393, 0.1625, 0.2076]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0254, -0.1043,  0.0710,  ..., -0.1625, -0.0455,  0.1045]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3376, -0.1144, -0.1661,  ...,  0.2036,  0.2250, -0.0260]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 301.2500,  107.5625,   69.6875,  ..., -203.7500,   -9.9453,
          243.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3279, -0.1292,  0.0645,  ...,  0.4207, -0.7529, -0.0461]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1148, -0.3765, -0.0146,  ...,  0.0321,  0.2053, -0.0930]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0580, -0.3513,  0.0924,  ...,  0.1081,  0.5088,  0.3220]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-266.0000,  215.3750,  109.2500,  ...,    2.5762,  -21.8594,
         -268.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0082,  0.4487,  0.0060,  ...,  1.2852, -0.4116,  0.7588]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2323, -0.0989,  0.2727,  ..., -0.0436,  0.0056,  0.0180]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0198, -0.5200, -0.5259,  ..., -0.1749, -0.0620, -0.3254]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 222.7500,  582.5000, -104.2500,  ...,  138.1250, -150.3750,
          -47.4062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2283, -0.8857, -0.0540,  ..., -0.5732,  0.0062,  0.8438]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0251, -0.1118, -0.3467,  ..., -0.4187,  0.1885, -0.2468]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.5215,  0.3889, -0.4280,  ..., -0.0869,  0.0892,  0.9810]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[   4.1445, -318.7500, -120.1250,  ..., -627.5000, -197.6250,
          405.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1449,  0.1216,  0.8896,  ...,  0.1632,  0.2598, -0.6919]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3215, -0.1038, -0.2151,  ...,  0.1660,  0.2988, -0.2820]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1615, -0.7817,  0.4702,  ..., -0.1844, -0.8003, -0.7900]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-162.6250,  340.0000,  149.1250,  ..., -231.3750,  361.2500,
          387.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0670, -0.3064, -0.1113,  ...,  0.5444, -0.0875, -0.1660]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0254, -0.2101,  0.2125,  ...,  0.0516,  0.2307,  0.1456]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3628,  0.1360,  1.2129,  ..., -0.6128, -0.4490,  0.9302]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -70.8750, -655.0000,  409.5000,  ..., -825.0000, -318.5000,
           40.5312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4141, -0.6543,  0.2217,  ..., -0.7578, -0.4995, -0.2925]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0737, -0.2698,  0.2366,  ..., -0.2734,  0.2433, -0.3362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3914, -0.0771, -0.5322,  ..., -1.2959, -0.3350, -0.1667]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-323.0000,  211.8750, -286.5000,  ...,  354.2500, -304.7500,
          305.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6587,  0.1846,  0.2031,  ..., -0.3777, -0.2705, -0.2971]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3574, -0.2683, -0.0803,  ..., -0.4575,  0.0876, -0.6162]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0909, -1.3809, -0.3184,  ...,  0.0687,  0.0143, -0.5376]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-434.0000, -165.8750, -279.2500,  ...,  386.0000, -166.3750,
          417.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8491,  0.1647, -0.0220,  ...,  0.0051, -0.9722, -1.0254]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0148,  0.3862,  0.5322,  ...,  0.4282, -0.1136,  0.2761]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3611,  0.4016,  0.1088,  ..., -0.5093,  0.1345,  0.2264]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -95.1250,   -3.7344, -215.0000,  ...,  114.0000, -218.6250,
          156.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0701, -0.2115, -0.0956,  ...,  0.0202,  1.0420, -0.4365]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1957, -0.3977,  0.1702,  ..., -0.4966, -0.5063, -0.4504]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.6426, -0.1294, -0.0289,  ..., -0.7505,  0.6562, -0.3938]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-338.0000,  559.0000,   12.0703,  ...,  144.2500, -759.5000,
          424.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7163,  0.4700,  0.3647,  ..., -0.2477,  0.1124,  1.0166]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1481, -0.2456, -0.2415,  ..., -0.4722,  0.1948,  0.1499]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5239, -0.1879,  0.5786,  ..., -0.3694,  0.5903, -0.2737]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 520.0000,  413.0000, -153.6250,  ..., -930.0000, -561.0000,
         -123.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0870,  1.1484,  0.1687,  ..., -0.0489, -0.0425,  0.8271]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.5312, -0.1022,  0.3237,  ..., -0.1230, -0.0988, -0.1855]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1195, -0.5552,  0.1271,  ...,  1.1387, -0.0174,  0.4924]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  27.6875, -404.0000,  745.0000,  ..., -272.0000, -584.0000,
         -745.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1486, -0.3909,  0.1962,  ..., -0.0315,  0.8887,  1.5273]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1965,  0.1862, -0.0942,  ..., -0.5288, -0.6294,  0.9150]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1846, -0.8755, -0.6143,  ...,  0.1658, -0.4634, -0.7993]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 650.0000, -499.0000, -116.8750,  ...,  293.7500,  458.0000,
         1288.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2471, -0.3374, -0.8804,  ...,  1.0098, -0.8682, -0.9932]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1750, -0.2776, -0.7759,  ...,  0.0355,  0.6123, -0.1262]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4104,  0.0673, -0.7280,  ...,  0.2634, -0.5474, -0.1099]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-242.3750,  511.7500,   95.5625,  ..., -367.0000, -503.5000,
           68.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2600,  0.4062, -0.1360,  ..., -0.6777,  1.9443,  0.1387]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0114, -0.4541,  0.4333,  ...,  0.2524,  0.1825, -0.9131]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3857,  0.2542,  0.1559,  ..., -0.1465, -0.4167, -0.6377]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-415.2500, -170.8750,  664.0000,  ...,  136.0000,  921.0000,
          108.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6777, -0.2852,  0.0936,  ..., -0.3042,  0.2600,  0.6133]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.8760, -0.3308, -0.1404,  ...,  0.2467,  0.2104,  0.4741]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1888, -0.4456, -0.5801,  ..., -0.1571, -3.3027, -0.3513]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -761.,  -930., -1060.,  ...,  -221.,  -817., -1432.]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 2.7075e-01, -8.3203e-01,  1.8730e+00,  ..., -4.1313e-03,
          1.5526e-03,  6.8760e-04]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0019,  0.0060,  0.0043,  ...,  0.0029, -0.0065, -0.0004]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2073, -0.0323, -0.0895,  ...,  0.0470,  0.0153,  0.0447]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-31.8594, -11.3359,  16.9219,  ...,   9.3516,   5.4805,   1.1328]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3232,  0.1141, -0.4370,  ..., -0.0181, -0.0186,  0.0259]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0316,  0.0190, -0.0175,  ...,  0.0029, -0.0077,  0.0231]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0522, -0.3271,  0.0341,  ...,  0.0792,  0.0367,  0.0903]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-144.6250,   36.3125,  105.9375,  ...,  114.3125,   43.0312,
          -69.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1670, -0.7285,  0.7749,  ..., -0.3137,  0.7617, -0.3921]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0227, -0.0213, -0.0964,  ..., -0.0277,  0.0612, -0.0231]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2059, -0.0671,  0.0923,  ...,  0.0988,  0.2449, -0.0852]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 53.6562, -32.0938, -13.8828,  ..., -83.1875,  63.5000,  -9.8516]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2207,  0.2458, -0.2605,  ...,  0.0205,  0.0709, -0.1234]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0245,  0.0563, -0.1537,  ...,  0.0897,  0.1105,  0.0704]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1885, -0.2410,  0.0042,  ...,  0.1996, -0.0385,  0.3696]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -50.3750,  -33.1875,   32.5312,  ...,  -53.0312, -125.8750,
           35.9062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.5234, 0.0081, 0.4956,  ..., 0.4883, 0.0018, 0.0094]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0027,  0.0352, -0.0216,  ..., -0.0540, -0.1006, -0.0810]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4133, -0.0436, -0.2372,  ..., -0.0630, -0.0795, -0.0082]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  -2.7383,  -11.8984, -167.7500,  ...,  178.0000,   95.0000,
          -18.7344]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0739,  0.4338, -0.3660,  ..., -0.0068,  0.0606, -0.1530]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0800, -0.0811, -0.0237,  ...,  0.0150, -0.0097, -0.0709]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0933,  0.0341,  0.0500,  ...,  0.0865,  0.1031,  0.0831]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-21.3750, -46.6875, 150.8750,  ..., -25.8281, -50.1562,  91.8125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2915,  0.9785, -0.7881,  ..., -0.0720,  0.1124, -0.3887]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2378, -0.0932, -0.0703,  ...,  0.0050,  0.0080,  0.1196]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0492,  0.2825,  0.1605,  ..., -0.2484,  0.2563, -0.2021]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-100.6875,  249.1250,    8.8594,  ...,   23.1250,   65.9375,
          -96.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0276,  0.0885, -0.7915,  ..., -0.2864,  0.0839,  0.1138]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0203, -0.0187, -0.0726,  ...,  0.0986,  0.0556,  0.1411]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1697,  0.1906,  0.0615,  ...,  0.0919,  0.1345, -0.0491]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-189.1250,  -81.1250,  112.0000,  ...,  153.8750,   15.0469,
           -0.5503]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3193, -1.0332,  0.7925,  ..., -0.1917,  0.2341, -0.0171]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0293,  0.0087, -0.0417,  ...,  0.0600,  0.0750,  0.1896]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5137, -0.3667, -0.2200,  ..., -0.2450,  0.3228, -0.1813]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 225.6250,  162.1250,  168.1250,  ..., -138.7500,  -12.5234,
          -34.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7656, -0.3059,  0.5122,  ..., -0.5005,  0.1665, -0.3081]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1964, -0.0662, -0.0525,  ...,  0.0781,  0.0800,  0.0806]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0007,  0.5435, -0.2690,  ...,  0.0623,  0.5625,  0.3379]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 135.1250,   50.5312,   90.3125,  ..., -106.8125, -125.0000,
          -48.4062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1846, -0.1660,  0.1262,  ..., -0.1934,  0.0179, -0.0494]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0189, -0.0056,  0.0346,  ..., -0.0567,  0.0549, -0.0191]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0579, -0.4988, -0.3000,  ...,  0.5132,  0.0400,  0.0190]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-148.2500, -199.0000,  129.2500,  ...,   50.1875, -255.2500,
         -168.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9517,  0.9277, -0.2739,  ...,  0.2113,  0.7676, -0.6924]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0048, -0.1041,  0.0756,  ..., -0.0254,  0.0091,  0.1139]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0415, -0.0332,  0.2220,  ...,  0.4268, -0.1967,  0.2622]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 87.5625, 128.7500, 276.7500,  ...,  44.1250, -91.2500, 233.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3669, -0.1433, -0.1676,  ...,  0.6064,  0.1708,  0.0816]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0716, -0.0184, -0.0245,  ...,  0.1777,  0.1098,  0.1278]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3123,  0.4465, -0.0943,  ...,  0.1942,  0.0848,  0.0127]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -25.0156, -163.8750, -148.2500,  ...,  206.0000, -186.5000,
         -432.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6377,  0.4656, -0.1680,  ...,  0.3176, -0.2473,  0.3911]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1207, -0.2585, -0.1224,  ..., -0.1242,  0.2100,  0.1140]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.6431,  0.1285,  0.6406,  ...,  0.2039, -0.7520, -0.0962]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-524.0000, -122.8125,  203.6250,  ..., -156.8750, -109.4375,
         -113.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7598, -1.0127, -0.8086,  ...,  0.8418, -0.1317, -0.3831]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1176, -0.1238, -0.0138,  ...,  0.0565,  0.0206,  0.1061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3701, -0.1232, -0.1339,  ..., -0.3132,  0.4590,  0.0147]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-207.2500,   -3.1621, -100.1250,  ...,   68.9375,  105.5000,
         -302.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0430, -0.1263, -0.1459,  ..., -0.4988, -0.3208,  0.2520]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0395, -0.1167,  0.1248,  ...,  0.1761,  0.1476,  0.0163]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4070, -0.4082, -0.3140,  ...,  0.2812,  0.0972,  0.2732]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 153.1250,  160.0000, -408.5000,  ...,  551.5000, -211.3750,
          284.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0798,  0.6494, -0.2301,  ...,  0.2690, -0.0046,  0.6890]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0815, -0.0670, -0.0551,  ..., -0.2551, -0.0804,  0.0901]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3311,  0.1593,  0.2018,  ...,  0.1389, -0.1256, -0.3083]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-260.7500,  127.8125, -160.8750,  ..., -187.6250,  -79.2500,
          275.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1646, -0.2783,  0.3040,  ...,  0.6460, -0.8750,  1.3281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1343, -0.5342, -0.1753,  ..., -0.0413,  0.3301,  0.1671]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.1476, 0.0226, 0.0974,  ..., 0.5005, 0.4351, 0.2394]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -73.5000,  199.8750,  672.0000,  ..., -261.2500,  104.8750,
          132.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3936, -0.1587, -0.4624,  ...,  0.4551, -0.3699,  0.1650]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1824, -0.0723,  0.1886,  ...,  0.0038,  0.0490,  0.1495]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1267, -0.1305, -0.2341,  ...,  0.0879, -0.2812,  0.0242]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-142.6250,  284.0000, -233.6250,  ..., -245.1250, -132.1250,
          -79.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7568,  0.0797, -0.5083,  ...,  0.0964, -0.1138,  0.5889]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1626, -0.2859, -0.2620,  ..., -0.2253,  0.0077,  0.0284]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.1680,  1.0020,  0.0388,  ..., -0.1157,  0.0372,  0.2344]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 443.7500,  685.0000,  -75.4375,  ..., -106.5000, -325.5000,
          -51.7812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5713, -0.3271,  0.9199,  ...,  0.3660,  0.6440, -1.0088]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2291, -0.2340, -0.2351,  ...,  0.3613,  0.4766, -0.2260]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3958, -0.4280,  0.3118,  ..., -0.2150, -0.4934, -0.8096]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 338.5000, -162.0000,  -89.1250,  ..., -281.0000, -248.2500,
          594.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6187, -0.0040,  0.3352,  ..., -0.2362,  0.0441, -0.4158]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2932, -0.1124,  0.1663,  ...,  0.1565,  0.1774,  0.3909]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1908,  0.3633, -0.8745,  ...,  0.5786, -0.3777, -0.0623]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-294.5000, -719.5000,  166.5000,  ..., -228.2500, -259.2500,
         -438.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0400,  0.2025, -0.4780,  ...,  0.3948, -1.4512, -2.0156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2284,  0.1271,  0.0997,  ..., -0.4568, -0.0031, -0.0862]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7285, -0.0608, -0.6152,  ..., -0.8164,  0.1633, -0.2708]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-175.6250,  113.6875, -735.5000,  ...,  135.2500,  -47.7812,
          361.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3064,  0.0660,  0.3774,  ...,  0.3831, -0.3989,  0.2163]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0119, -0.3044, -0.0229,  ..., -0.6802,  0.0412,  0.0696]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0435, -0.5347, -0.1064,  ...,  0.3943, -0.3425, -0.3994]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-774.5000,  374.7500,   70.9375,  ...,  543.5000,  -84.0625,
          797.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4775, -0.0939,  0.1979,  ..., -0.4111,  0.3962, -0.9512]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0437, -0.1399,  0.1422,  ..., -0.0246,  0.0073, -0.1118]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2424,  0.0293,  0.1816,  ..., -0.0931, -0.1212, -0.5625]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-494.2500,  160.2500, -210.2500,  ...,  232.5000, -504.5000,
          421.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5581, -0.2986, -0.3027,  ...,  0.7539,  0.5552, -0.3459]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0789, -0.4382,  0.2571,  ..., -0.2432, -0.0676, -0.2913]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.5293, -0.1643, -0.2126,  ..., -0.4019,  1.0225, -0.7422]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -31.5469, -110.0000,  578.0000,  ...,  696.5000, -114.5625,
          530.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7104,  0.4109,  0.7939,  ...,  0.9141, -1.1992,  0.1338]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1448, -0.7998,  0.0175,  ..., -0.4214,  0.4478, -0.1724]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3728, -1.2217,  0.0376,  ...,  0.0587,  0.3486, -1.0029]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 222.2500,  672.5000, -672.0000,  ..., -256.7500,  480.0000,
          250.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5405,  0.2263, -0.2209,  ..., -0.4080,  0.0175, -0.5898]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.5562, -0.2932, -0.1656,  ..., -0.2954,  0.0121,  0.0952]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0421,  0.5215, -0.3545,  ...,  0.3296, -0.3525, -0.0490]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 134.2500, -602.0000,  -40.4375,  ...,   76.5000, -844.0000,
          302.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4854,  0.2286,  0.1195,  ..., -0.1196, -1.2012,  1.0771]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3940,  0.2793,  0.4941,  ..., -0.4287, -0.1145,  0.5479]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1942, -0.5410, -0.9634,  ...,  1.0137,  0.5542,  0.1521]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 308.7500,  853.0000,  191.7500,  ...,  189.8750,   51.8438,
         -362.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6221,  0.5786, -0.1270,  ...,  0.5952,  0.1495, -0.2556]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5303, -0.0169, -0.8066,  ...,  0.3171,  0.2070, -0.3406]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1555, -0.8521,  0.6382,  ..., -0.7104, -0.5952,  0.6963]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -710.5000,   292.0000, -2031.0000,  ...,   862.5000,  -130.7500,
           308.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1193, -0.4646, -0.5557,  ..., -0.8726, -1.4678,  0.1940]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4912, -0.1660,  0.6514,  ..., -0.3557,  0.1438, -0.4919]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0650, -0.3950, -1.0889,  ..., -0.8555, -0.8291, -0.8794]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  134.6250,   523.5000, -1087.0000,  ...,  -228.6250,  -381.0000,
            11.9922]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.2285,  0.5903, -0.2052,  ...,  0.4014, -0.1020, -0.1570]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3237, -0.1676, -0.0740,  ..., -0.6348,  0.8130,  0.1669]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2932, -1.0557, -0.5845,  ...,  0.1492, -2.2344,  0.5542]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  535.5000,    38.2812,  -238.3750,  ...,   299.5000, -1431.0000,
           357.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0099, -0.4563,  1.0723,  ...,  0.0028, -0.0024, -0.0019]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0025,  0.0058,  0.0041,  ..., -0.0006, -0.0056,  0.0001]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1395,  0.0173, -0.1061,  ...,  0.0967,  0.0349,  0.0162]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-14.8906, -19.7500,  35.7500,  ...,  28.2500,  38.0938,  -3.6895]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5532,  0.0958,  0.1246,  ...,  0.0516,  0.0225, -0.0056]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0164,  0.0144, -0.0079,  ..., -0.0126,  0.0199,  0.0109]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1385, -0.2676, -0.0879,  ...,  0.1825,  0.0191,  0.0865]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-16.4531, 111.4375, -13.1953,  ..., -34.6562, -13.5781, -21.4062]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.1236, 0.1190, 1.0127,  ..., 0.1183, 0.0051, 0.0689]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0224,  0.0801, -0.0570,  ..., -0.1025, -0.0620,  0.0761]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0823, -0.1697, -0.2032,  ..., -0.0197,  0.0146,  0.2289]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-108.6250,  -16.2188,  -85.5000,  ...,  -22.4844,  -77.7500,
           25.6094]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1859, -0.4421, -0.7656,  ...,  0.2205, -0.2874, -0.0132]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0536, -0.0188, -0.0838,  ...,  0.0331,  0.1301,  0.0039]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2966,  0.0586, -0.1147,  ...,  0.1317, -0.3870,  0.0352]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  49.3750,  319.5000, -153.0000,  ...,  -68.3125,  603.0000,
         -130.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5454, -0.2766, -1.7832,  ..., -0.2089, -0.3127,  0.3892]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0796,  0.0695,  0.0299,  ...,  0.0576, -0.0473, -0.0746]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2644, -0.0089, -0.0843,  ...,  0.0510, -0.0414,  0.0574]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -705.5000,  1968.0000,  -448.0000,  ...,  -175.6250, -2828.0000,
          1493.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4780, -0.3618,  0.3142,  ..., -0.1199,  0.0112, -0.2184]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2007, -0.2747, -0.2076,  ...,  0.1649, -0.0428,  0.1760]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0591, -0.0956, -0.2620,  ...,  0.1914,  0.2915, -0.3884]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[   86.8750,  2676.0000,  -925.0000,  ..., -2196.0000,  3212.0000,
          -724.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4766, -0.9517, -0.9404,  ..., -0.0163,  0.1936,  0.0020]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2046, -0.0873, -0.1318,  ...,  0.0126,  0.0168,  0.0898]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1118, -0.1873,  0.2969,  ...,  0.1155,  0.1715, -0.3511]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-155.7500,   30.8281,  297.0000,  ..., -406.0000,  347.7500,
         -143.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1814,  0.5078, -0.1899,  ...,  0.1215, -0.1494,  0.2444]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0249, -0.1110,  0.0696,  ...,  0.1288, -0.0414,  0.2472]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0926, -0.3186, -0.0754,  ..., -0.3660, -0.2971,  0.2345]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-692.0000, -443.0000, -252.5000,  ..., -206.0000,  474.5000,
         -275.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5820, -2.0215,  0.5034,  ..., -0.2925, -0.2030, -0.5024]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0401, 0.0614, 0.0312,  ..., 0.0681, 0.2411, 0.1078]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7632,  0.1864, -0.1333,  ...,  0.1653,  0.2786,  0.5464]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 171.2500, -101.3750,  473.5000,  ..., -429.0000,  579.5000,
         -141.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5664, -0.3367, -0.5767,  ...,  0.0828,  0.1213, -0.2443]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2496, -0.1636,  0.0170,  ...,  0.1738,  0.0781,  0.2358]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0692,  0.0856, -0.1674,  ..., -0.1365,  0.0827, -0.0108]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 128.6250, -140.2500,  329.2500,  ...,   64.1875,  258.2500,
          338.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4827, -0.0006, -0.0308,  ...,  0.1344,  0.2510, -0.1536]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0657, -0.1281, -0.0097,  ..., -0.0449,  0.0448, -0.1077]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0224, -0.3933, -0.0314,  ...,  0.2620,  0.3186, -0.0019]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-101.8750,  -58.0625,  438.7500,  ...,  164.6250, -308.0000,
          116.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0602, -0.2235, -0.4316,  ..., -0.2512,  0.0350,  0.0034]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1149, -0.0065, -0.2139,  ...,  0.0156, -0.3748,  0.1580]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4397, -0.1143, -0.0333,  ..., -0.0156,  0.0483, -0.1317]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -74.6875,   68.3125,  204.0000,  ...,  -15.2109, -258.5000,
          420.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2139, -0.1187,  0.3979,  ...,  0.0492,  0.0572,  0.2727]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0550, -0.0274,  0.0712,  ...,  0.1130,  0.1176, -0.0134]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0520, -0.0850,  0.0481,  ...,  0.5166, -0.4880,  0.0975]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  99.4375, -258.2500,  181.8750,  ...,  257.2500,  -59.4688,
          223.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3132, -0.5332, -1.1631,  ...,  0.2205,  0.0017, -0.0139]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2224,  0.3572, -0.1046,  ...,  0.1299,  0.1376, -0.0372]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2496,  0.1251, -0.1034,  ...,  0.3948,  0.1620,  0.8604]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-205.7500, -112.3125,   18.2031,  ...,   47.2188, -249.7500,
          106.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8428, -0.5249,  0.1160,  ..., -0.1857, -0.3181, -1.0781]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0446, -0.0349, -0.0406,  ...,  0.2382,  0.0641,  0.1207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0090, -0.5083, -0.5054,  ...,  0.0622, -0.1273,  0.4587]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 86.8750, 154.7500, 569.0000,  ..., 212.3750, 213.7500, 164.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0773, -0.1954, -0.0910,  ..., -0.6606, -0.2056,  0.1790]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0020,  0.1814,  0.1786,  ...,  0.2168,  0.1381,  0.0417]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3660, -0.6841, -0.1521,  ...,  0.3325,  0.1042,  0.5747]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-695.5000,  219.6250,  213.0000,  ..., -201.6250,  136.2500,
           86.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0880,  0.4045,  0.0803,  ..., -0.3799,  0.0320,  0.6660]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0031,  0.0108,  0.0377,  ..., -0.0024,  0.0213,  0.0595]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0101,  0.0407,  0.0043,  ..., -0.0190,  0.2490,  0.5562]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  84.2500, -210.0000, -120.6250,  ...,  390.2500,  569.0000,
         -456.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4053, -0.4978, -0.7041,  ...,  0.0070, -0.3135,  0.3845]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0384, -0.2688, -0.0102,  ...,  0.2076,  0.2925,  0.0670]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4011, -0.3000,  0.0775,  ...,  0.1941,  0.2238,  0.0266]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-177.8750,  368.2500,   -5.4883,  ...,  144.7500, -105.9375,
         -132.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.0886, 0.5420, 0.4941,  ..., 0.1855, 0.5439, 0.0675]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1111, -0.2571,  0.2231,  ...,  0.2319,  0.1604, -0.1133]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3552, -0.1987,  0.5493,  ...,  0.2202,  0.4058,  0.4172]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 277.0000, -289.5000,  233.1250,  ...,  -61.3438,  205.6250,
            8.5859]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6982,  0.8618, -0.4614,  ...,  0.1268, -0.4192,  0.6890]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0392, -0.0815, -0.2198,  ..., -0.0104, -0.0135, -0.1050]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.9434,  0.4336,  0.0501,  ..., -0.2507,  0.6343, -0.1382]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -43.8750, -146.2500, -282.0000,  ...,  236.1250,   22.2500,
         -284.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0529,  0.0903,  0.4709,  ..., -0.2820, -0.1250, -0.4517]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2140, -0.4348, -0.0493,  ...,  0.5508,  0.4788,  0.2372]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0719,  0.2595, -0.7129,  ...,  0.2896, -0.2036, -0.5337]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -52.8750,  166.3750, -282.2500,  ..., -181.7500, -350.5000,
         -217.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1005,  0.2598, -0.5107,  ..., -0.4517, -0.3630, -0.6665]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1005,  0.0258, -0.1109,  ...,  0.0578,  0.0295,  0.0644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3970, -0.5571, -0.7759,  ..., -0.0201, -0.5415,  0.0200]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -323.7500, -1134.0000,  -258.0000,  ..., -1883.0000,  -322.0000,
           530.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3840,  0.1606,  0.0646,  ..., -0.5649,  0.9048, -0.2455]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2991, -0.2637,  0.2598,  ..., -0.4204,  0.1149,  0.2404]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3213,  0.1493, -0.4539,  ...,  0.9351,  0.2322,  0.0586]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-356.2500, -298.0000,  -50.3438,  ..., -108.2500,  -85.6250,
          251.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2339, -0.0558,  0.4500,  ...,  0.4080, -0.6504,  0.6270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4053, -0.0798,  0.2046,  ..., -0.3164, -0.3357, -0.2571]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0008,  0.2949, -0.0883,  ...,  0.5103,  0.0921, -0.2191]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 371.5000,  309.2500,  632.0000,  ..., -192.8750, -272.0000,
          289.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.3496, -1.9268, -0.6055,  ..., -0.2820,  0.2837, -0.6270]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1146,  0.1680,  0.4502,  ...,  0.2517,  0.0054,  0.3057]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.0830, -0.2100, -0.5542,  ...,  0.8594,  0.7324,  0.5928]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-121.7500,  107.4375,  -37.9062,  ...,  288.2500,  -46.9062,
          -12.8438]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1095, -0.0908, -0.0266,  ..., -0.2081,  0.9932,  0.8379]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2477, -0.4102,  0.1458,  ..., -0.7808, -0.4739, -0.6865]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1438, -0.6362,  0.2595,  ..., -0.5776,  0.0072,  0.5942]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 385.7500, -388.2500, -319.7500,  ...,  905.5000,  393.5000,
          705.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4729,  0.5352,  0.4504,  ...,  1.6943,  0.0959,  0.0550]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2466, -0.3301, -0.5854,  ..., -0.3787,  0.5195,  0.5498]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0414, -0.1010, -0.0638,  ..., -0.4863,  0.3491,  1.0781]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 275.7500,  352.0000, -785.0000,  ...,  426.5000, -254.0000,
         -235.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6816,  0.0487, -1.2539,  ..., -0.5962, -1.4297,  0.7324]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2446,  0.5781,  0.0160,  ..., -0.6841,  0.1664, -0.3635]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4475,  0.3071, -0.3096,  ...,  0.2228, -0.4187,  0.0533]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-572.5000,  607.5000,  -94.5000,  ...,  383.2500,  -82.1250,
          846.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7676, -0.4951, -0.1847,  ..., -0.0262,  0.4600,  0.6909]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0732,  0.0862,  0.0920,  ..., -0.4976, -0.1558,  0.7568]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5181, -0.6133, -0.6992,  ...,  0.2151, -0.5708, -0.1790]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-235.1250,  -47.0625, -501.7500,  ...,  397.2500,  696.5000,
         2052.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0687,  0.0224, -0.1315,  ...,  0.0945,  0.2812,  2.1777]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1744, -0.0507, -0.6353,  ..., -0.1495,  0.0839, -0.0071]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.6660,  0.6177, -0.7617,  ..., -0.2737,  0.1340,  0.1753]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -434.2500,  1080.0000,    54.4375,  ...,  -275.7500, -1194.0000,
           709.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1406,  0.6079, -0.6919,  ..., -1.2090,  0.2854, -0.2281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5996,  0.3000,  0.2766,  ..., -0.2659, -0.8853,  0.5342]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0841, -0.5718,  0.4863,  ..., -0.5635, -1.6338, -0.5811]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  828.0000, -1206.0000,  -797.0000,  ...,   498.2500,  -617.0000,
           667.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0342, -0.0608,  0.3054,  ..., -0.2935, -1.0176, -0.2111]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3662,  0.0223,  0.2484,  ...,  0.2632,  0.1713,  0.6055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4199, -0.2896, -0.0884,  ..., -0.0903, -1.2080,  0.1863]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -307.2500, -1373.0000,  1105.0000,  ..., -1193.0000,  1261.0000,
           252.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1755, -1.4336,  1.9658,  ...,  0.0048, -0.0033,  0.0025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0004,  0.0070,  0.0008,  ..., -0.0022, -0.0106, -0.0041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0824,  0.0691, -0.0769,  ..., -0.0055, -0.0019,  0.0799]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-37.6562,  41.8750, -84.3750,  ...,  37.7812, -45.2812,   4.0000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2150, -0.2045,  0.1747,  ..., -0.0034,  0.0251,  0.0405]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0055, -0.0017, -0.0100,  ..., -0.0007,  0.0115,  0.0075]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2404, -0.2720, -0.0830,  ...,  0.2236, -0.0397,  0.0318]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  4.0742,  45.9375,  -1.3916,  ..., 144.6250,  43.1562,   5.9609]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4690, -0.5552, -0.2126,  ..., -0.1833, -0.0038,  0.1343]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0232, -0.0450, -0.0637,  ..., -0.0391,  0.0054, -0.0007]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0746, -0.2178, -0.2598,  ...,  0.2903,  0.1840,  0.0699]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -5.0000,  12.0859,  88.5625,  ...,  18.9688, -29.8906, 101.8750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3962,  0.1921, -0.3257,  ...,  0.0051,  0.0521,  0.0120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0565,  0.0165, -0.0573,  ..., -0.0032,  0.1216,  0.0234]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2377,  0.0461, -0.0258,  ..., -0.3882,  0.2656, -0.2435]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-185.6250,   98.3750,  154.7500,  ..., -118.0000,   41.2500,
           49.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2798,  0.4507, -0.3296,  ..., -0.1733, -0.3267, -0.2844]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0261,  0.0371, -0.0068,  ...,  0.0660, -0.0911, -0.0766]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0216,  0.0767, -0.0454,  ..., -0.4536,  0.0660,  0.0864]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -24.5781,  130.5000, -170.6250,  ...,   41.9688,  -84.8125,
           77.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1100, -0.2539, -0.5088,  ...,  0.0402, -0.1142,  0.2084]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1219, -0.2001, -0.0983,  ..., -0.0182, -0.0511,  0.0073]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.5430e-01, -5.0928e-01, -1.4673e-01,  ...,  2.7156e-04,
          7.0740e-02,  3.4155e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -24.2031,  162.3750,   89.9375,  ...,   35.3750,  183.6250,
         -135.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5801,  0.7217,  0.7368,  ..., -0.0335, -0.0394,  0.3787]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1501, -0.0809,  0.0763,  ...,  0.0352,  0.0132,  0.0881]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2321, -0.3723,  0.1758,  ...,  0.5845, -0.2480,  0.1895]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -25.7031,  -28.1875, -115.0625,  ...,  137.1250,  -87.4375,
           16.7344]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0574, -0.2233,  0.3071,  ..., -0.0413,  0.0464,  0.0031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0757, -0.0195, -0.0568,  ...,  0.0479,  0.0141,  0.2418]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2267,  0.0270,  0.0040,  ...,  0.3198, -0.2620,  0.3108]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-76.8125,   1.3154, -21.7969,  ...,  18.4375, 135.8750, -61.1250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1259,  0.0962,  0.1113,  ..., -0.2986,  0.4043, -0.3899]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0274, -0.1942,  0.0740,  ...,  0.1276,  0.1348,  0.0893]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5283, -0.3882, -0.2385,  ...,  0.4026, -0.2832,  0.2700]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 127.8125, -130.5000,   -6.8164,  ...,   93.3125,   33.0000,
           34.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1451, -0.7393,  0.4431,  ...,  0.5386, -0.1082,  0.4443]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1476, -0.0555, -0.0126,  ...,  0.1030,  0.1815,  0.1622]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0264,  0.3137, -0.0341,  ..., -0.0443, -0.3455,  0.2028]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -15.0234,  114.1250,   21.4062,  ..., -190.6250,  -95.3750,
          143.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2341, -0.0276, -0.0558,  ..., -0.1599, -0.0321, -0.0678]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0318, -0.0988,  0.0919,  ..., -0.0491,  0.0189, -0.0429]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0272, -0.4487, -0.1613,  ...,  0.2805,  0.2864,  0.4888]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 294.0000,  163.8750,  116.5000,  ..., -168.8750,   19.5625,
         -204.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5903,  0.5996, -0.5190,  ..., -0.1078,  0.4011, -1.0000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0096, -0.0560,  0.0222,  ...,  0.0889,  0.1835,  0.0046]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1936,  0.1794, -0.1743,  ...,  0.3413,  0.4758,  0.3601]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-56.5000, -55.4062, 338.5000,  ...,  45.2188, -33.0312, -11.1562]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0453, -0.3687,  0.5186,  ...,  0.2437, -0.4795,  0.2432]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0764, 0.0860, 0.0077,  ..., 0.1059, 0.0355, 0.0152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5229,  0.2773, -0.1570,  ...,  0.1152, -0.1306, -0.0155]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 33.5938,  47.9688, 123.9375,  ...,  36.0312,  73.6250, -23.2812]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4478, -0.1776, -0.4358,  ...,  0.3552,  0.0664,  0.7363]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1249,  0.1066, -0.2224,  ...,  0.3076,  0.1786, -0.1217]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3323, -0.2800,  0.2327,  ..., -0.0210, -0.3577, -0.1394]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 126.7500,  136.2500,  191.3750,  ...,  187.6250, -166.2500,
           88.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0469, -1.0039,  0.1089,  ...,  0.5864,  0.0285, -0.1318]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1020, -0.0365, -0.0419,  ...,  0.1072,  0.0621,  0.1072]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0172, -0.3594,  0.5605,  ..., -0.2625, -0.1150, -0.2979]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  77.6875, -128.2500,  -77.9375,  ..., -216.2500, -147.2500,
          144.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4526, -0.0805,  0.5146,  ..., -0.1619, -0.0828,  0.1032]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0060,  0.0468,  0.1115,  ...,  0.1825, -0.0881,  0.0837]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0536, -0.2510, -0.2886,  ...,  0.0044, -0.7651,  0.5117]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[203.0000,  69.6250,  73.6250,  ..., 320.0000, -10.7500, 242.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.1041, 0.1931, 0.1254,  ..., 0.0934, 0.0822, 0.0938]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0972, -0.1255,  0.0307,  ..., -0.3083,  0.0603,  0.0120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1272,  0.3220, -0.0337,  ...,  0.1584,  0.0983, -0.1836]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -61.1250, -225.6250, -123.3125,  ...,  -94.0625,   16.1250,
          104.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5591, -0.4805,  0.1549,  ...,  0.5498, -0.3569,  0.0790]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1043, -0.1670, -0.1973,  ..., -0.0379,  0.1656, -0.0250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0148,  0.0842, -0.6855,  ...,  0.5254,  0.4104,  0.5547]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -49.7500,  522.0000,  342.0000,  ...,  239.7500, -170.3750,
          104.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8398, -0.4092, -0.6187,  ...,  0.1231,  0.2250,  0.1639]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1543, -0.0229, -0.0223,  ...,  0.1510,  0.0328, -0.0628]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3413, -0.2010, -0.2328,  ..., -0.3850, -0.7021,  0.1359]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  23.7500, -334.2500, -304.7500,  ...,   56.8750,   10.9609,
         -220.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3425, -1.0693, -0.8833,  ..., -0.3000,  0.1320, -0.8809]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0365, -0.0294,  0.0752,  ...,  0.2620,  0.0295,  0.0396]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.3799, -0.0613,  0.5645,  ..., -0.5684,  0.3452,  0.3604]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 225.5000, -290.2500, -252.3750,  ...,   31.8438,  146.8750,
         -346.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2318, -0.2808,  0.5239,  ..., -0.4368,  0.3411,  0.2374]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0906, -0.2656, -0.1271,  ..., -0.3552,  0.2861,  0.2200]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1212, -0.4192,  0.1791,  ..., -0.0653, -0.0731, -0.3860]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 590.0000,   28.5625, -264.7500,  ...,  273.2500,  344.7500,
          -48.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6113, -0.6187, -0.2354,  ...,  0.1649, -0.1538,  0.5405]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1273, -0.3594,  0.0565,  ...,  0.0742,  0.0871, -0.2947]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0727,  0.1813, -1.2402,  ..., -0.1353,  0.3062, -0.7856]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-193.2500, -390.7500,  417.0000,  ..., -623.5000,  641.5000,
         -178.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3394,  0.2917,  1.9326,  ..., -1.3887, -1.6348, -1.1006]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4138, -0.2422,  0.3235,  ..., -0.2930, -0.0102, -0.2844]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2852, -0.0162, -0.2520,  ...,  0.0082,  0.2605,  0.9580]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-340.5000,  811.0000,  -49.9688,  ..., -631.0000,  -62.2812,
          245.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6182,  0.9248,  1.3613,  ..., -0.3770, -0.2091,  0.1976]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1866,  0.0187,  0.0314,  ..., -0.1559,  0.3616,  0.0167]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8691, -0.1891,  0.4658,  ..., -0.2350,  0.4026, -0.3667]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 250.1250,   92.7500, -360.7500,  ...,  153.8750, -331.0000,
          784.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2064,  0.2136, -0.9214,  ...,  0.5288,  0.2413, -0.1720]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2242, -0.4358,  0.1846,  ..., -0.0101,  0.0101, -0.4585]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0177, -0.6562, -0.1440,  ...,  0.4575,  0.1565,  0.5229]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 174.7500,  -56.5312, -321.2500,  ...,  -92.5000,   26.4375,
          106.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0710, -0.9004,  0.0634,  ...,  0.1621, -1.1162, -0.5996]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2195, -0.3545, -0.6177,  ..., -0.2263, -0.9165,  0.1212]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0648, -1.1914,  0.3669,  ..., -0.3586,  1.7217,  0.6807]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-396.5000,    2.0664,  866.0000,  ...,  497.7500, -187.1250,
          658.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9917,  0.2312,  0.1837,  ..., -0.0986,  0.3191, -0.4714]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2742, -0.1893,  0.0479,  ..., -0.1086,  0.3352,  0.1454]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2561, -0.6055, -0.2603,  ...,  0.4583, -0.1917, -0.2793]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  128.7500,  -333.7500,   198.5000,  ...,   221.6250, -1238.0000,
           -13.6797]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0099,  0.5620, -0.3762,  ...,  0.8892,  0.8438, -0.4773]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0834,  0.0118, -0.0538,  ..., -0.3569, -0.0172, -0.0235]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1195,  0.2449, -0.1058,  ...,  0.0839,  0.1609,  0.0298]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-1.0962e-01, -5.8950e+02,  8.4688e+01,  ...,  6.8281e+00,
         -4.2025e+02, -3.6475e+02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0292, -0.3074,  0.1350,  ...,  1.2725,  0.2578,  0.8237]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1957, -0.6685,  0.2130,  ..., -0.2529,  0.2566,  0.3547]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4294,  0.1447,  0.0371,  ..., -0.0349,  0.0190,  0.1721]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -78.0625, -601.5000, -798.0000,  ..., -570.0000,  628.0000,
          701.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.1614, 0.6885, 0.5591,  ..., 0.3958, 0.2070, 0.1310]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2277,  0.4062, -0.3630,  ...,  0.4690,  0.1003,  0.2549]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2979, -0.3210, -0.1820,  ...,  0.1562, -0.3508, -0.2040]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-206.2500,  580.0000, -308.2500,  ..., -510.2500, -565.5000,
          610.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4421,  0.1409,  0.5117,  ...,  0.6797,  0.1310, -1.2578]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2788, -0.0021,  0.1337,  ..., -0.6499, -0.4058,  0.1289]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1458, -1.9248, -0.8281,  ..., -0.2101, -0.6694,  0.9990]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  897.5000, -1570.0000,    55.9062,  ...,  1070.0000,  2248.0000,
          -414.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6953,  0.1144, -0.3152,  ...,  0.6245,  0.7871, -0.6304]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1156, -0.3462,  0.0947,  ..., -0.0926,  0.3989,  0.1422]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4297,  0.0431, -0.2898,  ...,  0.2583, -1.5762,  1.8818]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 1212., -3428.,  2308.,  ...,   479.,   501., -1926.]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0300, -0.3596,  1.0000,  ...,  0.0049, -0.0011, -0.0025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0012,  0.0037,  0.0067,  ...,  0.0009, -0.0037,  0.0001]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1208, -0.0354, -0.1219,  ...,  0.0647, -0.0136,  0.0342]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  7.9531, -10.1094,  -6.3906,  ...,  22.6719,   3.0273,  -7.6953]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5400,  0.0679,  0.9307,  ...,  0.0258,  0.0098, -0.0142]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0153,  0.0177, -0.0099,  ...,  0.0094,  0.0068,  0.0069]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0437, -0.0023,  0.0222,  ...,  0.1978,  0.0863,  0.0323]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-76.1875,  33.6562,  14.5469,  ...,  27.3750, -22.8281,  51.0312]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7451,  0.0024,  0.5439,  ..., -0.4915,  0.2279,  0.1284]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0576,  0.0194, -0.0645,  ...,  0.0438, -0.0093,  0.0068]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5303, -0.1698, -0.1254,  ...,  0.1090,  0.0435, -0.0278]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-15.1484, -39.6562, -27.0781,  ...,  56.5312,  51.0000,   9.5781]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3342,  0.0684, -0.0143,  ...,  0.1978, -0.2764, -0.0248]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0932,  0.1025, -0.0906,  ...,  0.0358,  0.1791, -0.0063]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0110, -0.1492,  0.0893,  ..., -0.0321, -0.1661, -0.0147]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  1.4814,  29.6562, -65.7500,  ..., -70.6250, -73.4375, -50.4375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0410,  0.3953,  0.3464,  ...,  0.0638, -0.0041, -0.3247]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0226,  0.0271,  0.0088,  ...,  0.0492, -0.0367, -0.0088]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1825,  0.1135, -0.3459,  ..., -0.0693,  0.0094,  0.0103]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -65.6875,  140.0000,  -56.8125,  ...,   18.9062,  110.0625,
         -140.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2402, -0.1735,  0.1421,  ...,  0.1194, -0.0854,  0.4600]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0839, -0.1333, -0.1176,  ...,  0.0009, -0.0269,  0.0006]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1130,  0.2253,  0.2302,  ..., -0.1779, -0.0923, -0.0031]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-108.2500,  171.6250,   65.6875,  ...,   91.1875,   -3.8398,
          -18.6094]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0091,  0.0801,  0.4348,  ..., -0.3501,  0.4260, -0.5049]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0861, -0.0887, -0.0034,  ...,  0.0703,  0.0414,  0.0580]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1776,  0.0598,  0.1040,  ..., -0.1989,  0.4329,  0.2423]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  88.9375, -133.5000,  153.7500,  ...,  -83.1875,  -59.6562,
          298.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1346,  0.6636, -0.2539,  ..., -0.2710,  0.0345,  0.1087]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1406, -0.1125, -0.0720,  ..., -0.0222,  0.1498,  0.0637]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2212, -0.6406, -0.1722,  ...,  0.9219, -0.2993,  0.7251]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  20.6875,   28.8125,    7.8555,  ...,  -13.4531, -170.1250,
          -40.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3247, -0.7100,  0.4734,  ..., -0.1469, -0.3403, -0.2627]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0409, -0.0509,  0.0707,  ...,  0.0956,  0.1614,  0.1012]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.9175,  0.0912, -0.2930,  ..., -0.0636, -0.0408, -0.5635]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-132.7500,  -10.3516,  130.2500,  ...,  104.4375,  228.2500,
          -32.6562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1074, -0.7041, -0.4348,  ...,  0.1610, -0.3848,  0.2438]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 8.9783e-02, -1.1035e-01,  3.3539e-02,  ..., -4.3571e-05,
          2.4402e-01,  1.2244e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1436, -0.0635, -0.2113,  ...,  0.0717,  0.0380,  1.0010]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -59.0000, -109.0625, -108.9375,  ...,  -63.7500,  -41.2188,
           42.7188]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4607, -0.4802,  0.2438,  ...,  0.0726,  0.0335, -0.4055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0044, -0.0641,  0.0337,  ..., -0.0209, -0.0424,  0.0109]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2539, -0.3306, -0.0356,  ...,  0.1192, -0.1192, -0.1127]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-341.5000,   87.3125,  126.1250,  ...,   20.7344,  147.3750,
          -49.1562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1135,  0.1934, -1.3164,  ..., -0.1719,  0.0975,  0.0476]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0251, -0.0469,  0.0294,  ..., -0.0718,  0.0380,  0.1432]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1171,  0.5615, -0.4873,  ...,  0.2233, -0.0279,  0.4275]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 430.7500,  539.0000, -109.8750,  ...,  -99.2500,    1.6123,
         -141.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2795, -0.0759,  0.3398,  ...,  0.2529, -0.3093,  0.1914]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0715,  0.0939, -0.0042,  ...,  0.1420,  0.1415,  0.0385]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8232,  0.2297, -0.6777,  ...,  0.7627,  0.0878, -0.0769]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  45.5938,  184.0000, -178.2500,  ...,  147.0000, -392.5000,
          -84.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9355, -0.3362, -0.0412,  ...,  0.0499, -0.0410,  0.0316]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0886, 0.2301, 0.0025,  ..., 0.1512, 0.2227, 0.0043]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.6733,  0.3904,  0.2052,  ...,  0.0446, -0.1689,  0.4543]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 267.5000, -249.1250,   45.8125,  ...,  -93.8125,    1.3027,
         -111.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2324, -1.7295, -0.5830,  ..., -0.0418,  0.1893, -0.2769]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0151, -0.0575, -0.0183,  ...,  0.1242, -0.0266,  0.1530]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1761, -0.2490, -0.0384,  ..., -0.4087,  0.5234,  0.2415]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 98.2500,  17.7812, 118.8125,  ..., 181.5000, -68.1875, 281.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9238,  0.2871,  0.5913,  ..., -0.3074, -0.2366,  0.0912]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0223, -0.0184,  0.1024,  ...,  0.0669,  0.0262,  0.0437]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5215, -0.2380, -0.2529,  ...,  0.1462,  0.4136,  0.1160]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[   2.6387,  238.1250, -275.7500,  ...,  289.2500,  -48.5000,
         -448.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4370,  0.7236,  0.3711,  ..., -0.3589,  0.0832,  0.5391]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0421, -0.1442, -0.0165,  ..., -0.1726, -0.1182,  0.2238]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0926,  0.5020,  0.0344,  ...,  0.8408, -0.1212, -0.1329]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-102.9375,  298.7500,  119.0625,  ...,  244.7500,  197.2500,
         -185.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3074, -0.2751,  0.0899,  ...,  0.1209,  0.1256, -0.2971]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0719, -0.0786, -0.0213,  ..., -0.2837,  0.2234,  0.1260]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1038, -0.0355,  0.2140,  ..., -0.0412,  0.6226,  0.9302]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-76.3125, 188.3750, 203.0000,  ..., -92.1875,  48.3438,  50.4688]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4788,  0.6528,  0.6221,  ..., -0.1581, -0.2600,  0.0475]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0650, -0.1026,  0.0817,  ...,  0.0704, -0.1170, -0.0905]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5664,  0.0773,  0.0411,  ...,  0.2411,  0.6313,  0.1628]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 280.0000,  124.9375, -757.5000,  ...,   28.7031,   86.8125,
           45.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4077, -0.2433, -0.0530,  ...,  0.3240, -0.0221,  0.5366]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1813, -0.0793,  0.0306,  ..., -0.1731, -0.3088, -0.0661]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.5947e+00, -6.2549e-01, -6.0254e-01,  ...,  7.0381e-04,
          1.7944e-01,  4.4336e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 214.7500,  300.2500, -185.1250,  ...,  209.0000,  -71.3125,
          313.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1144, -0.3711,  0.5278,  ..., -0.3218,  0.1602,  0.4553]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2462, -0.0763,  0.0306,  ...,  0.2084,  0.3647, -0.1025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2798, -0.6060,  0.0178,  ..., -0.2159, -0.0068, -0.1293]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-364.0000,  212.2500,  417.7500,  ...,  -97.0000,  -45.6562,
          -48.4062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0784,  0.4314,  0.5171,  ...,  1.4746,  0.1965, -0.4709]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1263, -0.1345, -0.0903,  ...,  0.0388,  0.0389, -0.2379]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2269, -0.2754, -0.6377,  ..., -0.3599, -0.8672, -0.4546]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-131.3750,  -18.9531,  -37.4375,  ...,  -73.0000,   76.5625,
          224.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0069, -0.5518,  0.9497,  ..., -0.0340, -1.1543, -0.9741]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0916, -0.1777,  0.1301,  ..., -0.2708, -0.0047, -0.1348]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1257, -0.2255, -1.0742,  ...,  0.1842, -1.0410,  0.0021]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -84.5000,  273.7500,   24.5469,  ..., -293.7500,  131.5000,
          -35.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0214,  0.5620, -0.1273,  ...,  0.0207, -0.2617, -0.0460]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0202, -0.3550,  0.1216,  ..., -0.4165,  0.2144, -0.0916]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7056,  0.1512, -0.0926,  ...,  0.3892,  0.6392, -0.3591]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-168.8750,   43.8750,  -68.1250,  ...,  -10.7109, -452.0000,
          140.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0584, -0.3972, -0.7324,  ...,  0.6206,  0.0822,  0.0395]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2769, -0.0560,  0.3516,  ...,  0.4624, -0.1692,  0.0236]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2969,  0.6333, -0.1691,  ..., -0.7632, -0.0359,  0.0062]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 728.5000,  -35.7500,  404.7500,  ..., -348.2500, -254.0000,
         -926.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3792, -0.2957, -0.2278,  ...,  0.1216, -1.0254, -0.6880]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0512, -0.1116, -0.2061,  ..., -0.2465, -0.1841,  0.1130]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5898, -0.1365, -0.1931,  ...,  0.0840, -0.0608,  0.0544]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  73.0000,   76.1875,   33.9062,  ..., -624.0000,    5.6289,
          116.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.3594, -0.4954,  0.3367,  ..., -0.0523, -0.7158, -0.6636]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0667, -0.3733,  0.1526,  ..., -0.2727,  0.4336,  0.0760]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5137,  1.0498, -0.4878,  ..., -0.5962,  0.1810,  0.2280]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-1171.0000,    39.3438,   -41.3750,  ...,   -76.1250,  -169.8750,
          -906.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4143, -0.0066,  0.9404,  ..., -0.3467,  0.2888, -0.1989]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-1.9299e-01,  3.7671e-01, -5.0068e-04,  ..., -6.4795e-01,
          3.9404e-01, -9.6893e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3147, -0.2859,  0.7656,  ..., -0.5728,  0.2893,  0.4680]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 710.5000,  550.0000, -485.0000,  ...,  298.2500,  538.5000,
         -321.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3462, -0.2190, -0.2017,  ..., -0.4587, -1.0020,  0.1130]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1186, -0.1262,  0.4373,  ..., -0.1505, -0.3635,  0.6011]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.6743,  0.7568,  0.5815,  ..., -0.7988,  0.1061, -0.4373]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-691.0000,  194.3750,   58.1875,  ...,  466.0000,  605.5000,
          577.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0635, -0.2866,  0.2661,  ...,  0.2361,  0.7500,  0.2546]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0681, -0.1409, -0.2791,  ...,  0.1906,  0.0704,  0.2223]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4648,  0.0033,  0.1569,  ..., -0.2025,  0.6665, -0.4309]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 341.0000, -816.0000, -273.5000,  ..., -324.0000,  676.0000,
         -258.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5454, -0.2316, -0.2167,  ...,  0.6729,  0.2581,  0.6318]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3472, -0.1140,  0.3379,  ..., -0.4358, -0.1818,  0.2000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4490,  0.0033, -0.4846,  ...,  0.7168, -1.0166, -0.3403]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -53.7812, -691.5000, -153.2500,  ..., -840.0000,  525.0000,
          237.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2391,  0.0541, -1.1543,  ...,  0.6621, -0.8110,  0.3259]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3811, -0.2440,  0.4209,  ...,  0.1137,  0.5576,  0.0804]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1272, -0.1975,  0.4634,  ..., -1.8828, -2.0586,  0.4778]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-717.0000,  956.0000,  256.0000,  ...,  957.5000,  428.0000,
         1573.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1206, -0.8335,  1.4023,  ..., -0.0016,  0.0022,  0.0026]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0004,  0.0037,  0.0049,  ..., -0.0024, -0.0055, -0.0015]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1616,  0.0212, -0.0544,  ...,  0.1111,  0.0253,  0.0652]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-26.2969, -12.7422,  25.7188,  ...,   4.4297,   7.8203,  13.3281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3145,  0.0107, -0.0476,  ...,  0.0213, -0.0312,  0.0099]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0234,  0.0362, -0.0349,  ..., -0.0069, -0.0122,  0.0309]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0501, -0.1970,  0.0788,  ...,  0.0910, -0.0580, -0.1550]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -74.7500,  -51.1250,   92.3750,  ...,  162.0000,   47.9688,
         -116.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1210, -0.7485,  0.2617,  ..., -0.1646,  0.9243, -0.3167]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0430, -0.0602, -0.0719,  ..., -0.0300,  0.0779,  0.0097]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2423, -0.0684,  0.2578,  ...,  0.1619,  0.0112,  0.1401]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[102.0000, -27.3750,  63.6562,  ..., -94.1250,  90.6875, -11.0859]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2747,  0.1974, -0.2737,  ...,  0.0396,  0.0598, -0.0717]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0153,  0.0506, -0.1340,  ...,  0.1041,  0.1048,  0.0406]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0685, -0.2025, -0.2018,  ...,  0.2900,  0.0959,  0.4819]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 99.9375, -14.2422,  -9.0547,  ..., -34.1562, -78.1875, -19.0312]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6240,  0.2087, -0.1672,  ...,  0.4797, -0.0325, -0.1359]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0282,  0.0423,  0.0279,  ...,  0.0568, -0.1041, -0.0529]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1141, -0.1423, -0.1949,  ...,  0.2113, -0.0012, -0.0536]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -88.8750, -206.3750,  -33.9062,  ...,  158.5000,   18.4844,
           11.8359]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3076,  0.0394, -0.1650,  ...,  0.0302,  0.1801, -0.0967]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1716, -0.0853, -0.1648,  ...,  0.1427,  0.0442,  0.0101]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1860, -0.1561,  0.0510,  ..., -0.0335,  0.3298,  0.0311]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-38.4062,  55.4688,  88.2500,  ..., -51.4688,  29.6562, -21.1250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8926,  0.7280, -0.4941,  ...,  0.0494,  0.0956, -0.2211]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1924,  0.0163, -0.0674,  ...,  0.0587,  0.0827,  0.0989]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2238,  0.1970,  0.0732,  ..., -0.5410,  0.0900, -0.2905]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  35.6250,  228.7500,  102.1250,  ...,  -74.0625,  159.5000,
         -172.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0659,  0.1832, -0.8433,  ..., -0.1810,  0.0032, -0.0174]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0763, -0.1324,  0.0050,  ...,  0.0787,  0.0954,  0.1299]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0311, -0.3105, -0.2054,  ..., -0.0079,  0.0586,  0.3210]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  63.0938, -110.2500,  -55.2812,  ...,   14.4531,   15.5547,
           -4.0703]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3838, -1.0371,  1.0107,  ..., -0.2180, -0.0547,  0.0414]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0533, -0.0340,  0.0403,  ...,  0.0443,  0.2001,  0.1620]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4575, -0.3081, -0.1093,  ..., -0.0723,  0.0519, -0.0006]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -15.7109,   34.4062,   47.9375,  ..., -252.8750, -207.2500,
          -21.6406]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0742, -0.5020,  0.5688,  ...,  0.2147,  0.4500,  0.0456]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1880, -0.1146, -0.0632,  ...,  0.1683,  0.1968,  0.1909]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0828,  0.4409, -0.1492,  ..., -0.2581,  0.6416,  0.0790]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-181.5000,  -66.0625,  115.9375,  ...,   49.5312, -227.0000,
         -197.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5186,  0.0233,  0.2177,  ..., -0.2382, -0.2698,  0.0930]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1764, -0.0380,  0.1234,  ..., -0.0231,  0.0045, -0.0369]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1505, -0.6807, -0.2568,  ...,  0.3171, -0.0893,  0.1179]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  72.5625,  337.7500,   42.9375,  ...,  -34.4062,  -32.6875,
         -160.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9473,  0.6924, -0.4397,  ...,  0.3318,  0.5376, -0.4836]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1203, -0.2272,  0.0775,  ..., -0.0076,  0.1232,  0.1787]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0233,  0.1688,  0.0986,  ...,  0.0592, -0.1764,  0.1952]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 52.2500,  88.0000,  66.8750,  ..., 474.7500,  25.7812, 351.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5142,  0.0398, -0.2524,  ...,  0.6855, -0.1559,  0.1006]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0723,  0.1930, -0.0186,  ...,  0.0394,  0.0467,  0.0512]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5229,  0.1802, -0.5835,  ...,  0.4324,  0.0715, -0.0052]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-272.2500,  -68.5000, -198.7500,  ...,    6.1641, -271.2500,
         -110.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6694,  0.3638, -0.3711,  ...,  0.2438,  0.2266,  0.4280]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2117,  0.1371, -0.0970,  ...,  0.1543,  0.3784,  0.0247]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3123,  0.3145,  0.5498,  ...,  0.1533, -0.5801,  0.0987]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  -3.3203,  -81.3125,  245.3750,  ..., -282.7500,   26.0625,
          -21.3594]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5786, -0.6411, -0.1041,  ..., -0.0724,  0.2247, -0.3120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0370, -0.1893,  0.1770,  ...,  0.3274, -0.1057,  0.0920]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5908, -0.1971, -0.0070,  ..., -0.3718,  0.3616,  0.0778]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-202.0000,   15.6094, -183.8750,  ...,   -3.8242, -218.3750,
          231.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3669,  0.3650, -0.3545,  ..., -0.4568, -0.1161,  0.4617]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0743, -0.1333,  0.1562,  ...,  0.0784,  0.0516,  0.0069]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1941, -0.5801,  0.0446,  ...,  0.1063,  0.0471,  0.1837]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  23.4219,   99.8750,   66.0000,  ...,  426.7500, -173.5000,
           64.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8364,  0.5430,  0.3655,  ..., -0.0397,  0.1910,  0.0134]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0518, -0.0848,  0.0076,  ..., -0.1550, -0.1499,  0.2472]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0914,  0.0148, -0.3354,  ...,  0.4270,  0.1024, -0.1614]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  77.2500,  109.2500, -107.9375,  ..., -199.3750,  156.2500,
           -8.5938]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0565,  0.1024,  0.2883,  ...,  0.6372, -0.6851, -0.4353]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1191, -0.0943, -0.0422,  ..., -0.3093,  0.2157, -0.0827]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0934, -0.1002,  0.1233,  ...,  0.5010,  0.5146,  0.1440]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-323.7500,  312.5000,   65.1250,  ...,  281.2500,   24.7656,
          315.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0482, -0.2651,  0.0735,  ...,  0.9092, -0.3464,  1.0117]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1127, -0.2450,  0.0595,  ...,  0.2318, -0.1072, -0.2788]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2286, -0.9131, -0.2133,  ..., -0.2571, -0.3789, -0.8599]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-107.9375,  602.5000,  206.7500,  ..., -136.7500, -268.0000,
         -535.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3865, -0.7563, -0.2065,  ..., -0.5825, -0.2161,  0.1750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0913,  0.2649, -0.1859,  ..., -0.0248, -0.3489,  0.0740]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.3164,  0.2908, -0.0795,  ..., -0.3159,  0.2435,  0.8657]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  26.5000,  -61.6875,  -35.9688,  ..., -222.8750,  -22.3438,
          508.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0037,  0.1290,  1.0664,  ...,  0.1818,  0.5308, -0.7212]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3308,  0.2457,  0.0599,  ...,  0.2357,  0.2253, -0.0041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0441, -0.4736,  0.1805,  ..., -0.0692, -1.0674, -0.6592]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -51.8438, -136.1250,   86.4375,  ..., -144.7500,  446.2500,
          595.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2554, -0.3794, -0.6587,  ...,  0.3425, -0.1973,  0.4751]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3308, -0.1084,  0.0148,  ..., -0.0006,  0.1560, -0.0552]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5698,  0.2075,  0.1260,  ..., -0.3501, -0.2053,  0.5635]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-274.5000,  -43.1875,  325.7500,  ..., -513.5000, -306.5000,
          308.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9136, -0.3254, -0.4038,  ..., -0.5884,  0.1591,  0.1366]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2375, -0.1509,  0.5864,  ...,  0.1477, -0.1418, -0.2686]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5195,  0.4358, -1.2637,  ..., -0.9019, -0.4673, -0.0959]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-400.5000,  -36.4688,  177.7500,  ...,  136.7500, -363.2500,
          915.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2430,  0.1404, -0.1851,  ..., -0.0406, -0.5234, -0.6519]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2010, -0.2393, -0.1589,  ..., -0.1466,  0.0531, -0.0468]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2808, -0.3586, -0.3701,  ..., -0.2625, -0.0413, -0.7808]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-358.0000,   -1.5400,   -4.0508,  ...,  269.0000,  255.0000,
           63.1562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0186, -0.1428,  0.0703,  ...,  0.0439, -1.0176, -0.7046]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0039, -0.2593,  0.3030,  ...,  0.2905, -0.1879, -0.0291]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1088,  0.0198,  0.5859,  ..., -0.3074, -0.4846,  0.2235]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-565.0000,  112.8125,   45.5625,  ...,  375.7500,  258.7500,
          373.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3967, -0.0210,  0.0136,  ...,  0.2156,  0.2219, -0.0715]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1270,  0.0514, -0.1759,  ..., -0.3525, -0.5439, -0.3977]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3306, -0.1570,  0.1572,  ...,  0.0507,  0.5845, -0.0533]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-104.6250,  578.5000,  710.5000,  ..., -226.6250, -460.2500,
           69.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9644,  0.1309, -0.1050,  ...,  0.0520,  0.0462, -0.2698]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4558, -0.3875, -0.0577,  ..., -0.3809,  0.8130, -0.0731]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2007, -0.1274,  0.5171,  ..., -0.2927,  0.8179,  0.2698]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 681.5000,  227.8750, -501.7500,  ...,  -78.0000, -877.0000,
          135.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1293,  1.2285, -0.0276,  ...,  0.0316,  0.4871,  0.2720]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2361,  0.0814, -0.2634,  ..., -0.3860, -0.0629, -0.1228]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3723, -0.7773, -0.0015,  ...,  0.9258, -0.2502,  0.1486]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-831.0000, -140.7500,  344.2500,  ..., -557.0000, -288.5000,
         -658.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1143,  0.0975,  0.3086,  ..., -0.4041, -0.7764,  0.4658]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4329,  0.3289,  0.2384,  ..., -0.3328, -0.4700,  0.4189]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3743, -0.3213, -0.3628,  ...,  0.8413, -0.9878, -0.4421]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 314.0000,  431.0000,  822.0000,  ..., -458.5000,  525.5000,
           84.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5264,  0.4763, -0.4854,  ...,  1.3350, -0.6846, -0.2507]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1176,  0.0329, -0.8091,  ...,  0.3987, -0.1239,  0.4382]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4519,  1.0977, -0.9844,  ...,  1.5205, -0.2981,  0.1675]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-616.0000,  -55.7188,   66.0625,  ...,  351.5000, -338.5000,
          345.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2104, -0.5977, -0.2300,  ..., -0.2279,  0.7310, -0.0349]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.6323, -0.1089,  0.2195,  ..., -0.5034, -0.5645, -0.0762]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4033, -0.5552,  0.5815,  ..., -0.1957, -0.5459, -0.9526]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-354.0000, -237.3750, -838.5000,  ...,  315.2500,  763.5000,
         -455.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.1289,  0.5874, -0.0967,  ...,  0.1431,  1.1797, -0.1687]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4211, -0.4360,  0.3105,  ..., -0.1278,  0.3525,  0.0972]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8140,  0.2025, -0.0332,  ..., -0.6064, -2.1250,  0.2820]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -151.0000,  -305.2500,  -620.5000,  ...,   220.6250,  1278.0000,
         -1219.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3269,  0.3145,  0.2612,  ..., -0.0026,  0.0018,  0.0027]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0025,  0.0021,  0.0027,  ...,  0.0012,  0.0059, -0.0025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1251, -0.0687, -0.1089,  ...,  0.1293, -0.0217, -0.0116]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[10.1016, -0.6191, -2.3438,  ..., -0.4465, -4.5586, 23.2031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4780,  0.6338,  0.6265,  ...,  0.0134, -0.0241, -0.0341]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0097, -0.0037,  0.0099,  ...,  0.0003,  0.0039,  0.0105]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0534, -0.1825,  0.0141,  ...,  0.1422, -0.0017,  0.0445]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-58.6562,  13.1641,  49.4375,  ..., -15.4844,  30.3281,  98.6875]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5728,  0.1257, -0.1117,  ...,  0.0562,  0.1016, -0.1305]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0294,  0.0493, -0.1003,  ...,  0.0188,  0.0483, -0.0970]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0736,  0.2109, -0.0977,  ..., -0.3574, -0.1011, -0.0134]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-41.2188,  17.6719,  19.6562,  ...,   8.7109, -26.2812,  32.2812]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0494, -0.1631, -0.5088,  ...,  0.1675,  0.0468, -0.1552]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0194,  0.0552, -0.0721,  ...,  0.0315,  0.1035,  0.0050]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0650,  0.1196, -0.2395,  ...,  0.2090, -0.0181, -0.1663]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  0.8213, -53.8125,  72.8750,  ..., -47.1250,  20.8281, -36.7500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3569,  0.5918,  0.2971,  ...,  0.4517, -0.3066, -0.3308]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0079, -0.0330,  0.0282,  ...,  0.0339, -0.0329, -0.0014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2123,  0.1157,  0.1157,  ...,  0.4263,  0.1880, -0.0569]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-112.7500,  103.9375,  -94.0000,  ..., -105.2500,  -34.5312,
           57.7812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3386,  0.1234, -0.2406,  ...,  0.0806, -0.1220, -0.1290]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0250, -0.1564, -0.1086,  ..., -0.0008, -0.0934, -0.0378]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1639, -0.3706,  0.1943,  ..., -0.2021, -0.2678,  0.0920]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  70.5000,  -32.3125,  -31.2344,  ...,   99.3750,  105.6875,
         -135.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1758,  0.0011, -0.3921,  ..., -0.0698, -0.0008,  0.1539]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0467, 0.0762, 0.0187,  ..., 0.1671, 0.0912, 0.0549]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1670, -0.0916,  0.0520,  ..., -0.0554, -0.1313,  0.0150]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  49.9062,  -78.4375, -134.7500,  ...,   19.3906,  -96.6250,
           79.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3962,  0.0021, -0.0327,  ...,  0.1847, -0.4800,  0.2108]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0449, -0.1589, -0.0243,  ...,  0.0165,  0.1219,  0.0606]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0484,  0.0050, -0.1566,  ...,  0.3574, -0.2605,  0.0143]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 127.3125, -186.1250,    9.1406,  ...,  167.0000,  -80.0000,
          135.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1914, -0.7246,  0.7485,  ..., -0.1210, -0.0064, -0.0281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0985, -0.0968, -0.0500,  ...,  0.1796,  0.0540,  0.0991]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8706, -0.3494,  0.0785,  ..., -0.0266, -0.0054,  0.0744]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 18.8438, 113.5625,  29.3906,  ...,  63.2188, 126.5625, -18.9375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1187, -0.3850,  1.0742,  ..., -0.0134,  0.0724, -0.3110]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0851, -0.0234, -0.0004,  ..., -0.0460,  0.1335,  0.1802]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4912,  0.0563, -0.4724,  ..., -0.0806, -0.0247,  0.1614]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  38.6250, -191.0000,   53.2500,  ...,   50.5312, -401.2500,
         -355.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0238, -0.7109,  0.0798,  ..., -0.0945,  0.0649,  0.1272]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1055, -0.0294,  0.0375,  ..., -0.0124,  0.0289, -0.0209]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1506, -0.2126, -0.1683,  ...,  0.6772,  0.1677, -0.2678]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-416.2500,  197.6250, -112.3750,  ...,  145.8750,  221.1250,
          -60.5938]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1210,  0.8892, -0.6943,  ...,  0.1899, -0.3752, -0.1737]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0126,  0.0917,  0.0978,  ..., -0.1165,  0.0512,  0.0838]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5601,  0.0323, -0.3396,  ...,  0.2222, -0.3750,  0.2437]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 113.0625,  -27.5156,    9.4766,  ..., -160.0000,   40.3750,
           85.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5537, -0.0478,  0.2722,  ..., -0.0683, -0.8955, -0.0685]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1879,  0.0500, -0.0070,  ..., -0.0662,  0.0276,  0.0322]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5840,  0.5649, -0.3254,  ...,  0.2405, -0.2274,  0.0660]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-38.4062, 112.6250, 292.7500,  ..., 167.3750,  69.7500, -51.5938]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9224,  0.3018, -0.0889,  ..., -0.1183, -0.0901,  0.1660]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0743,  0.4817, -0.0210,  ...,  0.1421,  0.0832, -0.0443]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4248, -0.1543,  0.3049,  ..., -0.1686,  0.3999,  0.1879]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[104.0000, 552.0000, -61.1250,  ..., -31.8750, -10.4844, 301.7500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9316,  0.0324, -0.8481,  ...,  0.6724,  0.4280,  0.4424]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1160, -0.0161,  0.0951,  ..., -0.0077, -0.0241,  0.0960]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0296, -0.8154,  0.3655,  ..., -0.2876,  0.4727,  0.1116]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  40.4062,  -46.2500, -165.8750,  ...,  -29.8750, -119.0625,
           96.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5952,  0.1107,  0.9644,  ..., -0.1328, -0.2102,  0.3091]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0720, -0.0319,  0.1144,  ...,  0.1462,  0.0198,  0.1039]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5806, -0.1309, -0.1266,  ..., -0.4421,  0.2257, -0.0274]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 283.2500,  -14.7344,  358.0000,  ..., -315.0000,  -22.6406,
           34.9062]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2927,  0.5439,  0.2766,  ..., -0.5923, -0.1851,  0.5483]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0628, -0.0643, -0.0521,  ..., -0.2081, -0.1906,  0.2642]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0366,  0.3201, -0.0849,  ...,  0.3140, -0.3647,  0.4939]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-187.3750,  287.7500,  -65.7500,  ...,   67.8125, -286.2500,
         -135.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1876, -0.0400,  0.1870,  ...,  0.3428,  0.2957, -0.1421]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0186, -0.0109,  0.0036,  ..., -0.1442,  0.1489, -0.0407]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1285, -0.1115,  0.6060,  ..., -0.6104, -0.3391,  1.1787]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 644.0000,  223.5000,   81.0000,  ...,  101.6250,  375.2500,
         -405.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3027, -0.0546, -0.4050,  ...,  0.2148, -0.3711, -0.3264]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2163,  0.0186,  0.0901,  ..., -0.0851, -0.2047, -0.2098]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0039,  0.1836, -0.3040,  ...,  0.8618,  0.0050,  0.4883]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-187.5000, -509.0000,  222.7500,  ...,  172.2500, -268.5000,
         -331.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4832, -0.4211, -0.3508,  ...,  1.0576,  0.0705, -0.0081]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0399, -0.0322, -0.1285,  ..., -0.1055, -0.4810,  0.1207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.9883,  0.5693, -0.5796,  ..., -0.2625,  0.3584,  0.6772]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 387.2500,  112.8750, -121.3125,  ...,  631.5000, -405.7500,
          -43.5312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1633, -0.4563, -0.3208,  ...,  0.3418,  0.3601, -0.1373]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0383, -0.1173,  0.0975,  ...,  0.3435,  0.3005,  0.1146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0784, -0.3970,  0.2478,  ...,  0.0895,  0.0077, -0.1553]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-348.2500, -684.0000,  245.8750,  ...,  -60.9375,  326.0000,
          185.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.1201, -0.3315,  0.5947,  ...,  0.2783,  0.2371,  0.4292]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2223, -0.0119, -0.0696,  ...,  0.0186,  0.1107, -0.4700]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4392, -1.0254, -0.6992,  ...,  0.3730, -0.5688,  0.1844]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  -60.3125,  -425.0000,   217.5000,  ...,  -645.5000, -1004.0000,
           -30.8438]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9321,  0.0535,  0.5796,  ..., -1.3057, -0.3652, -0.9185]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3540,  0.1965,  0.4724,  ...,  0.1273, -0.0130,  0.0477]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3889, -0.7808, -0.8042,  ..., -0.5254, -0.9204, -0.4788]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-409.5000,  218.8750,  137.1250,  ..., -152.2500,   95.4375,
          202.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0842, -0.3596, -0.4265,  ...,  0.3992, -0.7070,  0.7944]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1084,  0.0184, -0.2039,  ..., -0.1309,  0.0688,  0.1669]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3169,  0.3599, -0.1556,  ...,  0.2844,  0.0395, -0.6587]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-259.7500,   63.2500,  679.5000,  ...,  159.3750,  181.6250,
          322.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3806, -0.5405,  0.2913,  ..., -0.4172, -0.4756,  0.6255]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0181, -0.2198,  0.2155,  ..., -0.0342, -0.2440,  0.2422]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8560, -0.6333, -0.5581,  ..., -0.2452,  0.1976, -0.5474]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  491.7500,   -21.3438, -1001.0000,  ...,  -236.7500,  -823.0000,
           -68.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4663,  0.0984, -0.2634,  ...,  1.4346,  0.3008, -1.4531]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0121, -0.1129, -0.2095,  ..., -0.1279, -0.2477, -0.2194]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0312, -1.4561, -0.1276,  ...,  0.4463,  0.8198,  0.7817]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 264.7500,  501.0000, -238.0000,  ...,  148.7500,  233.1250,
           41.3438]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5796, -0.6914,  0.1995,  ...,  1.2520, -0.2012, -0.5420]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2494, -0.2365,  0.2722,  ..., -0.2769,  0.5747,  0.3572]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7734,  0.7280, -0.1165,  ...,  0.3628,  0.2410, -0.2842]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  125.6875,  -489.7500, -1009.5000,  ...,   480.7500,   540.5000,
           303.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0479, -0.0375, -0.2864,  ..., -0.4683,  0.7510,  1.0557]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0513,  0.1086, -0.4094,  ..., -0.3562,  0.2352, -0.1490]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3459,  0.4172,  0.0299,  ...,  0.4355, -0.3730,  0.5835]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 590.0000, -218.2500, -131.7500,  ...,  231.2500,  134.8750,
          671.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4006, -0.1710,  0.2291,  ..., -1.0312, -1.1182,  1.2275]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3687,  0.2727, -0.0532,  ..., -0.3147,  0.0004,  0.3254]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0797, -0.4729, -0.2717,  ..., -0.8823, -0.3528, -0.1986]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-672.5000,  194.8750, -838.0000,  ...,  109.0000,   18.0000,
          944.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2460,  0.2063,  0.8486,  ...,  0.5659,  0.0864, -0.1307]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1537,  0.0139, -0.4797,  ...,  0.2849, -0.3162,  0.1816]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3713,  0.6211, -0.1571,  ..., -0.1414, -0.6753, -0.7124]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -85.7500,  749.0000, -907.5000,  ...,  124.0000, -317.7500,
         -457.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7559, -0.7227,  0.3479,  ..., -0.6460,  0.7490,  0.1301]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3877, -0.0189,  0.8081,  ...,  0.0688, -0.3347, -0.2744]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8213,  0.2496, -1.0176,  ..., -0.2515, -0.1671,  0.9092]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -94.3750, -409.5000, -303.7500,  ..., -334.2500,   43.6250,
         -251.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7949,  0.1758, -0.5527,  ..., -0.4146, -0.0758, -0.3076]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.5815, -0.3660, -0.0599,  ...,  0.1234,  0.5581, -0.1185]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3835, -0.2991, -0.8008,  ..., -0.3159, -1.8174,  0.6777]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -873.5000, -1329.0000,  -678.5000,  ...,  -492.2500,  -108.6875,
          -447.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2231e-01, -1.5195e+00,  2.0762e+00,  ...,  1.9638e-02,
         -1.3628e-03, -1.2520e-02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0016,  0.0040,  0.0016,  ..., -0.0028, -0.0078, -0.0066]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0880,  0.0353, -0.0836,  ...,  0.0424, -0.0620,  0.1035]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  7.0000,  -5.5664,  -4.9688,  ..., -16.4375,  -8.8594,  -8.4375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4805, -0.1329, -0.1769,  ..., -0.0159,  0.0012, -0.0148]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0130,  0.0125, -0.0202,  ..., -0.0010,  0.0165,  0.0025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2534,  0.2172, -0.1010,  ...,  0.1531, -0.0080, -0.0856]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 37.8750,  38.7812,  75.4375,  ...,   7.7266, -81.8750, -25.9375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1842, -1.0186,  0.7725,  ..., -0.2676,  0.0023,  0.2211]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0264, -0.0193, -0.0325,  ..., -0.0189,  0.1000, -0.0467]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0595,  0.1697,  0.1831,  ..., -0.2690,  0.1532,  0.2124]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-22.9062,  -1.3496,  67.3750,  ..., -56.3438, 111.8750,   1.8242]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3218, -0.1109,  0.0354,  ...,  0.1188, -0.1622,  0.0946]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0297,  0.0539, -0.1032,  ...,  0.1027,  0.1763, -0.0233]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5361, -0.1893,  0.0165,  ..., -0.2898,  0.2725, -0.0439]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 138.7500,  -69.0625, -222.3750,  ...,   49.0000, -132.6250,
           -3.5352]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2678,  0.4299, -0.3801,  ...,  0.2404, -0.0095,  0.3020]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0579,  0.0710,  0.0411,  ...,  0.0548, -0.1032, -0.0743]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1232, -0.3845,  0.4829,  ..., -0.3257,  0.0536,  0.3096]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  97.0000,  -74.5625,  162.3750,  ...,   55.4375, -109.6250,
           85.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3247,  0.0783, -0.5020,  ...,  0.2573, -0.0576,  0.0173]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0634, -0.1793, -0.1375,  ...,  0.0804, -0.0598, -0.0910]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1099,  0.0729,  0.0895,  ...,  0.0539, -0.0019, -0.1290]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 63.9375, 175.3750,  81.0000,  ...,   5.2148, -11.1172, 128.3750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3074,  0.5122, -0.0327,  ...,  0.1654,  0.0012, -0.3787]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1932, -0.1126, -0.0305,  ...,  0.0660,  0.0212,  0.0599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0094,  0.2795,  0.3286,  ..., -0.0462,  0.1962, -0.5825]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-106.2500,   14.1641,   63.7188,  ..., -117.0625,  -29.7812,
           28.1719]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0784,  0.2964,  0.0642,  ..., -0.5493, -0.1118, -0.3477]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0532, -0.1108, -0.0235,  ...,  0.0875,  0.1157,  0.2593]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2023, -0.1273, -0.2098,  ...,  0.3843, -0.3252, -0.0017]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-210.1250,  -21.2812,  171.3750,  ...,  149.5000,  108.3750,
           55.5625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2155, -0.8120,  0.5005,  ..., -0.3071,  0.3523, -0.3386]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0208, -0.0421, -0.0224,  ...,  0.1476,  0.1010,  0.1707]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2129,  0.1122, -0.4978,  ...,  0.4807, -0.0025, -0.7124]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-158.7500,  264.7500,   79.7500,  ..., -118.6875, -198.7500,
          -97.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2343, -0.1842, -0.0991,  ...,  0.1458, -0.0262, -0.3621]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1353, -0.0665, -0.0959,  ...,  0.0362,  0.1131,  0.2367]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2065, -0.0545, -0.2039,  ...,  0.1854,  0.0951, -0.0326]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -19.1250,  129.3750, -403.5000,  ..., -174.7500,  -27.2812,
          -53.0312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4360, -0.3010,  0.1829,  ...,  0.3489,  0.1796,  0.2913]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1051, -0.0707, -0.0088,  ...,  0.0608,  0.0789, -0.0383]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0600, -0.0214,  0.0742,  ...,  0.1893, -0.2278, -0.3303]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-201.8750, -134.7500, -118.2500,  ...,   67.4375, -142.7500,
         -127.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3245,  0.2810, -0.7915,  ...,  0.1770,  0.1385,  0.2159]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0228, -0.0236,  0.1088,  ..., -0.0294,  0.0607,  0.1460]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7246,  0.2996,  0.4316,  ...,  0.3499,  0.0731, -0.1558]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -99.9375,  243.3750, -374.7500,  ..., -111.7500, -375.5000,
         -218.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9404,  0.1053,  0.4099,  ...,  0.0441, -0.7021,  0.0626]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0664,  0.2893, -0.0070,  ...,  0.0649,  0.0817,  0.2399]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4619,  0.0662, -0.5938,  ...,  0.3220,  0.1759,  0.4407]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  10.2891, -281.0000,  152.6250,  ...,  163.7500,  211.5000,
            3.8555]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3821,  0.3704,  0.0236,  ...,  0.0126, -0.0229,  0.1345]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1068, -0.0461,  0.0010,  ...,  0.0893,  0.2085,  0.0511]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5767, -0.4714,  0.2322,  ..., -0.0055,  0.2546,  0.5200]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 86.9375, 326.5000, -43.1875,  ..., 242.5000, -95.5625, -61.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0361, -1.3184, -0.9639,  ...,  0.8862,  0.9453, -0.2749]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0516, -0.1088, -0.0282,  ...,  0.0229, -0.0612,  0.1272]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1968, -0.5347,  0.4648,  ...,  0.1061, -0.2452,  0.0945]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  10.7266,   -6.7773,  -36.5312,  ..., -141.0000,   26.0312,
           93.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3391,  0.1107,  0.9614,  ..., -0.0607, -0.1434, -0.2659]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0259, -0.0244,  0.1394,  ...,  0.1328,  0.1203,  0.0360]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1699, -1.1982,  0.1429,  ...,  0.3848, -0.3616,  0.5732]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 141.3750,  107.0000,  269.7500,  ...,   75.6875,  376.5000,
         -237.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2244, -0.2583, -0.2390,  ...,  0.3052,  0.0930,  0.6147]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0706, -0.0629,  0.0691,  ..., -0.2107, -0.1240,  0.3015]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0062,  0.0376, -0.2913,  ..., -0.5415,  0.1061,  0.0753]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 375.7500, -472.7500,   50.2500,  ..., -176.1250,  133.5000,
         -374.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1049,  0.3452,  0.2404,  ..., -0.8130,  0.2681,  0.1868]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0721, -0.0720, -0.0842,  ..., -0.1511,  0.1626,  0.1962]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1499, -0.1046,  0.3792,  ..., -0.6401,  0.4714,  0.9648]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-166.5000,   84.9375, -437.0000,  ...,  138.0000, -101.8750,
         -451.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5381, -0.0511, -0.3872,  ...,  0.7241, -0.2783, -0.1985]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1669, -0.0470,  0.2401,  ...,  0.0346, -0.1171, -0.0724]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4795,  0.1532, -0.0303,  ..., -0.1790,  0.4714,  0.4802]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  60.4375,  -64.2500, -433.0000,  ...,   32.6875,  -84.8750,
          276.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1934, -0.6436, -0.3071,  ..., -0.1979,  0.4507, -0.0400]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0790,  0.0818,  0.0995,  ..., -0.0598, -0.1794, -0.0823]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.9482,  0.6006, -0.4341,  ..., -0.5259,  0.5020, -0.1252]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 145.0000, -357.5000,   81.2500,  ...,  -59.6562,   91.0625,
          490.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1226, -0.3928,  0.0220,  ..., -0.1189, -0.1543, -0.2861]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[0.0308, 0.0156, 0.0768,  ..., 0.2086, 0.2664, 0.0511]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0657,  0.5132, -0.2705,  ...,  0.0170, -1.0342, -0.8906]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 552.5000,   68.1875, -379.5000,  ..., -124.7500,    4.0898,
         -355.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7695, -0.4138, -0.0206,  ...,  1.0469, -0.1199, -0.0837]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2295, -0.1692, -0.2881,  ..., -0.3677,  0.0229, -0.5552]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8789,  0.2158, -0.6392,  ..., -0.0194, -0.2920, -0.3467]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  23.6406, -271.2500,   23.4219,  ..., -123.1875, -270.2500,
          317.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.3564,  0.5688,  0.3535,  ...,  0.1418, -0.8867,  0.1726]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1364,  0.2126,  0.5054,  ..., -0.0741,  0.1070, -0.1624]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.6963,  0.4058, -0.0585,  ...,  0.4736, -0.1748,  0.0132]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  89.6875,  685.5000, -469.7500,  ..., -379.2500, -329.7500,
         -350.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4263, -0.6279,  1.2500,  ...,  0.0461,  0.0466, -0.3630]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1621, -0.3191, -0.3264,  ..., -0.3669,  0.1392,  0.1338]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0522,  0.0876,  0.5039,  ..., -0.4011,  0.3679,  0.3694]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-815.0000,  301.5000, -739.0000,  ...,   40.9375,  124.0000,
          314.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0662,  1.4580,  0.5542,  ...,  0.7500, -0.1487, -0.6294]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1180, -0.2590,  0.1600,  ...,  0.1227, -0.3652,  0.0577]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2759, -0.1119,  0.0345,  ..., -0.5195, -0.2266, -0.9893]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-221.8750, -107.9375,  440.7500,  ...,   89.3125,  -20.3594,
         -556.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4883, -0.4319,  0.1136,  ...,  0.1882,  0.7378,  0.4856]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0485, -0.1914, -0.3110,  ...,  0.2406, -0.0754, -0.1520]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.3818, -0.2751,  0.5244,  ...,  0.1937,  0.5122, -0.7246]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 320.5000,  223.2500, -105.0625,  ..., -257.7500, -322.0000,
          150.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4993, -0.6953,  1.0332,  ...,  1.5703, -0.4014,  0.6650]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4285,  0.0731, -0.1128,  ..., -0.3484,  0.7915,  0.3120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8403, -1.0508, -0.0148,  ...,  0.4661,  0.5781, -0.0566]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 516.0000,   57.9688, -608.0000,  ..., -462.0000,  177.2500,
         -200.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2820,  0.1254, -0.1774,  ..., -1.8066,  0.7969, -1.1875]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1643, -0.0150, -0.2571,  ..., -0.4041, -0.1843, -0.0118]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7686, -0.5610,  0.4390,  ...,  0.6904,  0.7217,  0.1237]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-466.7500,  160.1250, -400.2500,  ..., -648.5000,  103.7500,
          427.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7285, -0.4084, -0.5718,  ...,  0.6938, -0.4917, -0.1482]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2141,  0.1843,  0.3569,  ..., -0.0173, -0.1550,  0.4492]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.2100,  0.0880, -1.3135,  ..., -0.4653, -0.0365,  0.1299]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  473.2500, -1285.0000,  -117.8750,  ...,  -147.6250,  -180.1250,
           500.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1689,  1.4141, -0.6152,  ..., -0.1990,  0.8105, -0.3384]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1770, -0.0343, -0.4932,  ...,  0.2966,  0.0216,  0.4041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.6196, 0.1958, 0.0181,  ..., 0.5498, 0.4612, 1.1260]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 436.7500,  -80.8125,  -14.9531,  ...,  194.2500,  -78.9375,
         -534.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2214,  0.0178,  0.5396,  ...,  2.1680,  0.0079, -0.3821]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0287, -0.1534, -0.2061,  ...,  0.3113,  0.0959,  0.0520]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0651, -0.4709,  0.3137,  ...,  0.1074, -0.7080,  0.2915]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 645.5000,  172.6250,  -92.8750,  ..., 1184.0000, -789.5000,
         -671.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2878, -0.2113, -0.5308,  ...,  0.0180,  0.0012,  0.1124]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2778, -0.2340, -0.0613,  ..., -0.0271,  0.3262,  0.6377]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1113,  0.6045,  0.0115,  ...,  0.4336, -1.2363, -1.0215]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-155.0000, -496.7500,  265.5000,  ...,   44.5625,  205.7500,
         -297.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.6565e-01,  3.9038e-01,  9.9060e-02,  ..., -1.7560e-04,
          3.0518e-03,  3.5286e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0004,  0.0022,  0.0105,  ...,  0.0025,  0.0107, -0.0067]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1562, -0.0557, -0.0621,  ...,  0.1202, -0.0067, -0.0365]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-12.2266,   3.3809,   4.2695,  ..., -41.4688,  21.8750,   1.2539]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0116,  0.2993,  0.1674,  ...,  0.0210, -0.0219,  0.0066]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0070,  0.0003, -0.0006,  ...,  0.0013,  0.0072,  0.0074]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0483,  0.0002,  0.0931,  ...,  0.1599,  0.1609,  0.0320]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-16.8906,  61.8750,  74.1250,  ...,  21.7188,   0.2808,  33.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5464, -0.3740,  0.3706,  ..., -0.4739,  0.2668, -0.0009]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0641, -0.0129, -0.1078,  ...,  0.0042,  0.0441, -0.0656]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2527, -0.1663, -0.2559,  ..., -0.0432,  0.0223,  0.0127]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -9.8672, -18.0312, -33.4062,  ...,   3.1816,  22.1250,  45.8750]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2172,  0.7622, -0.0772,  ...,  0.0629, -0.0352,  0.0699]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0457, -0.0311, -0.0392,  ...,  0.0375,  0.1073, -0.0250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1479, -0.3516, -0.4597,  ..., -0.0526, -0.2172, -0.3562]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 31.4375, 182.6250, -90.0625,  ..., -66.3125,  73.8750,  75.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2908, -0.2686, -0.3359,  ..., -0.0216, -0.1313,  0.3152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0374, -0.0461,  0.0939,  ...,  0.0811, -0.0788, -0.0511]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1711, -0.4224,  0.0912,  ..., -0.0837, -0.1643, -0.1989]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -38.4688,  -54.9688,  119.5625,  ...,  -19.7031, -104.6875,
           -9.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0575, -0.2467, -0.1509,  ...,  0.0871, -0.0456, -0.3723]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2295, -0.1628, -0.1478,  ...,  0.0924, -0.0263,  0.1031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0055,  0.1183, -0.2659,  ...,  0.1761,  0.2705, -0.3340]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -27.6875,  488.0000, -178.5000,  ..., -419.0000,  620.5000,
          -17.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4570, -0.7236,  0.3574,  ..., -0.0175,  0.1398, -0.0302]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2026, -0.0767, -0.0555,  ...,  0.0204, -0.0021,  0.0070]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1301, -0.0512,  0.0619,  ..., -0.1519,  0.1433, -0.1415]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -58.4375,  288.7500,  213.2500,  ..., -877.0000,   53.0625,
            2.0410]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2006,  0.2578,  0.5488,  ..., -0.2830,  0.4453,  0.1791]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0486, -0.2502,  0.0212,  ...,  0.1320,  0.0884,  0.1324]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0854, -0.4934, -0.3413,  ...,  0.1318, -0.1805,  0.1250]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  58.9688, -335.7500,   20.3750,  ...,  230.0000,  236.5000,
           85.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0282, -1.9434, -0.6597,  ...,  0.3599, -0.0712,  0.2217]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0215, -0.1052,  0.0924,  ...,  0.0786,  0.2026,  0.2379]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0176, -0.1486, -0.1300,  ...,  0.0704,  0.2041,  0.2008]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 75.0625, -33.3438,  91.0625,  ..., 122.6250,  24.8594,  60.7188]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4509, -0.6719, -0.3579,  ..., -0.1061,  0.2297, -0.4041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1287, -0.1484, -0.0595,  ...,  0.1311,  0.1636,  0.3071]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1625,  0.1044, -0.2561,  ..., -0.2683,  0.0322, -0.2372]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  83.1250, -236.1250,  152.7500,  ...,  251.6250,   -3.8516,
          -67.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3569,  0.3154, -0.0170,  ..., -0.3359, -0.1708,  0.1093]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2747, -0.0880,  0.1780,  ..., -0.0085,  0.0813, -0.1372]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2708, -0.5684, -0.0970,  ..., -0.1731,  0.2365,  0.5420]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-103.5000, -186.1250,  308.5000,  ..., -123.1250, -149.6250,
         -201.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4978, -0.6611,  0.2656,  ..., -0.6143,  0.2754,  0.0452]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0823, -0.0816, -0.2494,  ...,  0.0370, -0.0388,  0.1272]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2122, -0.2715, -0.1427,  ..., -0.1309,  0.4937, -0.2012]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[105.0625, 182.1250, -26.0000,  ...,  43.1250, -54.9062, 240.1250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0439, -0.6401,  0.7222,  ..., -0.0931,  0.2505,  0.2177]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1161,  0.2432,  0.0490,  ..., -0.0295,  0.0720,  0.0249]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2323, -0.5547, -0.3176,  ...,  0.6338, -0.3120, -0.0177]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-83.0000, -30.8750, -45.0625,  ..., 109.0000, -32.9062, -82.1875]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.7490,  0.3071, -0.1920,  ...,  0.2974, -0.3950,  0.2421]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1142,  0.2927, -0.0737,  ...,  0.2922,  0.2048, -0.1481]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0618, -0.0700, -0.2656,  ...,  0.2404,  0.0673,  0.5776]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 232.8750, -165.5000,    6.6680,  ...,   79.0000, -190.0000,
            8.9297]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.8252, -1.0156, -0.3625,  ..., -0.3247,  0.0783, -0.5552]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0423, -0.0291,  0.1401,  ...,  0.0676, -0.1168,  0.1193]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1494,  0.1014, -0.5942,  ...,  0.2112,  0.2847,  0.2266]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -32.3750,  181.6250,  -38.1250,  ..., -121.9375,  -79.5000,
         -464.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3772, -0.4841, -0.4343,  ..., -0.6929, -0.0562,  0.0721]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0311, -0.0293,  0.1237,  ...,  0.1276,  0.0376,  0.0452]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2423, -0.3083, -0.2695,  ...,  0.2561,  0.1655,  0.6587]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-188.2500,  119.8125,  101.8125,  ...,  231.6250, -181.0000,
          106.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5840,  0.3726,  0.1526,  ...,  0.3232,  0.1316,  0.7041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0498, -0.2039, -0.0822,  ..., -0.1383, -0.1163,  0.1769]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.7344, 0.1748, 0.0595,  ..., 0.5166, 0.1259, 0.2369]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 184.7500, -248.6250,  -23.6875,  ...,  217.1250, -327.0000,
          -84.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4451, -0.6392,  0.0465,  ..., -0.3237,  0.4956, -0.3792]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0385, -0.2247, -0.0731,  ..., -0.1799,  0.0361,  0.0618]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5732, -0.4219,  0.0972,  ...,  0.2028,  0.2209, -0.1654]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 119.3750,  -24.8125,   -4.6797,  ...,  339.5000, -553.0000,
         -208.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2949,  1.1709,  1.0576,  ...,  0.1794, -0.7778, -0.4351]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0519, -0.1669,  0.0818,  ...,  0.0925, -0.1146, -0.2206]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4851,  0.0431, -0.6953,  ...,  0.0053, -0.0771, -0.1345]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-254.6250, -221.5000, -212.0000,  ..., -390.0000,  391.7500,
         -266.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2979,  1.0889,  0.3645,  ...,  1.0498, -0.0179,  0.3599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1788,  0.1963,  0.0381,  ..., -0.1366, -0.3206,  0.0017]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 3.9277,  0.4338, -0.3894,  ..., -0.0959,  0.1754, -0.0859]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 176.5000,  -29.0625,   92.4375,  ..., -366.5000,  230.7500,
         -458.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5083, -0.1045,  0.1758,  ..., -0.1978, -0.0720, -0.1289]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0286, -0.2074,  0.1389,  ...,  0.3440,  0.2854,  0.0197]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0773,  0.0176, -0.2866,  ..., -0.3936,  0.0612, -0.4424]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -87.1250,   12.1562, -392.7500,  ...,   -8.4141, -284.5000,
          -64.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.5068, -0.0665,  0.2368,  ..., -0.0236, -0.1631, -0.5869]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3252,  0.0242, -0.3289,  ..., -0.1523,  0.1437, -0.3958]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4988, -0.8193, -0.9619,  ...,  0.3220, -0.0975,  0.8032]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -51.4688, -288.5000,  354.2500,  ..., -731.0000,   39.8125,
          -51.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0820, -1.2646,  1.2393,  ..., -0.9546,  0.9106,  0.2286]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4211,  0.2311,  0.3311,  ...,  0.1060,  0.0645, -0.0053]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3674, -0.1073, -0.5762,  ..., -0.1196,  0.1028,  0.6782]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  86.0000,  439.0000,   79.8750,  ...,  121.4375,  121.6250,
         -221.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8296,  0.4216,  1.1445,  ..., -0.1754, -0.1652, -0.0116]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1630, -0.2327, -0.0340,  ...,  0.0756,  0.2681,  0.0397]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8164,  0.0439,  0.8716,  ...,  0.0966,  0.5186, -0.1862]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 150.0000, -179.1250,  239.2500,  ...,   27.9375,  196.6250,
         -452.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.3154, -1.6943, -0.2852,  ...,  0.6938,  0.0609,  0.0905]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0804,  0.0005,  0.2478,  ..., -0.0373, -0.1009,  0.2047]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5112, -0.2001, -0.2932,  ...,  1.2920, -0.3225,  0.5244]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-106.8750, -118.6875,  104.2500,  ...,  -79.6875,  192.8750,
          -28.5625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2830, -0.0944, -0.3687,  ...,  0.7515,  0.8306,  0.6265]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4021, -0.2128, -0.1028,  ...,  0.1775, -0.2462,  0.0146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2430, -1.7402,  0.0830,  ..., -0.1808,  0.5615, -0.0407]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  90.1875,  385.5000, -331.2500,  ..., -297.5000,  -79.4375,
          470.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2098, -0.4014,  0.7192,  ...,  0.0322,  0.3950, -0.4150]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4688,  0.1230,  0.1825,  ..., -0.3040,  0.4023,  0.1472]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0442, -0.5874,  0.6494,  ...,  0.2472, -0.0666, -0.3062]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -40.4688, -183.3750, -115.5625,  ...,  809.0000, -550.5000,
         -705.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2195,  1.1152, -0.1826,  ..., -0.1122, -0.5527,  0.7129]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.5449, -0.4685, -0.2661,  ..., -0.2411,  0.1160, -0.3333]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3025, -0.0919, -0.7383,  ..., -1.0479,  0.4260,  0.1791]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-3.0762e-01,  5.5400e+02, -4.0125e+02,  ...,  7.4102e+00,
          3.4800e+02,  1.3275e+02]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0312, -0.6460,  0.1414,  ..., -0.2194,  0.7095,  1.2510]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0227,  0.3438,  0.7349,  ..., -0.2014,  0.1081,  0.7021]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0967, -0.6802, -0.0247,  ..., -0.2715, -0.8345, -0.6636]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 364.2500,   52.3438, -535.5000,  ...,  310.0000,  324.5000,
          192.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1357,  0.7544,  0.6177,  ..., -0.5156, -0.6787,  1.2061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1595,  0.0278, -0.8623,  ...,  0.2087, -0.0533,  0.4312]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7378,  0.2252, -0.5078,  ...,  0.4189,  0.0163, -1.0371]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  59.7188,  229.7500, -278.0000,  ..., -297.2500,  580.0000,
         -345.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2151,  0.4438, -0.6694,  ...,  0.1087, -1.0176, -0.7642]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0750,  0.0515,  0.9121,  ...,  0.0834, -0.0202,  0.1560]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4265, -0.3594,  0.3635,  ...,  0.3452, -1.1494, -0.1923]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  250.2500,   338.2500,   243.0000,  ..., -1058.0000,  1695.0000,
           146.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9321,  0.9932,  0.2732,  ...,  0.1649, -0.4092, -0.3145]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.6694,  0.0092,  0.0081,  ...,  0.3296,  0.5210, -0.0982]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.1543, -0.6196,  0.5356,  ..., -0.0131, -2.5391,  0.9219]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 1335.0000,   181.1250,   308.5000,  ..., -1136.0000,  2818.0000,
          1022.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2556, -1.3643,  2.0957,  ..., -0.0054, -0.0083, -0.0125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0004,  0.0070,  0.0068,  ...,  0.0003, -0.0078, -0.0004]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1946,  0.0093, -0.1492,  ...,  0.1780,  0.0245,  0.0644]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -6.9531,  22.0156, -22.0625,  ...,  34.9375, -32.0625, -18.1562]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0624,  0.3152, -0.2913,  ..., -0.0072,  0.0248, -0.0204]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0096,  0.0074, -0.0063,  ...,  0.0032, -0.0034,  0.0061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0116,  0.0449, -0.1647,  ..., -0.1428, -0.2354,  0.0198]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  5.6641, 145.7500,   8.8203,  ...,  12.7188,  76.8125,  22.6562]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1382, -0.9971,  0.6294,  ..., -0.0157,  0.1395, -0.1698]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0330,  0.0080, -0.0040,  ...,  0.0526,  0.0630, -0.0319]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2183,  0.0053, -0.0310,  ...,  0.1561,  0.0797, -0.2333]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -56.1562,   66.9375,   94.1875,  ...,  -80.1250, -126.7500,
          -17.6719]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4873, -0.3538,  1.1748,  ...,  0.0772, -0.0056,  0.1986]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0778,  0.0080, -0.1488,  ..., -0.0020,  0.0697,  0.0469]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0091,  0.0860, -0.1410,  ..., -0.1052,  0.1454,  0.0881]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 176.6250,   53.1562,    0.1772,  ...,   60.8750, -107.3750,
           12.0078]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3567, -0.4724, -0.2634,  ...,  0.4353, -0.1903,  0.1703]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0032, -0.0200,  0.0313,  ...,  0.0428, -0.0594,  0.0120]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2233,  0.3872, -0.1632,  ...,  0.0471, -0.2314,  0.0392]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-233.3750,  184.5000,  -38.3750,  ..., -127.1875,   -9.4453,
           34.2812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1351,  0.6162, -0.0939,  ...,  0.3308, -0.2327, -0.0861]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1320, -0.1942, -0.0963,  ...,  0.0483, -0.1188, -0.0538]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0604, -0.2600,  0.2052,  ...,  0.0220, -0.1599,  0.0932]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-104.7500,  -29.0000,   71.5625,  ...,  -61.7812,   95.0000,
           76.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1282,  0.4739, -0.3264,  ...,  0.4509,  0.1698, -0.5557]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1353, -0.0009, -0.0803,  ..., -0.0050, -0.0305,  0.0768]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2747, -0.2800,  0.3081,  ..., -0.2460, -0.0731, -0.2705]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-199.7500,  -51.8750,    3.6016,  ...,  -61.6250,   67.1250,
          111.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0065,  0.0966, -0.3811,  ...,  0.3066, -0.0424,  0.4031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1281, -0.1862, -0.0769,  ...,  0.0695,  0.0487,  0.1626]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.6392,  0.0625,  0.0434,  ..., -0.0642, -0.1185,  0.5771]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-118.9375,  121.4375,  -23.3594,  ...,  153.7500, -150.7500,
          -81.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4983, -0.3086,  0.7700,  ..., -0.5288,  0.2800, -0.4524]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1526, -0.1860, -0.0015,  ...,  0.1750,  0.0756,  0.1613]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4351, -0.2710, -0.4587,  ...,  0.2316, -0.2252,  0.2717]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-230.2500,  -27.3281,  273.5000,  ...,   57.4375, -158.7500,
          -66.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0660, -0.7222, -0.1361,  ...,  0.0258, -0.2208, -0.1599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1443, -0.0803, -0.0321,  ...,  0.1096,  0.0911,  0.2446]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2319,  0.0307, -0.0557,  ...,  0.2607, -0.1786,  0.1354]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 309.5000,   90.7500,  122.8750,  ..., -251.6250,  173.1250,
          254.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1974,  0.1404,  0.3997,  ..., -0.3259,  0.0840, -0.1501]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1509, -0.0505,  0.0636,  ...,  0.0111,  0.0583, -0.0830]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1635,  0.0788, -0.3477,  ..., -0.1262,  0.1450,  0.0975]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  89.0625,  240.8750,  128.3750,  ...,  129.2500, -198.2500,
         -552.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3137,  0.3848, -0.1376,  ...,  0.1195, -0.2822,  0.1075]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0682, -0.0932, -0.0038,  ..., -0.0919,  0.1993,  0.1895]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4912, -0.0797,  0.0021,  ..., -0.0717, -0.1240, -0.1960]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[141.7500,  80.8750,  83.4375,  ..., 143.5000, 326.5000, 192.2500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0195, -0.6255,  0.5693,  ..., -0.2781, -0.2098, -0.0774]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0432,  0.1528, -0.1140,  ...,  0.0588,  0.1032,  0.1377]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4460,  0.1005,  0.0713,  ...,  0.6118, -0.5762, -0.2189]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 222.1250, -187.2500,  177.8750,  ...,  120.0625,  -15.2891,
         -145.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6899,  0.6172, -0.5107,  ...,  0.7017, -0.5308,  0.9585]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0489,  0.0144, -0.0629,  ...,  0.1423,  0.2581,  0.0553]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3948, -0.3027,  0.0383,  ..., -0.5127,  0.0731,  0.6187]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  30.8594,   75.8125, -123.7500,  ...,  140.5000,  119.3125,
          122.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3394, -1.1514, -1.6162,  ...,  1.2490,  0.4707, -0.6528]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0764,  0.0372,  0.0450,  ..., -0.0220, -0.1031,  0.0055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0671, -0.0242,  0.0323,  ..., -0.0234,  0.0838,  0.0762]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  62.0000, -481.0000, -123.6875,  ...,   47.4375, -203.5000,
         -148.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9604, -0.3569,  0.0672,  ..., -1.1855,  0.0398, -0.3376]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0206,  0.0682,  0.1233,  ...,  0.2264, -0.0068,  0.0935]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0333, -0.3401, -0.3528,  ...,  1.0049, -0.3103,  0.5874]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-242.8750,   11.9141,  -81.1875,  ..., -359.7500,    1.5283,
         -394.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3894,  1.1191,  0.1969,  ..., -0.1521,  0.5601,  0.7109]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2235, -0.2300, -0.0374,  ..., -0.2732, -0.2078,  0.2090]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2666,  0.0814,  0.2061,  ...,  0.4202,  0.0055, -0.1788]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 180.8750,  -15.1719,   49.4688,  ...,  188.7500, -204.6250,
          251.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1385, -0.2000, -0.1176,  ...,  0.1677, -0.2517,  0.0891]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0337, -0.0416, -0.1008,  ..., -0.0829,  0.1440,  0.0400]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2454,  0.0491,  0.4045,  ...,  0.5645, -0.1848,  0.7534]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 75.2500, 213.2500, 364.2500,  ..., 113.8750, -14.2188,  -6.5039]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2318, -0.4202,  0.0726,  ...,  0.3142, -0.2150,  0.1921]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0935, -0.0370, -0.0704,  ..., -0.1088,  0.0347, -0.0277]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5752, -0.3201, -0.4082,  ..., -0.3298, -0.2886,  0.5137]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-576.5000,   53.8125, -518.5000,  ...,  -61.0000,  156.1250,
         -529.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2927, -0.8242,  0.3079,  ...,  1.0781,  0.6626,  0.8281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1148,  0.0312, -0.0516,  ..., -0.1315, -0.2268,  0.0744]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.1270,  0.3167, -0.0012,  ..., -0.1006, -0.2776,  0.7222]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -67.4375,  352.7500,   83.4375,  ..., -185.5000,  253.3750,
          122.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1616,  0.1947, -0.0179,  ...,  0.3413,  0.8901, -0.3362]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0402, -0.0021, -0.0420,  ...,  0.0964,  0.2047, -0.1174]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1588, -0.6562,  0.4302,  ..., -0.2043, -0.1770, -0.5967]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 201.8750,   54.1250, -217.3750,  ..., -204.7500,  -61.6875,
          117.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1838,  0.3516,  0.6748,  ..., -0.3308,  0.2251,  0.0301]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0045, -0.2448, -0.1991,  ..., -0.1411,  0.0213, -0.1599]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1342,  0.2081,  0.1625,  ...,  0.0288, -0.1240,  0.4031]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[487.0000,  91.5625, 844.5000,  ..., 177.0000, 383.2500, 236.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.1172, -0.4497, -0.5752,  ..., -0.5020, -1.2852,  0.4783]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2391,  0.1000,  0.3723,  ..., -0.0526,  0.0391, -0.0978]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3152,  0.7168, -0.1573,  ..., -1.1699, -0.9487,  0.4595]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  12.4219,  321.2500,  484.0000,  ...,  -40.7812, -302.2500,
          -48.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5986, -0.0367,  0.5586,  ..., -0.3843, -1.3340,  0.7993]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1414, -0.2656, -0.1324,  ..., -0.2969,  0.3828, -0.0176]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0094, -0.2386, -0.8174,  ...,  0.6699,  0.6045,  0.0011]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[824.0000,  33.8125, -54.4688,  ..., 138.6250, 414.7500, -33.7500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 7.0117e-01, -7.8125e-02, -1.1754e-04,  ..., -1.8701e-01,
          5.0342e-01, -4.3335e-01]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1564, -0.0501,  0.0991,  ...,  0.0864, -0.1176,  0.0135]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2744, -0.4500, -0.1766,  ..., -0.3621, -0.1158,  0.0566]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 208.1250,  694.5000,  -31.7344,  ..., -378.7500,  267.0000,
          374.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0272, -0.5713,  0.3398,  ...,  1.4814, -0.4927, -0.3125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0744, -0.2556, -0.2905,  ..., -0.1053, -0.0662, -0.1570]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5737, -0.4297,  0.6309,  ..., -0.1635,  0.4329,  0.4597]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-499.2500,  101.6250,  411.7500,  ..., -230.3750,  -78.7500,
          745.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5425,  0.5698, -0.3462,  ..., -0.2094, -0.8604, -1.2061]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1858,  0.1635,  0.3110,  ..., -0.2900,  1.0674,  0.0210]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0460, -0.2542, -0.3501,  ...,  0.2668, -0.5093, -0.3247]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  128.6250,  -141.8750,  -130.8750,  ...,   445.0000, -1220.0000,
          -674.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6548, -0.8013, -0.3496,  ..., -0.0453,  0.0103, -0.8818]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1125,  0.1833, -0.3743,  ..., -0.2295,  0.2284, -0.0413]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5410,  0.2585,  0.1682,  ...,  0.1670, -0.0518, -0.3860]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 447.7500, -293.0000,  125.7500,  ...,  391.2500, -270.2500,
         -147.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5029, -0.0837,  0.0326,  ..., -0.7373, -0.6895, -0.3291]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3760,  0.1442,  0.9097,  ..., -0.5269, -0.2532,  0.4878]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3494,  0.3262,  0.2212,  ...,  0.3625, -0.3428, -0.7524]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[   2.7754, -294.0000, -455.2500,  ...,   52.6562,  293.5000,
         1027.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0986,  0.3191,  1.0752,  ..., -1.4893,  0.6548,  0.5605]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1252,  0.3645, -0.2546,  ...,  0.3362,  0.2168,  0.2238]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.7738e-04, -8.8965e-01, -1.9202e-01,  ...,  3.0258e-02,
         -6.3672e-01,  1.7737e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-244.6250,  -55.0000, -258.0000,  ..., -931.0000, -724.5000,
          442.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0498,  1.0508, -0.3813,  ..., -0.0873,  1.2529,  0.3081]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2803,  0.0807,  0.2281,  ..., -0.1161,  0.0521,  0.0827]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8765, -0.1389,  0.2202,  ...,  0.6606, -1.1270, -0.5703]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -173.7500, -1219.0000,    81.3750,  ...,   710.0000,    50.2188,
           200.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.4072,  0.2369, -0.7710,  ...,  1.5518,  0.6367,  0.0529]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3579, -0.2045, -0.0523,  ...,  0.3042,  0.6104,  0.1361]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7148, -1.0146, -0.0128,  ...,  0.4268, -2.3945,  1.1484]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 3168.0000, -3194.0000,  -580.5000,  ...,   522.0000,   115.1875,
          -604.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2411, -0.2668,  1.0264,  ...,  0.0095,  0.0076,  0.0029]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0004,  0.0031,  0.0118,  ...,  0.0026, -0.0057, -0.0050]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1875,  0.0631, -0.0892,  ...,  0.0797,  0.0977,  0.0865]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 11.2109,  -1.4951, -12.3750,  ..., -24.8281,  -5.7852,   3.3887]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0068,  0.5112,  0.3101,  ...,  0.0278, -0.0581,  0.0168]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 6.1455e-03, -4.4942e-05, -1.1683e-03,  ...,  5.2071e-03,
          5.2528e-03,  8.6975e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2327, -0.1898,  0.0600,  ..., -0.0256,  0.0375,  0.0274]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 21.5312,  45.8125, -82.1875,  ...,  45.3750,  52.7500, -43.3125]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4644, -0.3381,  1.1553,  ..., -0.0379,  0.1792,  0.0743]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0693, -0.0114,  0.0167,  ...,  0.0240,  0.1116, -0.0278]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0602, -0.1276, -0.2830,  ...,  0.0903,  0.1859,  0.1299]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-186.3750, -167.6250,  -99.5000,  ...,   22.0000, -196.3750,
          262.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0400,  0.1265, -0.6626,  ...,  0.2502, -0.2473,  0.2341]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0228, -0.0780,  0.0130,  ..., -0.0146,  0.1049,  0.0534]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2050,  0.2087,  0.1135,  ...,  0.1196, -0.4226, -0.0534]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-113.6875,  299.7500, -190.2500,  ..., -245.8750,  703.5000,
         -267.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5898, -0.3113, -1.3223,  ..., -0.1404, -0.0771,  0.3003]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1060,  0.0347,  0.1086,  ...,  0.0701, -0.0886,  0.0214]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1544, -0.1058, -0.3259,  ..., -0.1110,  0.0925,  0.1771]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -747.0000,  1831.0000,  -396.7500,  ...,  -151.0000, -2552.0000,
          1322.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3574, -0.2939,  0.1575,  ..., -0.1104,  0.0486, -0.1868]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2876, -0.2227, -0.1083,  ...,  0.2491,  0.0154,  0.1475]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1029, -0.0518, -0.2646,  ...,  0.1658,  0.3535, -0.4612]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[   11.6406,  2648.0000,  -868.0000,  ..., -2114.0000,  3146.0000,
          -704.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.4434, -0.9077, -0.8413,  ...,  0.0101,  0.2524, -0.0251]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1593,  0.0126, -0.0592,  ...,  0.0276,  0.0337, -0.0357]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1320, -0.2454,  0.2406,  ...,  0.1486,  0.1252, -0.3726]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-130.6250,   59.6875,  351.7500,  ..., -305.0000,  321.5000,
         -118.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2258,  0.4478, -0.2822,  ...,  0.2896,  0.0016,  0.3086]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1131, -0.1577,  0.0518,  ...,  0.1735,  0.1099,  0.1315]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0262, -0.3352, -0.1042,  ..., -0.4370, -0.3923,  0.2417]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-538.5000, -406.2500, -190.2500,  ...,  -94.3750,  306.0000,
         -242.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5903, -2.1035,  0.5771,  ..., -0.4119, -0.1689, -0.5229]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1710,  0.0866,  0.0858,  ...,  0.1912,  0.3320, -0.0245]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7539,  0.1539, -0.1592,  ...,  0.2881,  0.3059,  0.5186]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 187.6250,  -93.5625,  447.7500,  ..., -452.7500,  404.5000,
         -137.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6353, -0.3538, -0.6011,  ...,  0.1070,  0.1844, -0.2502]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1329, -0.0994, -0.0959,  ...,  0.0855,  0.1716,  0.2644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0132,  0.1088, -0.1274,  ..., -0.1777,  0.1332, -0.0853]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  75.6875, -151.5000,  322.5000,  ...,   48.5312,  220.5000,
          320.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3965, -0.0375, -0.0736,  ...,  0.2218,  0.2927, -0.0969]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1777,  0.0029,  0.0596,  ...,  0.0216,  0.0360, -0.0635]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0274, -0.3706,  0.0260,  ...,  0.2520,  0.3040,  0.0770]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -83.1250, -108.1250,  489.2500,  ...,  165.5000, -307.7500,
           54.1875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1686, -0.2206, -0.4604,  ..., -0.1271,  0.0379,  0.1184]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0771, -0.0282, -0.4014,  ..., -0.0014, -0.4556,  0.0897]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4727, -0.1694, -0.0597,  ..., -0.1031,  0.0501, -0.1227]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -41.9375,   51.8125,  168.1250,  ..., -105.8125, -244.2500,
          411.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3911, -0.2418,  0.4795,  ..., -0.0022,  0.1260,  0.3164]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0485,  0.1064, -0.0623,  ...,  0.1041,  0.0948, -0.0993]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1132, -0.0581, -0.0223,  ...,  0.5674, -0.5537,  0.1672]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 162.2500, -235.0000,  180.2500,  ...,  279.0000,   17.2031,
          205.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2450, -0.4236, -1.1699,  ...,  0.2700, -0.0335,  0.1152]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1907,  0.2808, -0.0257,  ...,  0.3198,  0.1729, -0.1175]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2512,  0.1195, -0.0925,  ...,  0.2305,  0.1055,  0.9487]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-122.4375,  -46.5938,   -1.2148,  ...,  117.8125, -298.2500,
           94.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8164, -0.3840,  0.3857,  ..., -0.1864, -0.2700, -1.2168]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0340,  0.0287,  0.0698,  ...,  0.1512, -0.0202,  0.0733]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0313, -0.5068, -0.4980,  ..., -0.0159, -0.1558,  0.5928]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 91.7500, 168.8750, 606.0000,  ..., 281.0000, 172.0000, 106.1250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0101, -0.0917, -0.1235,  ..., -0.6831, -0.1771,  0.0626]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0427,  0.0641,  0.1284,  ...,  0.1244,  0.0446,  0.0473]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3733, -0.6841, -0.0812,  ...,  0.3513,  0.0816,  0.5015]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-701.0000,  179.6250,  308.0000,  ...,  -59.8125,  207.3750,
           93.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1210,  0.5366,  0.1360,  ..., -0.3411,  0.0035,  0.6147]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2615, -0.0974, -0.0057,  ..., -0.1167, -0.0146,  0.2064]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-2.1759e-02, -2.3353e-04,  1.0864e-01,  ..., -4.8035e-02,
          2.6978e-01,  5.8887e-01]], device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  89.1875, -143.1250,  -86.3750,  ...,  433.5000,  314.2500,
         -489.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5435, -0.4341, -0.5879,  ..., -0.0493, -0.3037,  0.3672]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0190, -0.2686,  0.0431,  ..., -0.0423,  0.2236,  0.0928]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4568, -0.2507, -0.0314,  ...,  0.1167,  0.2688, -0.0595]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-227.8750,  265.2500,   -9.5938,  ...,   45.0625, -143.1250,
          -78.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.0614, 0.6177, 0.7139,  ..., 0.1797, 0.5840, 0.0535]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0865, -0.2625,  0.1062,  ...,  0.2561,  0.1042, -0.1729]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4558, -0.1711,  0.4314,  ...,  0.2627,  0.4714,  0.4778]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 268.2500, -190.1250,  140.7500,  ..., -101.5000,  256.5000,
           -6.6953]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6763,  0.5947, -0.4424,  ...,  0.0926, -0.4460,  0.5210]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1479,  0.1731, -0.0095,  ..., -0.0286, -0.2859, -0.0779]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.0879,  0.3872, -0.0803,  ..., -0.1609,  0.6187, -0.0357]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -28.3750, -190.7500, -298.2500,  ...,  193.7500,   47.8125,
         -250.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0388,  0.1932,  0.4695,  ..., -0.4016, -0.0736, -0.4697]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1045, -0.1427,  0.0234,  ...,  0.3008,  0.4148,  0.1917]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1119,  0.3574, -0.6577,  ...,  0.4070, -0.2908, -0.4685]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-116.7500,  245.0000, -143.1250,  ...,  -66.1250, -306.7500,
         -236.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1997,  0.2236, -0.4724,  ..., -0.3127, -0.2717, -0.3325]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3579, -0.1163, -0.1293,  ..., -0.0794,  0.1411, -0.3042]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3042, -0.6030, -0.7686,  ...,  0.0619, -0.7759, -0.0577]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -682.5000, -1402.0000,  -376.5000,  ..., -2014.0000,  -533.5000,
           588.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6016,  0.0115, -0.1926,  ..., -0.5850,  1.1572,  0.0471]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2397, -0.0420,  0.3499,  ..., -0.2507,  0.2349,  0.2522]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2271, -0.0253, -0.5576,  ...,  0.8071,  0.1354, -0.1033]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-338.0000, -377.2500,  -97.9375,  ...,  -16.7656,  -72.5000,
          313.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1704,  0.0744,  0.5630,  ...,  0.3408, -0.6899,  0.6133]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1573, -0.2451, -0.0901,  ..., -0.0237, -0.3069, -0.0933]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0236,  0.3423,  0.0036,  ...,  0.4746,  0.0335, -0.3010]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 446.5000,  296.7500,  287.7500,  ..., -280.0000,  -97.5000,
          147.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.2344, -1.4238, -0.2258,  ..., -0.2622,  0.2842, -0.7417]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1770, -0.0610,  0.5249,  ...,  0.2510,  0.1349,  0.3110]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.8750, -0.2927, -0.6025,  ...,  0.6768,  0.5645,  0.6167]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -65.1875,  282.2500,   14.2734,  ...,  179.5000,  263.7500,
         -278.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1692, -0.1027, -0.0250,  ..., -0.0014,  0.6689,  1.0557]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3643, -0.4961, -0.1220,  ..., -0.9731, -0.5010, -0.7729]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1780, -0.5850,  0.1455,  ..., -0.5806,  0.2107,  0.5010]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 158.6250, -461.2500, -312.2500,  ...,  799.0000,  244.0000,
          826.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5107,  0.6274,  0.3354,  ...,  1.6016,  0.1171,  0.0425]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.7905,  0.1461, -0.4114,  ..., -0.5278,  0.6558,  0.4487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2152, -0.4165, -0.1153,  ..., -0.8301,  0.4514,  1.0352]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  10.0625,  494.7500, -675.0000,  ...,  312.5000,   -6.7461,
          218.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5264, -0.1902, -0.9019,  ..., -0.8564, -1.5898,  0.7349]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1317,  0.1167, -0.1372,  ..., -0.4133,  0.3035,  0.0260]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2656,  0.4302, -0.5889,  ..., -0.0015, -0.3977, -0.0109]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-546.0000,  712.5000, -239.6250,  ...,  253.0000, -107.0000,
          985.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9170, -0.6733, -0.0084,  ...,  0.4404,  0.7158,  0.4927]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0172,  0.4036,  0.5044,  ..., -0.6294, -0.0500,  0.6792]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8354, -0.7119, -0.6982,  ...,  0.1354, -0.7861, -0.2539]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  19.4219, -365.2500, -555.5000,  ...,  260.2500,  681.0000,
         1809.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0453, -0.0634, -0.1185,  ...,  0.0060, -0.0229,  1.7969]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2456,  0.4517, -0.3293,  ...,  0.2961, -0.3125,  0.3372]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.0586,  0.5015, -0.8506,  ...,  0.0938,  0.6450, -0.0250]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  263.5000,   585.5000,  -178.8750,  ...,    65.2500, -1811.0000,
           727.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0225,  0.5420, -0.5762,  ..., -1.4473,  0.7021,  0.1752]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5049,  0.1471,  0.5073,  ..., -0.0134, -0.4917,  0.1384]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2681, -0.6797,  0.4700,  ..., -0.5151, -1.3535, -0.7412]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 1226.0000, -1069.0000,  -962.5000,  ...,   359.7500,  -479.2500,
           771.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.0225,  0.0417,  0.1121,  ..., -0.2571, -0.7139, -0.1803]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4287, -0.1635,  0.4868,  ...,  0.4702,  0.0761,  0.3950]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.5571,  0.0206, -0.1294,  ..., -0.0726, -1.3096, -0.0291]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -146.1250, -1334.0000,  1066.0000,  ...,  -409.2500,  1361.0000,
           574.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 2.2375e-01, -1.5186e+00,  2.0586e+00,  ...,  1.8215e-03,
          2.7847e-03, -8.6517e-03]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0003,  0.0041,  0.0031,  ..., -0.0006, -0.0101, -0.0018]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1823, -0.0133, -0.1422,  ...,  0.1096, -0.1100,  0.1124]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[37.9375, 57.2188,  1.9580,  ..., 22.5625, 30.7344, 17.7031]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3489,  0.5815, -0.7847,  ..., -0.0241, -0.0155,  0.0660]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0136,  0.0029, -0.0117,  ...,  0.0017,  0.0006, -0.0067]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0749, -0.3220,  0.0424,  ..., -0.2361, -0.1356,  0.0285]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 28.2500,  77.6875,  76.5625,  ..., -40.3438, -52.9375, -18.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5298, -0.5469,  1.0645,  ..., -0.1065, -0.0511,  0.1958]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0845, -0.0604,  0.0033,  ...,  0.0268,  0.0788, -0.0156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1554,  0.1621, -0.1949,  ...,  0.1594, -0.1197,  0.3730]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 54.1562, -20.0938, -53.0312,  ..., -12.7266,  18.5781,   9.3281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0662,  1.3008, -0.8213,  ...,  0.0734, -0.0092, -0.0295]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0131,  0.0088, -0.0932,  ...,  0.0165,  0.0909, -0.0356]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5322,  0.1847,  0.0429,  ..., -0.0741,  0.1233, -0.0750]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  9.5391,  19.8594,  14.2812,  ...,  30.6094,  99.6875, -37.4375]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3040, -0.4746, -0.2639,  ...,  0.1483, -0.2593, -0.1522]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0232,  0.0288,  0.0210,  ...,  0.0033, -0.1065, -0.0828]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2341,  0.2710, -0.1782,  ..., -0.0464,  0.3735,  0.3982]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 127.5000, -120.5000,   14.8047,  ...,   47.0312,  100.3750,
          156.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0810,  0.1642, -0.0936,  ..., -0.0587, -0.1366, -0.2111]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0522, -0.1032, -0.1172,  ...,  0.0295, -0.1190, -0.0269]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2173, -0.0653,  0.3152,  ..., -0.1881, -0.0609,  0.3225]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -64.0000,  -13.7969,  112.1875,  ..., -273.2500,  108.3750,
           70.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1587, -0.6235,  0.4783,  ...,  0.2329,  0.3213, -0.5391]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1573, -0.1047, -0.0858,  ...,  0.1284, -0.0244,  0.0496]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0505, -0.4158,  0.1121,  ..., -0.1716,  0.1097,  0.1384]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  -6.1523,   52.3438,   18.8281,  ...,  -48.7500,   24.7031,
         -237.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0787, -0.0330, -0.1614,  ...,  0.1287,  0.1219,  0.3345]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1412, -0.1643,  0.0268,  ...,  0.0811,  0.0837,  0.2004]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.6709,  0.0687, -0.0443,  ...,  0.5356, -0.3218,  0.0963]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 65.3125, -47.9375, -73.3750,  ..., 223.5000,  12.2422,  34.5000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0164, -0.3345,  0.3445,  ..., -0.3696,  0.1771, -0.1156]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0428, -0.1896,  0.0384,  ...,  0.2018,  0.0994,  0.2268]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1404,  0.0487, -0.4778,  ...,  0.0119, -0.2308,  0.0005]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  80.0625,  -85.0000,  109.7500,  ...,  -14.6406, -172.8750,
          -88.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0045, -0.9248, -0.0413,  ...,  0.3293, -0.0888,  0.1819]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0296, -0.1846, -0.1725,  ...,  0.0560,  0.1498,  0.2583]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4419, -0.4849, -0.4155,  ...,  0.0405, -0.5801,  0.0884]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  90.9375,  -37.6250,   43.5625,  ..., -169.2500,   91.1250,
          -46.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1798, -0.2856,  0.4963,  ..., -0.2695,  0.3535,  0.1346]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2330, -0.1270,  0.1732,  ..., -0.0261,  0.0290, -0.1320]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3127, -0.1528, -0.3918,  ..., -0.0349,  0.5049,  0.1995]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  30.6875,  -67.5625, -208.5000,  ...,  -66.4375, -142.3750,
           72.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1641,  0.4846, -0.7207,  ..., -0.0575,  0.3274,  0.3875]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0713, -0.0820,  0.0033,  ...,  0.0460,  0.2405,  0.1143]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4868, -0.3774, -0.0366,  ...,  0.0291, -0.2534,  0.3596]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-174.3750, -170.0000,   95.1875,  ..., -163.6250,  -83.9375,
         -188.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6294, -1.1084,  0.2717,  ...,  0.4885, -0.3354,  0.1417]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1288,  0.2168, -0.1218,  ...,  0.0622,  0.0172,  0.0343]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2216, -0.0685,  0.0786,  ...,  0.1979, -0.3123, -0.1021]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  -1.8730,   42.7188,  201.2500,  ...,  -48.2188,  -43.4688,
         -321.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0085,  0.1278, -0.0510,  ...,  0.1567, -0.6255,  0.4500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0387,  0.1919, -0.1653,  ...,  0.1646,  0.2524,  0.1146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3770, -0.2408,  0.2900,  ..., -0.1169,  0.1023,  0.7148]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  39.3750, -114.8750,  -37.8438,  ...,  221.3750,  -30.8281,
           13.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3574, -0.9956, -0.9897,  ...,  0.5034,  0.4900, -0.1534]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0015,  0.0496,  0.0300,  ...,  0.0247, -0.1526,  0.1146]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3240, -0.7935, -0.1302,  ...,  0.3875,  0.0171, -0.0481]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -92.0000,  366.2500, -338.0000,  ..., -167.8750,  -52.3438,
         -102.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4875, -0.5947,  0.6914,  ..., -0.4380, -0.7109,  0.3979]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0020,  0.1647,  0.2820,  ...,  0.1652,  0.0524, -0.0371]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4390, -0.8096,  0.2637,  ...,  0.3396, -0.1199,  0.3696]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 428.5000,  160.7500,  141.2500,  ...,    3.5527,   11.3828,
         -109.9375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3586,  0.0892,  0.0047,  ...,  0.0801, -0.0106,  0.3062]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2411, -0.2283, -0.0209,  ..., -0.3174, -0.0970,  0.1472]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0268, -0.1559, -0.1617,  ...,  0.3169,  0.2454,  0.0844]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-299.0000,  285.7500,  200.3750,  ...,   -3.5547, -393.5000,
          304.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6958, -0.3757,  0.0724,  ...,  0.6323,  0.2131,  0.8994]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0079, -0.0146,  0.0098,  ..., -0.1771,  0.1968,  0.2191]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2085,  0.3384, -0.4802,  ..., -0.3684,  0.4705, -0.0239]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 417.2500,  534.0000,  -24.6094,  ...,   31.7656,  100.6875,
         -357.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1960, -0.4189,  0.0967,  ..., -0.0742, -0.2720,  0.2418]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2634,  0.0466,  0.0662,  ..., -0.1519,  0.1322, -0.1014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2705, -0.5132, -0.3608,  ...,  0.6904,  0.0558, -0.8975]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  45.0938,   77.7500, -197.2500,  ...,  -91.3125,  -74.5625,
           97.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.5933, 0.9292, 0.1443,  ..., 0.3372, 0.1121, 0.0018]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0442, -0.1133,  0.0495,  ...,  0.0807, -0.2119,  0.1092]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.7910, -0.0123, -0.3247,  ..., -0.1774,  0.4673,  0.5928]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-123.1875,  429.5000, -377.0000,  ..., -428.0000, -270.2500,
         -259.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.5981, -0.7407,  0.1804,  ..., -0.2339, -0.2439, -0.2092]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0959, -0.2271,  0.0482,  ...,  0.1648,  0.5122,  0.0850]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0356, -0.6982, -0.0606,  ...,  0.1699, -0.3774,  0.0996]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 500.0000,   94.5000,  566.5000,  ...,  161.7500,  105.3125,
         -174.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5112, -0.1666, -0.0732,  ..., -0.2800,  0.3057,  0.0289]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0603, -0.0301, -0.1949,  ...,  0.0136,  0.0624, -0.2690]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2308,  0.4102, -0.4482,  ...,  0.0608,  0.0732, -0.1757]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  65.3750,  -78.3125,  289.5000,  ..., -288.2500, -315.7500,
          301.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.2539, -0.7256,  0.7695,  ...,  0.6973,  0.0298,  0.3865]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1385,  0.2103,  0.2489,  ...,  0.0212,  0.0248,  0.2954]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7241,  0.3269, -1.0205,  ..., -0.0080,  0.4729, -0.3184]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-730.0000,   11.3828,  142.2500,  ...,  -11.4141,   44.9062,
           81.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5376,  0.0430,  0.3865,  ...,  0.3923, -0.6494, -0.2452]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1236,  0.1326,  0.0560,  ..., -0.3315, -0.1328,  0.1624]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8677, -0.2783, -0.2825,  ...,  0.4077,  0.6108, -0.0382]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-204.7500,  144.8750, -360.0000,  ..., -668.5000,   51.0938,
            9.0234]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0124,  0.0376, -1.2031,  ..., -0.5825, -0.1842, -0.0504]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1011,  0.0431,  0.3240,  ...,  0.2585, -0.1703,  0.2391]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0331, -0.2246,  0.0024,  ..., -0.3086,  0.0957,  0.5811]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -31.9531, -478.2500, -303.2500,  ...,  672.5000, -226.2500,
          428.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0715, -0.3901,  0.4590,  ...,  0.2325,  0.8110, -0.5249]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0016, -0.4204, -0.4192,  ..., -0.1120, -0.2510, -0.2070]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2817, -0.1438, -0.3301,  ..., -0.2969, -0.2686,  0.4341]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-424.0000,  474.2500, -336.2500,  ..., -318.2500,  184.8750,
         -586.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.2244, 0.2195, 0.1287,  ..., 0.2595, 0.1222, 0.2487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4321,  0.2239, -0.1147,  ..., -0.1687,  0.4089, -0.0728]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2146, -0.2427, -0.1250,  ..., -0.3828, -0.4316, -0.1825]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 391.5000,    8.8125,   53.5625,  ...,  586.5000, -484.5000,
          333.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-1.8047, -0.7505, -1.0859,  ..., -0.4966,  1.2559,  0.6670]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1805, -0.3145, -0.5093,  ..., -0.3979,  0.0470,  0.3601]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3306,  0.3342, -0.1936,  ...,  0.0238,  0.2834,  0.5908]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 924.5000, -196.5000, -794.5000,  ..., -341.5000, -564.0000,
         -747.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1273, -0.2468,  0.3860,  ...,  0.6064, -0.2225, -0.2281]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0501,  0.3030,  0.2996,  ..., -0.2715,  0.1849,  0.6025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1694, -0.6655,  0.2084,  ...,  0.4797, -0.3320, -1.3223]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 259.5000, 1057.0000,  477.5000,  ...,  283.2500,  630.5000,
          -52.6562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 1.0527,  0.9775,  0.9087,  ..., -0.5967,  0.0709,  1.0127]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0139,  0.4121, -0.5781,  ...,  0.3662,  0.2793,  0.1448]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8208,  0.5938,  0.1028,  ...,  0.8438,  0.4849, -0.3037]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-1041.0000,  -329.0000,   124.8750,  ...,    36.5312,   -27.8594,
           -36.4375]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0227, -1.7627,  0.0876,  ...,  0.0572, -0.1040,  1.4707]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5967, -0.1606, -0.2036,  ...,  0.3979,  0.2141, -0.4065]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1320, -0.3750, -1.1426,  ..., -0.5166, -1.1865,  0.0871]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-254.2500, -116.5625, -137.0000,  ..., -419.5000, 1631.0000,
           96.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1672,  0.5747, -0.9946,  ...,  0.5986,  0.2739, -0.3442]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3804,  0.0508,  0.1177,  ...,  0.2937,  0.2500, -0.1306]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7246,  0.4016, -0.9233,  ..., -1.0918, -0.9233,  0.8330]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[1008.0000, -255.6250,  405.0000,  ...,  903.5000, -262.7500,
          -36.0312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3237, -1.2139,  2.1426,  ..., -0.0065,  0.0053,  0.0028]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0015,  0.0005,  0.0077,  ..., -0.0005, -0.0069, -0.0032]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0728,  0.0366,  0.0584,  ..., -0.0065,  0.0453,  0.0296]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-29.4688,  26.4688, -19.2812,  ..., -16.6094, -25.6406,  11.6797]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0076,  0.1945, -0.0316,  ...,  0.0427, -0.0173,  0.0099]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0010, -0.0113,  0.0010,  ...,  0.0015, -0.0028, -0.0122]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3994,  0.4377, -0.0645,  ..., -0.1415, -0.3308, -0.0087]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -11.7266,  107.1875,  -25.4531,  ...,  -83.7500, -164.5000,
          114.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1445, -0.8066,  0.5991,  ...,  0.0111, -0.0398, -0.0644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0475, -0.0500, -0.0137,  ...,  0.0236,  0.0803, -0.0197]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1783, -0.1287, -0.0752,  ...,  0.0254,  0.0894,  0.2325]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-64.5000, -26.2031,  -9.1875,  ..., -77.0000,  28.0781,  54.2188]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4873,  0.4336, -0.6284,  ..., -0.0280, -0.1003,  0.0832]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0171, -0.0090, -0.0397,  ...,  0.0887,  0.1401,  0.0253]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2341, -0.0324, -0.1126,  ..., -0.0962, -0.0425,  0.0394]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  23.0000,   10.7109,  133.0000,  ...,  -76.7500,  -69.8750,
         -105.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1954,  0.1292, -0.1570,  ..., -0.0294,  0.1866, -0.1449]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0310,  0.0091,  0.0784,  ...,  0.0437, -0.1094, -0.0487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2295,  0.1372, -0.2712,  ..., -0.2605, -0.0818,  0.1139]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  2.5293, 111.5625,  58.2188,  ...,  14.0234,  22.2031, -33.7500]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1355,  0.4075, -0.5967,  ..., -0.2123,  0.1646,  0.1934]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1373, -0.0909, -0.0579,  ...,  0.0518, -0.0892,  0.0534]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2561, -0.1049, -0.1194,  ...,  0.0169,  0.0916,  0.1583]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-172.2500,   75.1875,  105.4375,  ...,  -75.5000, -147.8750,
            3.0840]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3262,  0.8354, -0.0055,  ..., -0.5991,  0.4077,  0.0319]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2170,  0.0812,  0.0920,  ...,  0.1384, -0.1191, -0.0095]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0417,  0.0701,  0.0554,  ..., -0.0470, -0.3479, -0.1464]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[138.1250, -11.1719,  50.8438,  ..., -29.4375, -66.8125,  47.0938]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2749, -0.0688, -0.2438,  ..., -0.1315, -0.1661, -0.0390]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1000, -0.1226, -0.1069,  ...,  0.0672,  0.0648,  0.1792]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4468, -0.1361, -0.4995,  ...,  0.1521, -0.0761,  0.4734]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 118.5000,  149.3750,  -82.6250,  ...,   20.3750, -104.9375,
           35.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2384, -0.1361,  0.2290,  ..., -0.8354,  0.0684, -0.4888]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0602, -0.1027, -0.0024,  ...,  0.1597,  0.0677,  0.1207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.2754,  0.0501, -0.1917,  ..., -0.0116, -0.3975,  0.3987]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -74.8125,   29.2188, -198.5000,  ...,   86.5625,  125.6875,
          -44.9688]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2163, -0.2296,  0.2749,  ..., -0.7256,  0.1368,  0.1484]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0911, -0.0989, -0.0367,  ...,  0.1736,  0.1571,  0.1809]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1565,  0.1995,  0.0091,  ..., -0.5786, -0.5049,  0.2886]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -64.6875,  -81.6875,  -15.7734,  ...,  111.1250,   34.4375,
         -218.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2539, -0.2698,  0.0974,  ...,  0.0432,  0.5791,  0.0817]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1722,  0.0101,  0.1000,  ..., -0.0806,  0.0274, -0.0296]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1434, -0.5908, -0.1860,  ...,  0.0561, -0.3735,  0.0330]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -15.6797,   22.1250, -143.2500,  ...,  -33.5625,  -77.7500,
         -205.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5967,  0.5537, -1.3184,  ..., -0.1252,  0.0779, -0.2102]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0050, -0.2520, -0.0216,  ..., -0.0248,  0.3481,  0.1644]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1376, -0.2781, -0.2378,  ...,  0.4419,  0.3928,  0.1490]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  54.7500, -220.3750,  212.0000,  ...,   67.5000,  138.2500,
         -108.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4421,  0.1232,  0.7998,  ..., -0.0484, -0.5356, -0.1454]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0074,  0.1694,  0.1017,  ...,  0.0168, -0.0283,  0.1790]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1569,  0.2800,  0.3484,  ...,  0.1238, -0.0140,  0.5396]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-138.0000,   45.0000,  -49.6875,  ...,   84.4375,  -70.5000,
          -22.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7031, -0.1393,  0.0833,  ..., -0.1174, -0.2051, -0.3931]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-8.2153e-02, -4.9171e-03, -3.2074e-02,  ...,  2.7979e-01,
          3.2422e-01, -1.7917e-04]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.4912,  0.1387, -0.1989,  ..., -0.3140,  0.1293, -0.3293]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  55.5938,  -12.6719,  -64.0625,  ...,    7.0625, -167.1250,
          170.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.8164, -1.2021, -0.0798,  ...,  0.5078,  0.2681, -0.6445]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1057, -0.0062,  0.0315,  ..., -0.0150, -0.0737,  0.1108]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0268,  0.0914, -0.4341,  ...,  0.0653,  0.2068,  0.1035]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -32.8438,  202.8750,  307.5000,  ..., -297.0000, -122.8750,
           84.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6357, -0.0027,  0.1667,  ..., -0.6221, -0.4412,  0.4509]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0290, -0.0340,  0.1207,  ...,  0.2446, -0.0177,  0.1055]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1606,  0.0152, -0.1467,  ...,  0.6265, -0.0550,  0.0861]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 158.2500, -172.1250, -181.6250,  ...,  192.2500,  274.2500,
         -474.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5713, -0.6650,  0.2418,  ...,  0.5161, -0.1232,  0.3342]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3896, -0.3665, -0.0764,  ..., -0.3826, -0.1233,  0.1583]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.7222,  0.2473, -0.2338,  ..., -0.2092, -0.5073, -0.0945]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-124.8125, -210.7500,    5.7227,  ..., -306.0000,  240.2500,
           85.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4475, -0.2549,  0.4419,  ..., -0.0278, -0.1691,  0.5420]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1608, -0.0621, -0.0579,  ..., -0.0625,  0.0660,  0.2208]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1020,  0.0835, -0.6445,  ..., -0.1748,  0.2323, -0.4807]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 183.1250, -155.2500,  -48.5625,  ..., -272.5000, -140.1250,
          -44.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0140,  0.2476, -0.9243,  ...,  0.4768, -0.0753, -0.0218]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0083,  0.0248, -0.1301,  ..., -0.0732, -0.1361,  0.0413]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5503, -0.1448, -0.0780,  ...,  0.6147,  0.0132,  0.3555]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-389.5000, -112.4375,   54.9688,  ..., -645.0000, -117.8750,
          -23.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.5967, -1.4072, -0.5835,  ...,  0.2102,  0.1879,  0.1981]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0411,  0.0625,  0.0920,  ..., -0.0892, -0.1718,  0.0967]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 1.9521,  0.6831,  0.4727,  ..., -0.4221,  0.6548,  0.5054]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-227.7500,  213.0000,  -47.4688,  ...,   55.7500,  165.8750,
         -232.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4143,  0.2057,  0.6567,  ...,  0.0032,  0.2798,  0.8096]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0310, -0.0607,  0.0516,  ...,  0.0852,  0.2363, -0.0181]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3328,  0.0254, -0.5605,  ..., -0.0483,  0.3464, -0.4314]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 218.2500, -217.3750, -267.5000,  ..., -101.0625, -475.7500,
         -192.6250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3276,  0.4216, -0.8252,  ...,  0.5840,  0.1593, -0.1350]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3833, -0.2499, -0.1207,  ..., -0.0010, -0.0186, -0.0835]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0014, -0.9746, -0.9512,  ..., -0.5610,  0.6362,  0.2328]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-227.2500,  294.5000,  154.2500,  ...,   26.9844,   -3.0234,
         -244.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2871,  0.2194,  0.5630,  ..., -0.5903, -0.2942, -0.0865]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0735,  0.1414, -0.0764,  ...,  0.0127, -0.1576, -0.0265]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1322, -0.1089, -0.0651,  ..., -0.6533, -0.8579,  0.7554]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-143.7500,   12.4453,  528.5000,  ...,  -33.5312,  484.0000,
         -140.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0648,  0.1718,  0.4109,  ..., -0.7280,  0.5947,  0.6841]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0858, -0.4221,  0.0067,  ..., -0.2659,  0.3818,  0.1058]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0468,  0.3210, -0.2600,  ..., -0.1273,  0.5825, -0.0623]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-971.5000,  -97.6875,   69.8125,  ...,  502.0000,  409.7500,
         -196.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0104, -1.2686, -0.0243,  ..., -0.3335,  0.5415, -0.2247]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1400, -0.1088, -0.2152,  ..., -0.0826, -0.1398,  0.0816]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3342, -0.7827,  0.5864,  ...,  0.2009, -0.2039,  0.4424]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-295.5000, -223.5000, -127.4375,  ...,  -67.7500, -428.2500,
          163.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2183, -0.4204,  0.5688,  ...,  1.4111, -0.6489, -0.9102]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1632, -0.0693, -0.4614,  ...,  0.0637,  0.0696, -0.1379]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0128,  0.0025,  0.3066,  ..., -0.1869,  0.6333, -0.3835]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-56.1562, 103.7500, 298.2500,  ..., 448.0000, 108.2500, 137.0000]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.9448, -0.5381, -0.6328,  ...,  0.9277, -0.3000, -0.8262]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0966, -0.1233, -0.0133,  ..., -0.3352,  0.7344,  0.1958]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1945, -1.0850, -0.4985,  ..., -0.1754, -0.1042,  0.5415]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 171.0000, -638.0000,   48.6250,  ...,  985.0000, -229.6250,
          275.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.3694, -0.0577,  0.1083,  ..., -1.4395, -0.6973, -1.2910]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0177, -0.0861, -0.3638,  ..., -0.4231,  0.0242,  0.2903]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2634,  1.2393,  0.1871,  ...,  0.3589,  0.4204,  0.2737]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-272.5000, -605.5000, -577.5000,  ...,  521.5000,  -31.7656,
          222.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7378, -0.2705, -0.4670,  ...,  1.7197, -1.0645,  1.0068]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2271,  0.3013,  0.4868,  ..., -0.1427,  0.3733,  0.5327]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3889, -1.3594,  0.8613,  ..., -0.4578,  0.1152, -1.1816]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-791.5000, -302.5000,  667.0000,  ..., -815.5000,   67.5625,
         -147.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.7480,  0.3552,  0.4978,  ..., -0.3704,  0.3496, -0.5640]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0746,  0.0667, -0.4783,  ...,  0.5317, -0.1481,  0.2434]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1317, -0.0261, -0.6875,  ...,  1.5020, -0.2698, -0.0095]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  779.5000, -1096.0000,  -180.0000,  ...,  -302.5000,   634.5000,
          -271.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.6724,  0.2732, -0.3088,  ..., -1.1338, -0.3020, -1.1455]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.5352,  0.3721,  0.5430,  ...,  0.2065, -0.2109, -0.5786]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4573, -1.0566, -0.5308,  ...,  0.2979, -0.5654, -0.1322]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -294.5000,  -437.7500,   931.5000,  ..., -1738.0000,   207.0000,
          -396.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.9321,  0.2842, -0.3198,  ...,  0.7949,  1.0420,  0.7012]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.4585,  0.2708,  0.1526,  ..., -0.0479,  0.5854, -0.0191]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.7466,  0.2159, -0.4185,  ...,  0.0278, -2.1426,  0.4707]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 1899.0000, -2738.0000,   550.5000,  ...,  -167.3750, -5640.0000,
          -516.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2817, -0.9102,  1.8994,  ...,  0.0123, -0.0030, -0.0063]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0021,  0.0033,  0.0076,  ..., -0.0002, -0.0091, -0.0014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1803, -0.0266, -0.0521,  ...,  0.1422,  0.1324, -0.0047]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[14.7344, -3.9668,  7.0742,  ...,  8.6172, 17.1562,  1.7471]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.4780,  0.4004,  0.3079,  ...,  0.0370, -0.0302,  0.0049]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0060,  0.0082, -0.0096,  ..., -0.0070,  0.0102,  0.0305]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0831,  0.0218, -0.1848,  ..., -0.1046,  0.0638, -0.0967]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[103.0000,  49.2812,  33.1250,  ...,  92.8750, 107.0000, -37.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1169,  0.0476,  0.5610,  ..., -0.4468,  0.2590,  0.1843]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0109,  0.0020, -0.0080,  ..., -0.0117,  0.0529, -0.0361]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.3027, -0.1311, -0.2278,  ..., -0.1031, -0.0762,  0.3008]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[29.2344, 18.4219, 36.7812,  ..., 46.8438,  4.7695,  9.1172]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1760, -0.1256, -0.9141,  ..., -0.0562,  0.0200, -0.1025]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0862,  0.0776, -0.0443,  ...,  0.0872,  0.0753, -0.0843]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2145, -0.0493,  0.1820,  ...,  0.0369,  0.3574,  0.3843]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -19.9219,    2.9355, -107.5625,  ...,   46.8438,   24.7344,
         -118.0625]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2159, -0.2462,  0.0698,  ..., -0.2493, -0.0206, -0.1475]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0578,  0.0152,  0.0154,  ...,  0.0948, -0.0927, -0.0663]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0242, -0.2128, -0.1968,  ...,  0.1122, -0.2168, -0.1897]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -40.3750,  123.9375,   83.6250,  ...,  191.3750,  101.3750,
         -160.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.2163,  0.3210, -0.4656,  ..., -0.0091, -0.0565,  0.0206]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0171, -0.1117, -0.0651,  ...,  0.1096, -0.0764, -0.0806]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.1505,  0.3184, -0.5610,  ..., -0.3179,  0.3052,  0.0294]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  5.0508,  74.3125, -47.2500,  ...,  41.0312, -19.3906, 149.6250]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8901,  0.7261, -0.3037,  ..., -0.2515,  0.0616,  0.3054]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0684,  0.0536,  0.0666,  ...,  0.1880, -0.0040, -0.0709]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0370, -0.0363,  0.2178,  ..., -0.0825,  0.3630,  0.0113]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-108.7500,  -68.3750, -142.6250,  ..., -102.8750, -139.5000,
           71.3125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0959,  0.5112, -0.0706,  ..., -0.0063, -0.0207,  0.4221]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0726, -0.1412, -0.0883,  ...,  0.1158,  0.0507,  0.1489]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2539,  0.6348, -0.3469,  ...,  0.2061,  0.1223, -0.2683]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-211.0000,  119.0000, -159.8750,  ...,  -25.6562,  139.8750,
          -80.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1031, -0.3789,  0.2734,  ...,  0.0250,  0.6885, -0.2102]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1348, -0.0212,  0.0546,  ...,  0.1749,  0.0313,  0.2462]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2299, -0.0453, -0.1381,  ..., -0.1114,  0.6519,  0.2196]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-133.6250,   92.5000,  -30.6250,  ..., -353.5000,  182.1250,
          -88.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2612,  0.2673,  0.1793,  ..., -0.2720, -0.6294,  0.1628]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.1149, -0.0280, -0.1859,  ...,  0.0809,  0.1534,  0.1829]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1805, -0.0087, -0.2717,  ...,  0.5083, -0.1436,  0.4958]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  23.0938, -213.2500,   10.4766,  ..., -115.1875, -265.7500,
          123.1250]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0269,  0.0546,  0.1927,  ..., -0.4795,  0.5537,  0.1157]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1178, -0.0201,  0.1205,  ..., -0.0365, -0.0004, -0.0235]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0129, -0.4343, -0.1656,  ...,  0.2137,  0.1931,  0.1153]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 348.0000,  455.7500,  214.6250,  ...,  232.1250, -256.5000,
            8.1562]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0028,  0.7935, -1.0361,  ...,  0.5972, -0.2939, -0.4412]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0397, -0.0890, -0.1061,  ..., -0.0928,  0.0898,  0.1434]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0683,  0.2250, -0.1292,  ...,  0.1129, -0.1346,  0.1541]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 93.0625, 162.1250, 236.8750,  ...,  51.7500,  96.0000, -15.1953]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7153, -0.8486,  0.2578,  ...,  0.0059, -0.5410,  0.4541]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0609,  0.1241, -0.1011,  ...,  0.1552,  0.0612,  0.2203]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4868,  0.4294, -1.1406,  ...,  0.2744, -0.0211,  0.6694]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 155.0000, -236.8750,   71.8750,  ...,  112.7500,  184.3750,
         -133.8750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0500,  0.6660, -0.0811,  ..., -0.0944,  0.0925,  0.2118]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0111,  0.0148,  0.0303,  ...,  0.1517,  0.3882, -0.0142]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5127, -0.2261,  0.2312,  ...,  0.1705, -0.0554,  0.5205]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-218.7500,  -51.5938,  -95.0000,  ...,   70.0000, -126.3125,
         -118.7500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6367, -1.2324, -0.6230,  ...,  0.2007,  0.9741,  0.0192]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0388, -0.0089,  0.0367,  ...,  0.0233, -0.1941, -0.1205]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.0052, -0.1594, -0.1655,  ..., -0.0150,  0.5166, -0.0077]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 141.8750, -113.3125,  184.7500,  ..., -177.7500, -310.7500,
           34.2812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.7930, -0.7158,  0.5874,  ..., -0.0984, -0.0584,  0.2383]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0383,  0.0063,  0.1597,  ...,  0.1921, -0.0532,  0.2491]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2023, -0.3403, -0.4456,  ...,  0.4519,  0.4194,  0.3176]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  -2.9961,   30.2656, -375.0000,  ...,  -91.0625,   17.8750,
          -34.2812]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0991, -0.2524,  0.9663,  ..., -0.6357,  0.0640,  0.5557]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1808, -0.2141, -0.1235,  ..., -0.3464, -0.0290,  0.1885]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[0.1423, 0.2954, 0.0131,  ..., 0.1783, 0.2310, 0.1226]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -40.4062,  -82.1875,  163.3750,  ...,  448.5000,  239.5000,
         -287.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1006, -0.0691,  0.3069,  ...,  0.4470,  0.1664,  0.2834]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1429, -0.1354, -0.1902,  ...,  0.0206,  0.2184,  0.1224]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2325, -0.1663, -0.1216,  ...,  0.5098, -0.1714, -0.1207]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 133.2500,  251.3750,   75.7500,  ...,  -11.7656, -177.1250,
           16.7656]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0980, -0.4841, -0.0055,  ..., -0.1754, -0.5488, -0.0487]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2673,  0.0248, -0.0779,  ...,  0.1166,  0.1475, -0.0795]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-1.4775, -0.4656, -0.5469,  ..., -0.3035, -0.2272,  0.1071]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-290.0000,  -69.8125, -155.5000,  ...,  -47.4062, -105.3125,
          -97.8125]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.0728, -1.0195, -0.4077,  ...,  0.9785,  0.5439,  0.0403]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0121,  0.3701,  0.1617,  ..., -0.0577, -0.1946,  0.1447]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 2.9629,  0.2417, -0.1615,  ..., -0.2292,  0.0576,  1.1309]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-123.9375,  -70.6250,  -50.4062,  ..., -315.0000, -339.7500,
          880.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.1804, -0.1849,  0.8086,  ...,  0.2544,  0.1517, -0.7090]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0972, -0.3503, -0.0116,  ...,  0.2106,  0.2471, -0.0373]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1006, -0.1368,  0.0178,  ...,  0.5024, -0.2966, -0.0299]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 319.7500,  188.8750, -204.1250,  ..., -150.6250,  336.5000,
            8.2031]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.4998, -0.3027,  0.0323,  ..., -0.7153,  0.3691, -0.3423]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2849, -0.2668, -0.3320,  ...,  0.0698, -0.0828, -0.2113]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4485,  0.2053, -0.9854,  ...,  0.0188,  0.8623,  0.0659]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  94.5625,  -33.8750,  271.2500,  ..., -131.3750,  307.2500,
           88.6875]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.6235,  0.1108, -0.2045,  ...,  0.0762, -0.0324, -0.7207]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.0775,  0.0357,  0.2429,  ..., -0.0893,  0.2659, -0.3413]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.0155, -0.3320,  0.4448,  ...,  0.4062,  0.5781,  0.0912]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  33.0312, -165.2500, -208.1250,  ...,  638.0000, -104.0000,
           52.0312]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1617, -0.2671,  0.0147,  ...,  0.1456,  0.0402,  0.1844]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1360, -0.4900,  0.0171,  ..., -0.2273, -0.0141,  0.2104]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2554, -0.7598,  0.2067,  ...,  0.3818,  0.5498, -0.6348]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 181.1250, -229.7500, -175.7500,  ...,  690.0000,  -23.0312,
         -105.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0787, -0.6572, -0.8359,  ...,  0.0169,  1.1328, -0.8521]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1113, -0.0997,  0.2173,  ...,  0.1055, -0.0446,  0.0768]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2450, -0.0584, -0.3098,  ..., -0.0718,  0.1161, -0.1300]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-207.0000, -132.1250, -441.7500,  ..., -122.0625, -277.5000,
          149.2500]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.3889, -0.3201,  0.0716,  ...,  1.1162, -1.1592, -0.3464]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.2522, -0.1422, -0.3655,  ...,  0.0554, -0.1949, -0.5430]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.3293, -1.5996, -0.0501,  ...,  0.0190, -0.4326,  0.3882]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-827.5000,  536.5000,  109.9375,  ...,   49.7812, -338.2500,
          283.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.0233,  0.6113, -0.0785,  ...,  0.1957, -0.4092, -0.1697]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.3462,  0.0587, -0.0596,  ..., -0.6846,  0.9858,  0.0290]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.1639, -0.0662, -0.2715,  ...,  0.1652,  0.0448,  0.3955]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ 489.7500,  122.0000, -716.0000,  ..., -996.5000, -599.0000,
         -273.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8711,  0.6426, -0.8755,  ...,  0.1921,  1.4434,  0.2041]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.2347,  0.0769, -0.4485,  ...,  0.0592,  0.4661,  0.0219]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.2651,  0.0340, -0.1334,  ..., -0.0436, -0.0030,  0.2039]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-470.2500,  509.0000, -558.5000,  ...,   23.4688, -349.7500,
          739.5000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.2581, -0.4849, -0.2397,  ...,  0.7041, -0.8159,  0.0107]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.3687,  0.3254, -0.0309,  ..., -0.2842,  0.5674,  0.0473]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.8867, -0.3123,  0.2788,  ...,  0.0822, -0.4937, -0.6597]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  209.8750,   438.2500,  -585.0000,  ...,  1072.0000,   388.0000,
         -1016.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[0.3655, 0.3398, 0.4470,  ..., 0.1575, 0.9575, 0.3271]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.0691,  0.3901, -0.5630,  ...,  0.2076,  0.1505, -0.6030]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.4075, -0.1439, -1.2803,  ...,  0.2434, -0.3489, -0.1075]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[ -225.7500,   258.0000,  -395.5000,  ...,  -263.2500, -1650.0000,
           146.3750]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[ 0.1064,  0.2891,  1.2295,  ..., -0.6943,  1.4033,  1.4014]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[ 0.4004,  0.2308,  0.2751,  ..., -0.6650, -0.1410, -0.3430]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[-0.2864, -1.3545, -0.6523,  ...,  0.0113, -0.4304, -0.3445]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[-740.0000,  -43.5938, -460.0000,  ...,  806.0000,  299.5000,
         1162.0000]], device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([12288, 2048])
tensor([[-0.8218, -0.2247, -1.2500,  ...,  0.8374,  0.1627, -0.3516]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([4096, 2048])
tensor([[-0.1897, -0.1415,  0.5049,  ...,  0.3267,  0.5444,  0.3516]],
       device='cuda:0', dtype=torch.float16)
call 4 bit mix
torch.Size([1, 4096])torch.Size([22016, 2048])
tensor([[ 0.5498, -0.2803, -1.0039,  ...,  0.2205, -1.2607,  1.1191]],
       device='cuda:0', dtype=torch.float16)
call 8 bit mix
torch.Size([1, 11008])torch.Size([4096, 11008])
tensor([[  428.0000,    70.5000,  -443.0000,  ...,  -364.2500, -1154.0000,
         -1482.0000]], device='cuda:0', dtype=torch.float16)
Prompt: 'Statement 1 | If aH is an element of a factor group, then |aH| divides |a|. Statement 2 | If H and K are subgroups of G then HK is a subgroup of G. A. True, True B. False, False C. True, False D. False, True Answer: B  Statement 1 | Every element of a group generates a cyclic subgroup of the group. Statement 2 | The symmetric group S_10 has 10 elements. A. True, True B. False, False C. True, False D. False, True Answer: C ', Generated text: " Stat23- kein 2, wp. Future' Ferdinandlet it ("
